
LIN_bus_stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009384  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800950c  0800950c  0001950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009528  08009528  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009528  08009528  00019528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009530  08009530  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009530  08009530  00019530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009534  08009534  00019534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000009d0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a50  20000a50  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e132  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004664  00000000  00000000  0003e225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001970  00000000  00000000  00042890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013d0  00000000  00000000  00044200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024d35  00000000  00000000  000455d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021bd0  00000000  00000000  0006a305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d61cf  00000000  00000000  0008bed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006f84  00000000  00000000  001620a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00169028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080094f4 	.word	0x080094f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	080094f4 	.word	0x080094f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <led_testing>:
//--------------------------------------------------------------
LIN_MASTER_t LIN_MASTER;
LIN_FRAME_t LIN_FRAME;
uint8_t btn = 1;

void led_testing() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0))
 80004c8:	2101      	movs	r1, #1
 80004ca:	4816      	ldr	r0, [pc, #88]	; (8000524 <led_testing+0x60>)
 80004cc:	f001 f95a 	bl	8001784 <HAL_GPIO_ReadPin>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d009      	beq.n	80004ea <led_testing+0x26>
    {
        HAL_Delay(500);
 80004d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004da:	f000 fdef 	bl	80010bc <HAL_Delay>
        btn = -btn;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <led_testing+0x64>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	425b      	negs	r3, r3
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <led_testing+0x64>)
 80004e8:	701a      	strb	r2, [r3, #0]
    }
    if(btn == 1)
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <led_testing+0x64>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d10b      	bne.n	800050a <led_testing+0x46>
    {
//        HAL_Delay(200);
        // Set The LED ON!
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2104      	movs	r1, #4
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <led_testing+0x60>)
 80004f8:	f001 f95c 	bl	80017b4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <led_testing+0x68>)
 8000504:	f001 f956 	bl	80017b4 <HAL_GPIO_WritePin>
//        HAL_Delay(200);
        // Else .. Turn LED OFF!
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
    }
}
 8000508:	e00a      	b.n	8000520 <led_testing+0x5c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2104      	movs	r1, #4
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <led_testing+0x60>)
 8000510:	f001 f950 	bl	80017b4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800051a:	4804      	ldr	r0, [pc, #16]	; (800052c <led_testing+0x68>)
 800051c:	f001 f94a 	bl	80017b4 <HAL_GPIO_WritePin>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40020000 	.word	0x40020000
 8000528:	20000000 	.word	0x20000000
 800052c:	40020c00 	.word	0x40020c00

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fd50 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f818 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f962 	bl	8000804 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000540:	f000 f87e 	bl	8000640 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000544:	f000 f8aa 	bl	800069c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000548:	f000 f8d8 	bl	80006fc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800054c:	f008 fb7e 	bl	8008c4c <MX_USB_HOST_Init>
  MX_TIM14_Init();
 8000550:	f000 f90a 	bl	8000768 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8000554:	f000 f92c 	bl	80007b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /*start timer*/
  HAL_TIM_Base_Start_IT(&htim14);
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <main+0x38>)
 800055a:	f004 fa21 	bl	80049a0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800055e:	f008 fb9b 	bl	8008c98 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    led_testing();
 8000562:	f7ff ffaf 	bl	80004c4 <led_testing>
    MX_USB_HOST_Process();
 8000566:	e7fa      	b.n	800055e <main+0x2e>
 8000568:	20000190 	.word	0x20000190

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f008 ff2a 	bl	80093d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a27      	ldr	r2, [pc, #156]	; (8000638 <SystemClock_Config+0xcc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd0>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005e0:	23a8      	movs	r3, #168	; 0xa8
 80005e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 fb25 	bl	8003c40 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005fc:	f000 fa54 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2105      	movs	r1, #5
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fd86 	bl	8004130 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800062a:	f000 fa3d 	bl	8000aa8 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C1_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MX_I2C1_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C1_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_I2C1_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_I2C1_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_I2C1_Init+0x50>)
 800067e:	f002 fcfb 	bl	8003078 <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 fa0e 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000009c 	.word	0x2000009c
 8000694:	40005400 	.word	0x40005400
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <MX_I2S3_Init+0x58>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006c4:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <MX_I2S3_Init+0x5c>)
 80006c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_I2S3_Init+0x54>)
 80006dc:	f002 fe10 	bl	8003300 <HAL_I2S_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006e6:	f000 f9df 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000f0 	.word	0x200000f0
 80006f4:	40003c00 	.word	0x40003c00
 80006f8:	00017700 	.word	0x00017700

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI1_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI1_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI1_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI1_Init+0x64>)
 800074e:	f004 f84f 	bl	80047f0 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f9a6 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000138 	.word	0x20000138
 8000764:	40013000 	.word	0x40013000

08000768 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_TIM14_Init+0x40>)
 800076e:	4a0f      	ldr	r2, [pc, #60]	; (80007ac <MX_TIM14_Init+0x44>)
 8000770:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_TIM14_Init+0x40>)
 8000774:	2253      	movs	r2, #83	; 0x53
 8000776:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_TIM14_Init+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_TIM14_Init+0x40>)
 8000780:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000784:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_TIM14_Init+0x40>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_TIM14_Init+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_TIM14_Init+0x40>)
 8000794:	f004 f8b5 	bl	8004902 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800079e:	f000 f983 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000190 	.word	0x20000190
 80007ac:	40002000 	.word	0x40002000

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART2_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007bc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 80007e6:	2120      	movs	r1, #32
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ea:	f004 fb2d 	bl	8004e48 <HAL_LIN_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80007f4:	f000 f958 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200001d8 	.word	0x200001d8
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b8a      	ldr	r3, [pc, #552]	; (8000a48 <MX_GPIO_Init+0x244>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a89      	ldr	r2, [pc, #548]	; (8000a48 <MX_GPIO_Init+0x244>)
 8000824:	f043 0310 	orr.w	r3, r3, #16
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b87      	ldr	r3, [pc, #540]	; (8000a48 <MX_GPIO_Init+0x244>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0310 	and.w	r3, r3, #16
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	4b83      	ldr	r3, [pc, #524]	; (8000a48 <MX_GPIO_Init+0x244>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a82      	ldr	r2, [pc, #520]	; (8000a48 <MX_GPIO_Init+0x244>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b80      	ldr	r3, [pc, #512]	; (8000a48 <MX_GPIO_Init+0x244>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b7c      	ldr	r3, [pc, #496]	; (8000a48 <MX_GPIO_Init+0x244>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a7b      	ldr	r2, [pc, #492]	; (8000a48 <MX_GPIO_Init+0x244>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b79      	ldr	r3, [pc, #484]	; (8000a48 <MX_GPIO_Init+0x244>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b75      	ldr	r3, [pc, #468]	; (8000a48 <MX_GPIO_Init+0x244>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a74      	ldr	r2, [pc, #464]	; (8000a48 <MX_GPIO_Init+0x244>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b72      	ldr	r3, [pc, #456]	; (8000a48 <MX_GPIO_Init+0x244>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b6e      	ldr	r3, [pc, #440]	; (8000a48 <MX_GPIO_Init+0x244>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a6d      	ldr	r2, [pc, #436]	; (8000a48 <MX_GPIO_Init+0x244>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b6b      	ldr	r3, [pc, #428]	; (8000a48 <MX_GPIO_Init+0x244>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b67      	ldr	r3, [pc, #412]	; (8000a48 <MX_GPIO_Init+0x244>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a66      	ldr	r2, [pc, #408]	; (8000a48 <MX_GPIO_Init+0x244>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b64      	ldr	r3, [pc, #400]	; (8000a48 <MX_GPIO_Init+0x244>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0308 	and.w	r3, r3, #8
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2108      	movs	r1, #8
 80008c6:	4861      	ldr	r0, [pc, #388]	; (8000a4c <MX_GPIO_Init+0x248>)
 80008c8:	f000 ff74 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	485f      	ldr	r0, [pc, #380]	; (8000a50 <MX_GPIO_Init+0x24c>)
 80008d2:	f000 ff6f 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|LD4_Pin|LD3_Pin|LD5_Pin
 80008d6:	2200      	movs	r2, #0
 80008d8:	f24f 1110 	movw	r1, #61712	; 0xf110
 80008dc:	485d      	ldr	r0, [pc, #372]	; (8000a54 <MX_GPIO_Init+0x250>)
 80008de:	f000 ff69 	bl	80017b4 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008e2:	2308      	movs	r3, #8
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4854      	ldr	r0, [pc, #336]	; (8000a4c <MX_GPIO_Init+0x248>)
 80008fa:	f000 fda7 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	484e      	ldr	r0, [pc, #312]	; (8000a50 <MX_GPIO_Init+0x24c>)
 8000916:	f000 fd99 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800091a:	2308      	movs	r3, #8
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092a:	2305      	movs	r3, #5
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4846      	ldr	r0, [pc, #280]	; (8000a50 <MX_GPIO_Init+0x24c>)
 8000936:	f000 fd89 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093a:	2301      	movs	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4842      	ldr	r0, [pc, #264]	; (8000a58 <MX_GPIO_Init+0x254>)
 8000950:	f000 fd7c 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000954:	2308      	movs	r3, #8
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095c:	2301      	movs	r3, #1
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	483c      	ldr	r0, [pc, #240]	; (8000a58 <MX_GPIO_Init+0x254>)
 8000968:	f000 fd70 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800096c:	2304      	movs	r3, #4
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4837      	ldr	r0, [pc, #220]	; (8000a5c <MX_GPIO_Init+0x258>)
 8000980:	f000 fd64 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000996:	2305      	movs	r3, #5
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	482e      	ldr	r0, [pc, #184]	; (8000a5c <MX_GPIO_Init+0x258>)
 80009a2:	f000 fd53 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4828      	ldr	r0, [pc, #160]	; (8000a5c <MX_GPIO_Init+0x258>)
 80009bc:	f000 fd46 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009c6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4821      	ldr	r0, [pc, #132]	; (8000a5c <MX_GPIO_Init+0x258>)
 80009d8:	f000 fd38 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4817      	ldr	r0, [pc, #92]	; (8000a54 <MX_GPIO_Init+0x250>)
 80009f6:	f000 fd29 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009fa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4810      	ldr	r0, [pc, #64]	; (8000a54 <MX_GPIO_Init+0x250>)
 8000a14:	f000 fd1a 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480a      	ldr	r0, [pc, #40]	; (8000a54 <MX_GPIO_Init+0x250>)
 8000a2c:	f000 fd0e 	bl	800144c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2028      	movs	r0, #40	; 0x28
 8000a36:	f000 fc40 	bl	80012ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a3a:	2028      	movs	r0, #40	; 0x28
 8000a3c:	f000 fc59 	bl	80012f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a40:	bf00      	nop
 8000a42:	3730      	adds	r7, #48	; 0x30
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020c00 	.word	0x40020c00
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020400 	.word	0x40020400

08000a60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim14)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d111      	bne.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x34>
  {
	  if(counter_timer >= 100) {
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b63      	cmp	r3, #99	; 0x63
 8000a76:	d908      	bls.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x2a>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a7e:	f000 feb2 	bl	80017e6 <HAL_GPIO_TogglePin>
		  counter_timer = 0;
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
	  } else {
		  counter_timer++;
	  }

  }
}
 8000a88:	e004      	b.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x34>
		  counter_timer++;
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000190 	.word	0x20000190
 8000aa0:	2000021c 	.word	0x2000021c
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af2:	2007      	movs	r0, #7
 8000af4:	f000 fbd6 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_I2C_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12c      	bne.n	8000b80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b48:	2312      	movs	r3, #18
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b54:	2304      	movs	r3, #4
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <HAL_I2C_MspInit+0x8c>)
 8000b60:	f000 fc74 	bl	800144c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	; 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400

08000b94 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a31      	ldr	r2, [pc, #196]	; (8000c84 <HAL_I2S_MspInit+0xf0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d15a      	bne.n	8000c7a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bc8:	23c0      	movs	r3, #192	; 0xc0
 8000bca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fccb 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000be0:	f7ff ff62 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <HAL_I2S_MspInit+0xf4>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <HAL_I2S_MspInit+0xf4>)
 8000bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf4:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <HAL_I2S_MspInit+0xf4>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <HAL_I2S_MspInit+0xf4>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a1f      	ldr	r2, [pc, #124]	; (8000c88 <HAL_I2S_MspInit+0xf4>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <HAL_I2S_MspInit+0xf4>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <HAL_I2S_MspInit+0xf4>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <HAL_I2S_MspInit+0xf4>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <HAL_I2S_MspInit+0xf4>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c48:	2306      	movs	r3, #6
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	480e      	ldr	r0, [pc, #56]	; (8000c8c <HAL_I2S_MspInit+0xf8>)
 8000c54:	f000 fbfa 	bl	800144c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c58:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c6a:	2306      	movs	r3, #6
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4806      	ldr	r0, [pc, #24]	; (8000c90 <HAL_I2S_MspInit+0xfc>)
 8000c76:	f000 fbe9 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3738      	adds	r7, #56	; 0x38
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40003c00 	.word	0x40003c00
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020800 	.word	0x40020800

08000c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <HAL_SPI_MspInit+0x84>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d12b      	bne.n	8000d0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_SPI_MspInit+0x88>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <HAL_SPI_MspInit+0x88>)
 8000cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_SPI_MspInit+0x88>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_SPI_MspInit+0x88>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <HAL_SPI_MspInit+0x88>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_SPI_MspInit+0x88>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cee:	23e0      	movs	r3, #224	; 0xe0
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <HAL_SPI_MspInit+0x8c>)
 8000d0a:	f000 fb9f 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	; 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40013000 	.word	0x40013000
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000

08000d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <HAL_TIM_Base_MspInit+0x48>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d115      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_TIM_Base_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <HAL_TIM_Base_MspInit+0x4c>)
 8000d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_TIM_Base_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	202d      	movs	r0, #45	; 0x2d
 8000d58:	f000 faaf 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000d5c:	202d      	movs	r0, #45	; 0x2d
 8000d5e:	f000 fac8 	bl	80012f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40002000 	.word	0x40002000
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a2c      	ldr	r2, [pc, #176]	; (8000e44 <HAL_UART_MspInit+0xd0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d151      	bne.n	8000e3a <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <HAL_UART_MspInit+0xd4>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a2a      	ldr	r2, [pc, #168]	; (8000e48 <HAL_UART_MspInit+0xd4>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <HAL_UART_MspInit+0xd4>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <HAL_UART_MspInit+0xd4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <HAL_UART_MspInit+0xd4>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <HAL_UART_MspInit+0xd4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_UART_MspInit+0xd4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <HAL_UART_MspInit+0xd4>)
 8000dd8:	f043 0308 	orr.w	r3, r3, #8
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_UART_MspInit+0xd4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dea:	2304      	movs	r3, #4
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4811      	ldr	r0, [pc, #68]	; (8000e4c <HAL_UART_MspInit+0xd8>)
 8000e06:	f000 fb21 	bl	800144c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e0a:	2340      	movs	r3, #64	; 0x40
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	480a      	ldr	r0, [pc, #40]	; (8000e50 <HAL_UART_MspInit+0xdc>)
 8000e26:	f000 fb11 	bl	800144c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2026      	movs	r0, #38	; 0x26
 8000e30:	f000 fa43 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e34:	2026      	movs	r0, #38	; 0x26
 8000e36:	f000 fa5c 	bl	80012f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40004400 	.word	0x40004400
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020c00 	.word	0x40020c00

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f8ec 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <USART2_IRQHandler+0x10>)
 8000eae:	f004 f831 	bl	8004f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200001d8 	.word	0x200001d8

08000ebc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000ec0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ec4:	f000 fcaa 	bl	800181c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ed2:	f003 fdd5 	bl	8004a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000190 	.word	0x20000190

08000ee0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <OTG_FS_IRQHandler+0x10>)
 8000ee6:	f000 ff27 	bl	8001d38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000604 	.word	0x20000604

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f008 fa6e 	bl	8009404 <__errno>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20020000 	.word	0x20020000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	20000220 	.word	0x20000220
 8000f5c:	20000a50 	.word	0x20000a50

08000f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <SystemInit+0x20>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <SystemInit+0x20>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f8a:	490e      	ldr	r1, [pc, #56]	; (8000fc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa0:	4c0b      	ldr	r4, [pc, #44]	; (8000fd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fae:	f7ff ffd7 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f008 fa2d 	bl	8009410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb6:	f7ff fabb 	bl	8000530 <main>
  bx  lr    
 8000fba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000fc8:	08009538 	.word	0x08009538
  ldr r2, =_sbss
 8000fcc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000fd0:	20000a50 	.word	0x20000a50

08000fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <HAL_Init+0x40>)
 8000fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_Init+0x40>)
 8000fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_Init+0x40>)
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f94f 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fd52 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023c00 	.word	0x40023c00

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f967 	bl	800130e <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f92f 	bl	80012ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000004 	.word	0x20000004
 8001074:	2000000c 	.word	0x2000000c
 8001078:	20000008 	.word	0x20000008

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	2000000c 	.word	0x2000000c
 80010a0:	20000224 	.word	0x20000224

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000224 	.word	0x20000224

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000000c 	.word	0x2000000c

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db0b      	blt.n	8001192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	4907      	ldr	r1, [pc, #28]	; (80011a0 <__NVIC_EnableIRQ+0x38>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2001      	movs	r0, #1
 800118a:	fa00 f202 	lsl.w	r2, r0, r2
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	; (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	; (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	4313      	orrs	r3, r2
         );
}
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff8e 	bl	80011a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff29 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012cc:	f7ff ff3e 	bl	800114c <__NVIC_GetPriorityGrouping>
 80012d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ff8e 	bl	80011f8 <NVIC_EncodePriority>
 80012dc:	4602      	mov	r2, r0
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff5d 	bl	80011a4 <__NVIC_SetPriority>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff31 	bl	8001168 <__NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffa2 	bl	8001260 <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff feb6 	bl	80010a4 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d008      	beq.n	8001358 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e052      	b.n	80013fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0216 	bic.w	r2, r2, #22
 8001366:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001376:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	2b00      	cmp	r3, #0
 800137e:	d103      	bne.n	8001388 <HAL_DMA_Abort+0x62>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0208 	bic.w	r2, r2, #8
 8001396:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a8:	e013      	b.n	80013d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013aa:	f7ff fe7b 	bl	80010a4 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d90c      	bls.n	80013d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2220      	movs	r2, #32
 80013bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2203      	movs	r2, #3
 80013c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e015      	b.n	80013fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e4      	bne.n	80013aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e4:	223f      	movs	r2, #63	; 0x3f
 80013e6:	409a      	lsls	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d004      	beq.n	8001424 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e00c      	b.n	800143e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2205      	movs	r2, #5
 8001428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0201 	bic.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	e16b      	b.n	8001740 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001468:	2201      	movs	r2, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 815a 	bne.w	800173a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b01      	cmp	r3, #1
 8001490:	d005      	beq.n	800149e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149a:	2b02      	cmp	r3, #2
 800149c:	d130      	bne.n	8001500 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f003 0201 	and.w	r2, r3, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b03      	cmp	r3, #3
 800150a:	d017      	beq.n	800153c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d123      	bne.n	8001590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	69b9      	ldr	r1, [r7, #24]
 800158c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0203 	and.w	r2, r3, #3
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80b4 	beq.w	800173a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b60      	ldr	r3, [pc, #384]	; (8001758 <HAL_GPIO_Init+0x30c>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a5f      	ldr	r2, [pc, #380]	; (8001758 <HAL_GPIO_Init+0x30c>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b5d      	ldr	r3, [pc, #372]	; (8001758 <HAL_GPIO_Init+0x30c>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ee:	4a5b      	ldr	r2, [pc, #364]	; (800175c <HAL_GPIO_Init+0x310>)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a52      	ldr	r2, [pc, #328]	; (8001760 <HAL_GPIO_Init+0x314>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d02b      	beq.n	8001672 <HAL_GPIO_Init+0x226>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a51      	ldr	r2, [pc, #324]	; (8001764 <HAL_GPIO_Init+0x318>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d025      	beq.n	800166e <HAL_GPIO_Init+0x222>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a50      	ldr	r2, [pc, #320]	; (8001768 <HAL_GPIO_Init+0x31c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d01f      	beq.n	800166a <HAL_GPIO_Init+0x21e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4f      	ldr	r2, [pc, #316]	; (800176c <HAL_GPIO_Init+0x320>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d019      	beq.n	8001666 <HAL_GPIO_Init+0x21a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4e      	ldr	r2, [pc, #312]	; (8001770 <HAL_GPIO_Init+0x324>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0x216>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4d      	ldr	r2, [pc, #308]	; (8001774 <HAL_GPIO_Init+0x328>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x212>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4c      	ldr	r2, [pc, #304]	; (8001778 <HAL_GPIO_Init+0x32c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x20e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4b      	ldr	r2, [pc, #300]	; (800177c <HAL_GPIO_Init+0x330>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x20a>
 8001652:	2307      	movs	r3, #7
 8001654:	e00e      	b.n	8001674 <HAL_GPIO_Init+0x228>
 8001656:	2308      	movs	r3, #8
 8001658:	e00c      	b.n	8001674 <HAL_GPIO_Init+0x228>
 800165a:	2306      	movs	r3, #6
 800165c:	e00a      	b.n	8001674 <HAL_GPIO_Init+0x228>
 800165e:	2305      	movs	r3, #5
 8001660:	e008      	b.n	8001674 <HAL_GPIO_Init+0x228>
 8001662:	2304      	movs	r3, #4
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x228>
 8001666:	2303      	movs	r3, #3
 8001668:	e004      	b.n	8001674 <HAL_GPIO_Init+0x228>
 800166a:	2302      	movs	r3, #2
 800166c:	e002      	b.n	8001674 <HAL_GPIO_Init+0x228>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_GPIO_Init+0x228>
 8001672:	2300      	movs	r3, #0
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	f002 0203 	and.w	r2, r2, #3
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	4093      	lsls	r3, r2
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001684:	4935      	ldr	r1, [pc, #212]	; (800175c <HAL_GPIO_Init+0x310>)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001692:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <HAL_GPIO_Init+0x334>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b6:	4a32      	ldr	r2, [pc, #200]	; (8001780 <HAL_GPIO_Init+0x334>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016bc:	4b30      	ldr	r3, [pc, #192]	; (8001780 <HAL_GPIO_Init+0x334>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e0:	4a27      	ldr	r2, [pc, #156]	; (8001780 <HAL_GPIO_Init+0x334>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <HAL_GPIO_Init+0x334>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_GPIO_Init+0x334>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_GPIO_Init+0x334>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001734:	4a12      	ldr	r2, [pc, #72]	; (8001780 <HAL_GPIO_Init+0x334>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3301      	adds	r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2b0f      	cmp	r3, #15
 8001744:	f67f ae90 	bls.w	8001468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40013800 	.word	0x40013800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400
 8001768:	40020800 	.word	0x40020800
 800176c:	40020c00 	.word	0x40020c00
 8001770:	40021000 	.word	0x40021000
 8001774:	40021400 	.word	0x40021400
 8001778:	40021800 	.word	0x40021800
 800177c:	40021c00 	.word	0x40021c00
 8001780:	40013c00 	.word	0x40013c00

08001784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	e001      	b.n	80017a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
 80017c0:	4613      	mov	r3, r2
 80017c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017d0:	e003      	b.n	80017da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017d2:	887b      	ldrh	r3, [r7, #2]
 80017d4:	041a      	lsls	r2, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	619a      	str	r2, [r3, #24]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	460b      	mov	r3, r1
 80017f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017f8:	887a      	ldrh	r2, [r7, #2]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4013      	ands	r3, r2
 80017fe:	041a      	lsls	r2, r3, #16
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	43d9      	mvns	r1, r3
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	400b      	ands	r3, r1
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	619a      	str	r2, [r3, #24]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001832:	4a05      	ldr	r2, [pc, #20]	; (8001848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f806 	bl	800184c <HAL_GPIO_EXTI_Callback>
  }
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40013c00 	.word	0x40013c00

0800184c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001864:	b08f      	sub	sp, #60	; 0x3c
 8001866:	af0a      	add	r7, sp, #40	; 0x28
 8001868:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e054      	b.n	800191e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f007 fa3a 	bl	8008d08 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2203      	movs	r2, #3
 8001898:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f004 fa66 	bl	8005d84 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	687e      	ldr	r6, [r7, #4]
 80018c0:	466d      	mov	r5, sp
 80018c2:	f106 0410 	add.w	r4, r6, #16
 80018c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80018d6:	1d33      	adds	r3, r6, #4
 80018d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018da:	6838      	ldr	r0, [r7, #0]
 80018dc:	f004 f9e0 	bl	8005ca0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2101      	movs	r1, #1
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 fa5d 	bl	8005da6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	687e      	ldr	r6, [r7, #4]
 80018f4:	466d      	mov	r5, sp
 80018f6:	f106 0410 	add.w	r4, r6, #16
 80018fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001902:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001906:	e885 0003 	stmia.w	r5, {r0, r1}
 800190a:	1d33      	adds	r3, r6, #4
 800190c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190e:	6838      	ldr	r0, [r7, #0]
 8001910:	f004 fbe6 	bl	80060e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001926 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001926:	b590      	push	{r4, r7, lr}
 8001928:	b089      	sub	sp, #36	; 0x24
 800192a:	af04      	add	r7, sp, #16
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	4608      	mov	r0, r1
 8001930:	4611      	mov	r1, r2
 8001932:	461a      	mov	r2, r3
 8001934:	4603      	mov	r3, r0
 8001936:	70fb      	strb	r3, [r7, #3]
 8001938:	460b      	mov	r3, r1
 800193a:	70bb      	strb	r3, [r7, #2]
 800193c:	4613      	mov	r3, r2
 800193e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_HCD_HC_Init+0x28>
 800194a:	2302      	movs	r3, #2
 800194c:	e076      	b.n	8001a3c <HAL_HCD_HC_Init+0x116>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	212c      	movs	r1, #44	; 0x2c
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	333d      	adds	r3, #61	; 0x3d
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	3338      	adds	r3, #56	; 0x38
 8001976:	787a      	ldrb	r2, [r7, #1]
 8001978:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3340      	adds	r3, #64	; 0x40
 8001988:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800198a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	3339      	adds	r3, #57	; 0x39
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	333f      	adds	r3, #63	; 0x3f
 80019ac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	78ba      	ldrb	r2, [r7, #2]
 80019b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ba:	b2d0      	uxtb	r0, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	333a      	adds	r3, #58	; 0x3a
 80019c8:	4602      	mov	r2, r0
 80019ca:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80019cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	da09      	bge.n	80019e8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	333b      	adds	r3, #59	; 0x3b
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e008      	b.n	80019fa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	333b      	adds	r3, #59	; 0x3b
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	333c      	adds	r3, #60	; 0x3c
 8001a08:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a0c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	787c      	ldrb	r4, [r7, #1]
 8001a14:	78ba      	ldrb	r2, [r7, #2]
 8001a16:	78f9      	ldrb	r1, [r7, #3]
 8001a18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	4623      	mov	r3, r4
 8001a2a:	f004 fcdf 	bl	80063ec <USB_HC_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd90      	pop	{r4, r7, pc}

08001a44 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_HCD_HC_Halt+0x1e>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e00f      	b.n	8001a82 <HAL_HCD_HC_Halt+0x3e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f004 ff2f 	bl	80068d6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	4608      	mov	r0, r1
 8001a96:	4611      	mov	r1, r2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	70fb      	strb	r3, [r7, #3]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	70bb      	strb	r3, [r7, #2]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	212c      	movs	r1, #44	; 0x2c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	333b      	adds	r3, #59	; 0x3b
 8001ab4:	78ba      	ldrb	r2, [r7, #2]
 8001ab6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	333f      	adds	r3, #63	; 0x3f
 8001ac6:	787a      	ldrb	r2, [r7, #1]
 8001ac8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001aca:	7c3b      	ldrb	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d112      	bne.n	8001af6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	212c      	movs	r1, #44	; 0x2c
 8001ad6:	fb01 f303 	mul.w	r3, r1, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	3342      	adds	r3, #66	; 0x42
 8001ade:	2203      	movs	r2, #3
 8001ae0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	333d      	adds	r3, #61	; 0x3d
 8001af0:	7f3a      	ldrb	r2, [r7, #28]
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e008      	b.n	8001b08 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3342      	adds	r3, #66	; 0x42
 8001b04:	2202      	movs	r2, #2
 8001b06:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	f200 80c6 	bhi.w	8001c9c <HAL_HCD_HC_SubmitRequest+0x210>
 8001b10:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001c89 	.word	0x08001c89
 8001b20:	08001b8d 	.word	0x08001b8d
 8001b24:	08001c0b 	.word	0x08001c0b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b28:	7c3b      	ldrb	r3, [r7, #16]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	f040 80b8 	bne.w	8001ca0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b30:	78bb      	ldrb	r3, [r7, #2]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f040 80b4 	bne.w	8001ca0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b38:	8b3b      	ldrh	r3, [r7, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d108      	bne.n	8001b50 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	212c      	movs	r1, #44	; 0x2c
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	3355      	adds	r3, #85	; 0x55
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3355      	adds	r3, #85	; 0x55
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d109      	bne.n	8001b78 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3342      	adds	r3, #66	; 0x42
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b76:	e093      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3342      	adds	r3, #66	; 0x42
 8001b86:	2202      	movs	r2, #2
 8001b88:	701a      	strb	r2, [r3, #0]
      break;
 8001b8a:	e089      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b8c:	78bb      	ldrb	r3, [r7, #2]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11d      	bne.n	8001bce <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	212c      	movs	r1, #44	; 0x2c
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3355      	adds	r3, #85	; 0x55
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3342      	adds	r3, #66	; 0x42
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bb8:	e073      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3342      	adds	r3, #66	; 0x42
 8001bc8:	2202      	movs	r2, #2
 8001bca:	701a      	strb	r2, [r3, #0]
      break;
 8001bcc:	e069      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3354      	adds	r3, #84	; 0x54
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	212c      	movs	r1, #44	; 0x2c
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	3342      	adds	r3, #66	; 0x42
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
      break;
 8001bf4:	e055      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3342      	adds	r3, #66	; 0x42
 8001c04:	2202      	movs	r2, #2
 8001c06:	701a      	strb	r2, [r3, #0]
      break;
 8001c08:	e04b      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c0a:	78bb      	ldrb	r3, [r7, #2]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d11d      	bne.n	8001c4c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	212c      	movs	r1, #44	; 0x2c
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3355      	adds	r3, #85	; 0x55
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	212c      	movs	r1, #44	; 0x2c
 8001c2a:	fb01 f303 	mul.w	r3, r1, r3
 8001c2e:	4413      	add	r3, r2
 8001c30:	3342      	adds	r3, #66	; 0x42
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c36:	e034      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	212c      	movs	r1, #44	; 0x2c
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	3342      	adds	r3, #66	; 0x42
 8001c46:	2202      	movs	r2, #2
 8001c48:	701a      	strb	r2, [r3, #0]
      break;
 8001c4a:	e02a      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	212c      	movs	r1, #44	; 0x2c
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	3354      	adds	r3, #84	; 0x54
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3342      	adds	r3, #66	; 0x42
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
      break;
 8001c72:	e016      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3342      	adds	r3, #66	; 0x42
 8001c82:	2202      	movs	r2, #2
 8001c84:	701a      	strb	r2, [r3, #0]
      break;
 8001c86:	e00c      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3342      	adds	r3, #66	; 0x42
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
      break;
 8001c9a:	e002      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c9c:	bf00      	nop
 8001c9e:	e000      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ca0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	212c      	movs	r1, #44	; 0x2c
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	3344      	adds	r3, #68	; 0x44
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	8b3a      	ldrh	r2, [r7, #24]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	202c      	movs	r0, #44	; 0x2c
 8001cbc:	fb00 f303 	mul.w	r3, r0, r3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	334c      	adds	r3, #76	; 0x4c
 8001cc4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3360      	adds	r3, #96	; 0x60
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3350      	adds	r3, #80	; 0x50
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	212c      	movs	r1, #44	; 0x2c
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3339      	adds	r3, #57	; 0x39
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	212c      	movs	r1, #44	; 0x2c
 8001d02:	fb01 f303 	mul.w	r3, r1, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	3361      	adds	r3, #97	; 0x61
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	222c      	movs	r2, #44	; 0x2c
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	3338      	adds	r3, #56	; 0x38
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	18d1      	adds	r1, r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	f004 fc82 	bl	8006630 <USB_HC_StartXfer>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop

08001d38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 f983 	bl	800605a <USB_GetMode>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	f040 80f6 	bne.w	8001f48 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f004 f967 	bl	8006034 <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80ec 	beq.w	8001f46 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 f95e 	bl	8006034 <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d82:	d104      	bne.n	8001d8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 f94e 	bl	8006034 <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001da2:	d104      	bne.n	8001dae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f004 f93e 	bl	8006034 <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dc2:	d104      	bne.n	8001dce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 f92e 	bl	8006034 <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d103      	bne.n	8001dea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2202      	movs	r2, #2
 8001de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 f920 	bl	8006034 <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dfe:	d11c      	bne.n	8001e3a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10f      	bne.n	8001e3a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e1a:	2110      	movs	r1, #16
 8001e1c:	6938      	ldr	r0, [r7, #16]
 8001e1e:	f004 f80f 	bl	8005e40 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e22:	6938      	ldr	r0, [r7, #16]
 8001e24:	f004 f840 	bl	8005ea8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 fa16 	bl	8006260 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f006 ffe5 	bl	8008e04 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 f8f8 	bl	8006034 <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4e:	d102      	bne.n	8001e56 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f001 f89e 	bl	8002f92 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 f8ea 	bl	8006034 <USB_ReadInterrupts>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d106      	bne.n	8001e78 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f006 ffae 	bl	8008dcc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2208      	movs	r2, #8
 8001e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f004 f8d9 	bl	8006034 <USB_ReadInterrupts>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b10      	cmp	r3, #16
 8001e8a:	d101      	bne.n	8001e90 <HAL_HCD_IRQHandler+0x158>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_HCD_IRQHandler+0x15a>
 8001e90:	2300      	movs	r3, #0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d012      	beq.n	8001ebc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0210 	bic.w	r2, r2, #16
 8001ea4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 ffa1 	bl	8002dee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0210 	orr.w	r2, r2, #16
 8001eba:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f004 f8b7 	bl	8006034 <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ed0:	d13a      	bne.n	8001f48 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 fcec 	bl	80068b4 <USB_HC_ReadInterrupt>
 8001edc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e025      	b.n	8001f30 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d018      	beq.n	8001f2a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0e:	d106      	bne.n	8001f1e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8ab 	bl	8002072 <HCD_HC_IN_IRQHandler>
 8001f1c:	e005      	b.n	8001f2a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4619      	mov	r1, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fbf9 	bl	800271c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d3d4      	bcc.n	8001ee4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f42:	615a      	str	r2, [r3, #20]
 8001f44:	e000      	b.n	8001f48 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f46:	bf00      	nop
    }
  }
}
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_HCD_Start+0x16>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e013      	b.n	8001f8c <HAL_HCD_Start+0x3e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 f9d8 	bl	8006328 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fef0 	bl	8005d62 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_HCD_Stop+0x16>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e00d      	b.n	8001fc6 <HAL_HCD_Stop+0x32>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f004 fdc6 	bl	8006b48 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f004 f97a 	bl	80062d4 <USB_ResetPort>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3360      	adds	r3, #96	; 0x60
 8002004:	781b      	ldrb	r3, [r3, #0]
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3350      	adds	r3, #80	; 0x50
 800202c:	681b      	ldr	r3, [r3, #0]
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f004 f9be 	bl	80063c8 <USB_GetCurrentFrame>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f004 f999 	bl	800639a <USB_GetHostSpeed>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d11a      	bne.n	80020d8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	461a      	mov	r2, r3
 80020b0:	2304      	movs	r3, #4
 80020b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3361      	adds	r3, #97	; 0x61
 80020c2:	2206      	movs	r2, #6
 80020c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f004 fc00 	bl	80068d6 <USB_HC_Halt>
 80020d6:	e0af      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ee:	d11b      	bne.n	8002128 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	461a      	mov	r2, r3
 80020fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002102:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3361      	adds	r3, #97	; 0x61
 8002112:	2207      	movs	r2, #7
 8002114:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f004 fbd8 	bl	80068d6 <USB_HC_Halt>
 8002126:	e087      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b20      	cmp	r3, #32
 800213c:	d109      	bne.n	8002152 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	2320      	movs	r3, #32
 800214e:	6093      	str	r3, [r2, #8]
 8002150:	e072      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b08      	cmp	r3, #8
 8002166:	d11a      	bne.n	800219e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	461a      	mov	r2, r3
 8002176:	2308      	movs	r3, #8
 8002178:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3361      	adds	r3, #97	; 0x61
 8002188:	2205      	movs	r2, #5
 800218a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f004 fb9d 	bl	80068d6 <USB_HC_Halt>
 800219c:	e04c      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b4:	d11b      	bne.n	80021ee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	461a      	mov	r2, r3
 80021c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	3361      	adds	r3, #97	; 0x61
 80021d8:	2208      	movs	r2, #8
 80021da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 fb75 	bl	80068d6 <USB_HC_Halt>
 80021ec:	e024      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d119      	bne.n	8002238 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	461a      	mov	r2, r3
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	3361      	adds	r3, #97	; 0x61
 8002224:	2206      	movs	r2, #6
 8002226:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f004 fb4f 	bl	80068d6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800224e:	d112      	bne.n	8002276 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f004 fb3b 	bl	80068d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226c:	461a      	mov	r2, r3
 800226e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002272:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002274:	e24e      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	f040 80df 	bne.w	800244c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d019      	beq.n	80022ca <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	3348      	adds	r3, #72	; 0x48
 80022a4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	0159      	lsls	r1, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	440b      	add	r3, r1
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022b8:	1ad2      	subs	r2, r2, r3
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	202c      	movs	r0, #44	; 0x2c
 80022c0:	fb00 f303 	mul.w	r3, r0, r3
 80022c4:	440b      	add	r3, r1
 80022c6:	3350      	adds	r3, #80	; 0x50
 80022c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	212c      	movs	r1, #44	; 0x2c
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	3361      	adds	r3, #97	; 0x61
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	212c      	movs	r1, #44	; 0x2c
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	335c      	adds	r3, #92	; 0x5c
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	461a      	mov	r2, r3
 80022fc:	2301      	movs	r3, #1
 80022fe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	333f      	adds	r3, #63	; 0x3f
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d009      	beq.n	8002328 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	333f      	adds	r3, #63	; 0x3f
 8002322:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002324:	2b02      	cmp	r3, #2
 8002326:	d111      	bne.n	800234c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f004 facf 	bl	80068d6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	2310      	movs	r3, #16
 8002348:	6093      	str	r3, [r2, #8]
 800234a:	e03a      	b.n	80023c2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	333f      	adds	r3, #63	; 0x3f
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d009      	beq.n	8002374 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	333f      	adds	r3, #63	; 0x3f
 800236e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002370:	2b01      	cmp	r3, #1
 8002372:	d126      	bne.n	80023c2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	0151      	lsls	r1, r2, #5
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	440a      	add	r2, r1
 800238a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800238e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002392:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3360      	adds	r3, #96	; 0x60
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	b2d9      	uxtb	r1, r3
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	202c      	movs	r0, #44	; 0x2c
 80023b0:	fb00 f303 	mul.w	r3, r0, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3360      	adds	r3, #96	; 0x60
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f006 fd2f 	bl	8008e20 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d12b      	bne.n	8002422 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3348      	adds	r3, #72	; 0x48
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	202c      	movs	r0, #44	; 0x2c
 80023e0:	fb00 f202 	mul.w	r2, r0, r2
 80023e4:	440a      	add	r2, r1
 80023e6:	3240      	adds	r2, #64	; 0x40
 80023e8:	8812      	ldrh	r2, [r2, #0]
 80023ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 818e 	beq.w	8002714 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	3354      	adds	r3, #84	; 0x54
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f083 0301 	eor.w	r3, r3, #1
 800240c:	b2d8      	uxtb	r0, r3
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3354      	adds	r3, #84	; 0x54
 800241c:	4602      	mov	r2, r0
 800241e:	701a      	strb	r2, [r3, #0]
}
 8002420:	e178      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	3354      	adds	r3, #84	; 0x54
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f083 0301 	eor.w	r3, r3, #1
 8002436:	b2d8      	uxtb	r0, r3
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3354      	adds	r3, #84	; 0x54
 8002446:	4602      	mov	r2, r0
 8002448:	701a      	strb	r2, [r3, #0]
}
 800244a:	e163      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b02      	cmp	r3, #2
 8002460:	f040 80f6 	bne.w	8002650 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3361      	adds	r3, #97	; 0x61
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d109      	bne.n	800248c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3360      	adds	r3, #96	; 0x60
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e0c9      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3361      	adds	r3, #97	; 0x61
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d109      	bne.n	80024b4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	3360      	adds	r3, #96	; 0x60
 80024ae:	2205      	movs	r2, #5
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e0b5      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3361      	adds	r3, #97	; 0x61
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b06      	cmp	r3, #6
 80024c6:	d009      	beq.n	80024dc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3361      	adds	r3, #97	; 0x61
 80024d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d150      	bne.n	800257e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	335c      	adds	r3, #92	; 0x5c
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	202c      	movs	r0, #44	; 0x2c
 80024f4:	fb00 f303 	mul.w	r3, r0, r3
 80024f8:	440b      	add	r3, r1
 80024fa:	335c      	adds	r3, #92	; 0x5c
 80024fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	335c      	adds	r3, #92	; 0x5c
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d912      	bls.n	8002538 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	335c      	adds	r3, #92	; 0x5c
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3360      	adds	r3, #96	; 0x60
 8002532:	2204      	movs	r2, #4
 8002534:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002536:	e073      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3360      	adds	r3, #96	; 0x60
 8002546:	2202      	movs	r2, #2
 8002548:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002560:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002568:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	461a      	mov	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800257c:	e050      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	3361      	adds	r3, #97	; 0x61
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d122      	bne.n	80025d8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	3360      	adds	r3, #96	; 0x60
 80025a0:	2202      	movs	r2, #2
 80025a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	461a      	mov	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e023      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	212c      	movs	r1, #44	; 0x2c
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	3361      	adds	r3, #97	; 0x61
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b07      	cmp	r3, #7
 80025ea:	d119      	bne.n	8002620 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	335c      	adds	r3, #92	; 0x5c
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	202c      	movs	r0, #44	; 0x2c
 8002604:	fb00 f303 	mul.w	r3, r0, r3
 8002608:	440b      	add	r3, r1
 800260a:	335c      	adds	r3, #92	; 0x5c
 800260c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3360      	adds	r3, #96	; 0x60
 800261c:	2204      	movs	r2, #4
 800261e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	461a      	mov	r2, r3
 800262e:	2302      	movs	r3, #2
 8002630:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	b2d9      	uxtb	r1, r3
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	202c      	movs	r0, #44	; 0x2c
 800263c:	fb00 f303 	mul.w	r3, r0, r3
 8002640:	4413      	add	r3, r2
 8002642:	3360      	adds	r3, #96	; 0x60
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f006 fbe9 	bl	8008e20 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800264e:	e061      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b10      	cmp	r3, #16
 8002664:	d156      	bne.n	8002714 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	333f      	adds	r3, #63	; 0x3f
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d111      	bne.n	800269e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	335c      	adds	r3, #92	; 0x5c
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f004 f91d 	bl	80068d6 <USB_HC_Halt>
 800269c:	e031      	b.n	8002702 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	333f      	adds	r3, #63	; 0x3f
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	333f      	adds	r3, #63	; 0x3f
 80026c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d11d      	bne.n	8002702 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	335c      	adds	r3, #92	; 0x5c
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d110      	bne.n	8002702 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	3361      	adds	r3, #97	; 0x61
 80026ee:	2203      	movs	r2, #3
 80026f0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 f8ea 	bl	80068d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	461a      	mov	r2, r3
 8002710:	2310      	movs	r3, #16
 8002712:	6093      	str	r3, [r2, #8]
}
 8002714:	bf00      	nop
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b04      	cmp	r3, #4
 800274a:	d11a      	bne.n	8002782 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	461a      	mov	r2, r3
 800275a:	2304      	movs	r3, #4
 800275c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3361      	adds	r3, #97	; 0x61
 800276c:	2206      	movs	r2, #6
 800276e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f004 f8ab 	bl	80068d6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002780:	e331      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b20      	cmp	r3, #32
 8002796:	d12e      	bne.n	80027f6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	461a      	mov	r2, r3
 80027a6:	2320      	movs	r3, #32
 80027a8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	333d      	adds	r3, #61	; 0x3d
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	f040 8313 	bne.w	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	333d      	adds	r3, #61	; 0x3d
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3360      	adds	r3, #96	; 0x60
 80027e0:	2202      	movs	r2, #2
 80027e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f004 f871 	bl	80068d6 <USB_HC_Halt>
}
 80027f4:	e2f7      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800280c:	d112      	bne.n	8002834 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	461a      	mov	r2, r3
 800281c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002820:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f004 f852 	bl	80068d6 <USB_HC_Halt>
}
 8002832:	e2d8      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b01      	cmp	r3, #1
 8002848:	d140      	bne.n	80028cc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	335c      	adds	r3, #92	; 0x5c
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	d111      	bne.n	8002896 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	333d      	adds	r3, #61	; 0x3d
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	461a      	mov	r2, r3
 8002892:	2340      	movs	r3, #64	; 0x40
 8002894:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	461a      	mov	r2, r3
 80028a4:	2301      	movs	r3, #1
 80028a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3361      	adds	r3, #97	; 0x61
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 f806 	bl	80068d6 <USB_HC_Halt>
}
 80028ca:	e28c      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b40      	cmp	r3, #64	; 0x40
 80028e0:	d12c      	bne.n	800293c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	3361      	adds	r3, #97	; 0x61
 80028f0:	2204      	movs	r2, #4
 80028f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	333d      	adds	r3, #61	; 0x3d
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	212c      	movs	r1, #44	; 0x2c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	335c      	adds	r3, #92	; 0x5c
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f003 ffd7 	bl	80068d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002934:	461a      	mov	r2, r3
 8002936:	2340      	movs	r3, #64	; 0x40
 8002938:	6093      	str	r3, [r2, #8]
}
 800293a:	e254      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b08      	cmp	r3, #8
 8002950:	d11a      	bne.n	8002988 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	461a      	mov	r2, r3
 8002960:	2308      	movs	r3, #8
 8002962:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3361      	adds	r3, #97	; 0x61
 8002972:	2205      	movs	r2, #5
 8002974:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f003 ffa8 	bl	80068d6 <USB_HC_Halt>
}
 8002986:	e22e      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b10      	cmp	r3, #16
 800299c:	d140      	bne.n	8002a20 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3361      	adds	r3, #97	; 0x61
 80029be:	2203      	movs	r2, #3
 80029c0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	333d      	adds	r3, #61	; 0x3d
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d112      	bne.n	80029fc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	333c      	adds	r3, #60	; 0x3c
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d108      	bne.n	80029fc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	333d      	adds	r3, #61	; 0x3d
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 ff65 	bl	80068d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2310      	movs	r3, #16
 8002a1c:	6093      	str	r3, [r2, #8]
}
 8002a1e:	e1e2      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	2b80      	cmp	r3, #128	; 0x80
 8002a34:	d164      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d111      	bne.n	8002a62 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3361      	adds	r3, #97	; 0x61
 8002a4c:	2206      	movs	r2, #6
 8002a4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 ff3b 	bl	80068d6 <USB_HC_Halt>
 8002a60:	e044      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	335c      	adds	r3, #92	; 0x5c
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	202c      	movs	r0, #44	; 0x2c
 8002a7a:	fb00 f303 	mul.w	r3, r0, r3
 8002a7e:	440b      	add	r3, r1
 8002a80:	335c      	adds	r3, #92	; 0x5c
 8002a82:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	335c      	adds	r3, #92	; 0x5c
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d920      	bls.n	8002ada <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	335c      	adds	r3, #92	; 0x5c
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3360      	adds	r3, #96	; 0x60
 8002ab8:	2204      	movs	r2, #4
 8002aba:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	b2d9      	uxtb	r1, r3
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	202c      	movs	r0, #44	; 0x2c
 8002ac6:	fb00 f303 	mul.w	r3, r0, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3360      	adds	r3, #96	; 0x60
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f006 f9a4 	bl	8008e20 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ad8:	e008      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3360      	adds	r3, #96	; 0x60
 8002ae8:	2202      	movs	r2, #2
 8002aea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	6093      	str	r3, [r2, #8]
}
 8002afe:	e172      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b16:	d11b      	bne.n	8002b50 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3361      	adds	r3, #97	; 0x61
 8002b26:	2208      	movs	r2, #8
 8002b28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 fece 	bl	80068d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	461a      	mov	r2, r3
 8002b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4c:	6093      	str	r3, [r2, #8]
}
 8002b4e:	e14a      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	f040 813f 	bne.w	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3361      	adds	r3, #97	; 0x61
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d17d      	bne.n	8002c78 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3360      	adds	r3, #96	; 0x60
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	333f      	adds	r3, #63	; 0x3f
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d00a      	beq.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	333f      	adds	r3, #63	; 0x3f
 8002bb0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	f040 8100 	bne.w	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d113      	bne.n	8002be8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3355      	adds	r3, #85	; 0x55
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	f083 0301 	eor.w	r3, r3, #1
 8002bd4:	b2d8      	uxtb	r0, r3
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3355      	adds	r3, #85	; 0x55
 8002be4:	4602      	mov	r2, r0
 8002be6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f040 80e3 	bne.w	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	334c      	adds	r3, #76	; 0x4c
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80d8 	beq.w	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	334c      	adds	r3, #76	; 0x4c
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	202c      	movs	r0, #44	; 0x2c
 8002c1e:	fb00 f202 	mul.w	r2, r0, r2
 8002c22:	440a      	add	r2, r1
 8002c24:	3240      	adds	r2, #64	; 0x40
 8002c26:	8812      	ldrh	r2, [r2, #0]
 8002c28:	4413      	add	r3, r2
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	202c      	movs	r0, #44	; 0x2c
 8002c32:	fb00 f202 	mul.w	r2, r0, r2
 8002c36:	440a      	add	r2, r1
 8002c38:	3240      	adds	r2, #64	; 0x40
 8002c3a:	8812      	ldrh	r2, [r2, #0]
 8002c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80b5 	beq.w	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3355      	adds	r3, #85	; 0x55
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	f083 0301 	eor.w	r3, r3, #1
 8002c62:	b2d8      	uxtb	r0, r3
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3355      	adds	r3, #85	; 0x55
 8002c72:	4602      	mov	r2, r0
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e09f      	b.n	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3361      	adds	r3, #97	; 0x61
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d109      	bne.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3360      	adds	r3, #96	; 0x60
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e08b      	b.n	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	3361      	adds	r3, #97	; 0x61
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d109      	bne.n	8002cc8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3360      	adds	r3, #96	; 0x60
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e077      	b.n	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3361      	adds	r3, #97	; 0x61
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d109      	bne.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3360      	adds	r3, #96	; 0x60
 8002cea:	2205      	movs	r2, #5
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e063      	b.n	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3361      	adds	r3, #97	; 0x61
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b06      	cmp	r3, #6
 8002d02:	d009      	beq.n	8002d18 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3361      	adds	r3, #97	; 0x61
 8002d12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d14f      	bne.n	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	335c      	adds	r3, #92	; 0x5c
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	202c      	movs	r0, #44	; 0x2c
 8002d30:	fb00 f303 	mul.w	r3, r0, r3
 8002d34:	440b      	add	r3, r1
 8002d36:	335c      	adds	r3, #92	; 0x5c
 8002d38:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	335c      	adds	r3, #92	; 0x5c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d912      	bls.n	8002d74 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	335c      	adds	r3, #92	; 0x5c
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3360      	adds	r3, #96	; 0x60
 8002d6e:	2204      	movs	r2, #4
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e021      	b.n	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3360      	adds	r3, #96	; 0x60
 8002d82:	2202      	movs	r2, #2
 8002d84:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d9c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002da4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	461a      	mov	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	b2d9      	uxtb	r1, r3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	202c      	movs	r0, #44	; 0x2c
 8002dd4:	fb00 f303 	mul.w	r3, r0, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3360      	adds	r3, #96	; 0x60
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f006 f81d 	bl	8008e20 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002de6:	bf00      	nop
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b08a      	sub	sp, #40	; 0x28
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	0c5b      	lsrs	r3, r3, #17
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e22:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d004      	beq.n	8002e34 <HCD_RXQLVL_IRQHandler+0x46>
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	f000 80a9 	beq.w	8002f84 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e32:	e0aa      	b.n	8002f8a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80a6 	beq.w	8002f88 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	3344      	adds	r3, #68	; 0x44
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 809b 	beq.w	8002f88 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3350      	adds	r3, #80	; 0x50
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	441a      	add	r2, r3
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	202c      	movs	r0, #44	; 0x2c
 8002e6c:	fb00 f303 	mul.w	r3, r0, r3
 8002e70:	440b      	add	r3, r1
 8002e72:	334c      	adds	r3, #76	; 0x4c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d87a      	bhi.n	8002f70 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3344      	adds	r3, #68	; 0x44
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	b292      	uxth	r2, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	f003 f876 	bl	8005f84 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3344      	adds	r3, #68	; 0x44
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	441a      	add	r2, r3
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	202c      	movs	r0, #44	; 0x2c
 8002eb2:	fb00 f303 	mul.w	r3, r0, r3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3344      	adds	r3, #68	; 0x44
 8002eba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	212c      	movs	r1, #44	; 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3350      	adds	r3, #80	; 0x50
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	441a      	add	r2, r3
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	202c      	movs	r0, #44	; 0x2c
 8002ed6:	fb00 f303 	mul.w	r3, r0, r3
 8002eda:	440b      	add	r3, r1
 8002edc:	3350      	adds	r3, #80	; 0x50
 8002ede:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	0cdb      	lsrs	r3, r3, #19
 8002ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	3340      	adds	r3, #64	; 0x40
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d13c      	bne.n	8002f88 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d039      	beq.n	8002f88 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f2a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f32:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	461a      	mov	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3354      	adds	r3, #84	; 0x54
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2d8      	uxtb	r0, r3
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3354      	adds	r3, #84	; 0x54
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	701a      	strb	r2, [r3, #0]
      break;
 8002f6e:	e00b      	b.n	8002f88 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	212c      	movs	r1, #44	; 0x2c
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3360      	adds	r3, #96	; 0x60
 8002f7e:	2204      	movs	r2, #4
 8002f80:	701a      	strb	r2, [r3, #0]
      break;
 8002f82:	e001      	b.n	8002f88 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f84:	bf00      	nop
 8002f86:	e000      	b.n	8002f8a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f88:	bf00      	nop
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	3728      	adds	r7, #40	; 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fbe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d10b      	bne.n	8002fe2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f005 ff07 	bl	8008de8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d132      	bne.n	8003052 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f043 0308 	orr.w	r3, r3, #8
 8002ff2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d126      	bne.n	800304c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d113      	bne.n	800302e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800300c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003010:	d106      	bne.n	8003020 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2102      	movs	r1, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f003 f921 	bl	8006260 <USB_InitFSLSPClkSel>
 800301e:	e011      	b.n	8003044 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f003 f91a 	bl	8006260 <USB_InitFSLSPClkSel>
 800302c:	e00a      	b.n	8003044 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d106      	bne.n	8003044 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800303c:	461a      	mov	r2, r3
 800303e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003042:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f005 fef9 	bl	8008e3c <HAL_HCD_PortEnabled_Callback>
 800304a:	e002      	b.n	8003052 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f005 ff03 	bl	8008e58 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d103      	bne.n	8003064 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f043 0320 	orr.w	r3, r3, #32
 8003062:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800306a:	461a      	mov	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6013      	str	r3, [r2, #0]
}
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e12b      	b.n	80032e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fd30 	bl	8000b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2224      	movs	r2, #36	; 0x24
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030dc:	f001 fa20 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 80030e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4a81      	ldr	r2, [pc, #516]	; (80032ec <HAL_I2C_Init+0x274>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d807      	bhi.n	80030fc <HAL_I2C_Init+0x84>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a80      	ldr	r2, [pc, #512]	; (80032f0 <HAL_I2C_Init+0x278>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bf94      	ite	ls
 80030f4:	2301      	movls	r3, #1
 80030f6:	2300      	movhi	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e006      	b.n	800310a <HAL_I2C_Init+0x92>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4a7d      	ldr	r2, [pc, #500]	; (80032f4 <HAL_I2C_Init+0x27c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	bf94      	ite	ls
 8003104:	2301      	movls	r3, #1
 8003106:	2300      	movhi	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0e7      	b.n	80032e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4a78      	ldr	r2, [pc, #480]	; (80032f8 <HAL_I2C_Init+0x280>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	0c9b      	lsrs	r3, r3, #18
 800311c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a6a      	ldr	r2, [pc, #424]	; (80032ec <HAL_I2C_Init+0x274>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d802      	bhi.n	800314c <HAL_I2C_Init+0xd4>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	3301      	adds	r3, #1
 800314a:	e009      	b.n	8003160 <HAL_I2C_Init+0xe8>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	4a69      	ldr	r2, [pc, #420]	; (80032fc <HAL_I2C_Init+0x284>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	3301      	adds	r3, #1
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	430b      	orrs	r3, r1
 8003166:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003172:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	495c      	ldr	r1, [pc, #368]	; (80032ec <HAL_I2C_Init+0x274>)
 800317c:	428b      	cmp	r3, r1
 800317e:	d819      	bhi.n	80031b4 <HAL_I2C_Init+0x13c>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1e59      	subs	r1, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fbb1 f3f3 	udiv	r3, r1, r3
 800318e:	1c59      	adds	r1, r3, #1
 8003190:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003194:	400b      	ands	r3, r1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_I2C_Init+0x138>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e59      	subs	r1, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ae:	e051      	b.n	8003254 <HAL_I2C_Init+0x1dc>
 80031b0:	2304      	movs	r3, #4
 80031b2:	e04f      	b.n	8003254 <HAL_I2C_Init+0x1dc>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d111      	bne.n	80031e0 <HAL_I2C_Init+0x168>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1e58      	subs	r0, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	440b      	add	r3, r1
 80031ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	e012      	b.n	8003206 <HAL_I2C_Init+0x18e>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1e58      	subs	r0, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	0099      	lsls	r1, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_Init+0x196>
 800320a:	2301      	movs	r3, #1
 800320c:	e022      	b.n	8003254 <HAL_I2C_Init+0x1dc>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10e      	bne.n	8003234 <HAL_I2C_Init+0x1bc>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1e58      	subs	r0, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6859      	ldr	r1, [r3, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	440b      	add	r3, r1
 8003224:	fbb0 f3f3 	udiv	r3, r0, r3
 8003228:	3301      	adds	r3, #1
 800322a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003232:	e00f      	b.n	8003254 <HAL_I2C_Init+0x1dc>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e58      	subs	r0, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	0099      	lsls	r1, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	6809      	ldr	r1, [r1, #0]
 8003258:	4313      	orrs	r3, r2
 800325a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6911      	ldr	r1, [r2, #16]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68d2      	ldr	r2, [r2, #12]
 800328e:	4311      	orrs	r1, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	430b      	orrs	r3, r1
 8003296:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	000186a0 	.word	0x000186a0
 80032f0:	001e847f 	.word	0x001e847f
 80032f4:	003d08ff 	.word	0x003d08ff
 80032f8:	431bde83 	.word	0x431bde83
 80032fc:	10624dd3 	.word	0x10624dd3

08003300 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e128      	b.n	8003564 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a90      	ldr	r2, [pc, #576]	; (800356c <HAL_I2S_Init+0x26c>)
 800332a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fd fc31 	bl	8000b94 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003348:	f023 030f 	bic.w	r3, r3, #15
 800334c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2202      	movs	r2, #2
 8003354:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d060      	beq.n	8003420 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003366:	2310      	movs	r3, #16
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e001      	b.n	8003370 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b20      	cmp	r3, #32
 8003376:	d802      	bhi.n	800337e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800337e:	2001      	movs	r0, #1
 8003380:	f001 f9d8 	bl	8004734 <HAL_RCCEx_GetPeriphCLKFreq>
 8003384:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338e:	d125      	bne.n	80033dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	461a      	mov	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	3305      	adds	r3, #5
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	e01f      	b.n	80033fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	461a      	mov	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d6:	3305      	adds	r3, #5
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	e00e      	b.n	80033fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	461a      	mov	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	3305      	adds	r3, #5
 80033f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4a5c      	ldr	r2, [pc, #368]	; (8003570 <HAL_I2S_Init+0x270>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	08db      	lsrs	r3, r3, #3
 8003404:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	e003      	b.n	8003428 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003420:	2302      	movs	r3, #2
 8003422:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d902      	bls.n	8003434 <HAL_I2S_Init+0x134>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	2bff      	cmp	r3, #255	; 0xff
 8003432:	d907      	bls.n	8003444 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	f043 0210 	orr.w	r2, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e08f      	b.n	8003564 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	ea42 0103 	orr.w	r1, r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	430a      	orrs	r2, r1
 8003456:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003462:	f023 030f 	bic.w	r3, r3, #15
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6851      	ldr	r1, [r2, #4]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6892      	ldr	r2, [r2, #8]
 800346e:	4311      	orrs	r1, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68d2      	ldr	r2, [r2, #12]
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6992      	ldr	r2, [r2, #24]
 800347a:	430a      	orrs	r2, r1
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003486:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d161      	bne.n	8003554 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a38      	ldr	r2, [pc, #224]	; (8003574 <HAL_I2S_Init+0x274>)
 8003494:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a37      	ldr	r2, [pc, #220]	; (8003578 <HAL_I2S_Init+0x278>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_I2S_Init+0x1a4>
 80034a0:	4b36      	ldr	r3, [pc, #216]	; (800357c <HAL_I2S_Init+0x27c>)
 80034a2:	e001      	b.n	80034a8 <HAL_I2S_Init+0x1a8>
 80034a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	4932      	ldr	r1, [pc, #200]	; (8003578 <HAL_I2S_Init+0x278>)
 80034b0:	428a      	cmp	r2, r1
 80034b2:	d101      	bne.n	80034b8 <HAL_I2S_Init+0x1b8>
 80034b4:	4a31      	ldr	r2, [pc, #196]	; (800357c <HAL_I2S_Init+0x27c>)
 80034b6:	e001      	b.n	80034bc <HAL_I2S_Init+0x1bc>
 80034b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80034bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034c0:	f023 030f 	bic.w	r3, r3, #15
 80034c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2b      	ldr	r2, [pc, #172]	; (8003578 <HAL_I2S_Init+0x278>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_I2S_Init+0x1d4>
 80034d0:	4b2a      	ldr	r3, [pc, #168]	; (800357c <HAL_I2S_Init+0x27c>)
 80034d2:	e001      	b.n	80034d8 <HAL_I2S_Init+0x1d8>
 80034d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d8:	2202      	movs	r2, #2
 80034da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a25      	ldr	r2, [pc, #148]	; (8003578 <HAL_I2S_Init+0x278>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_I2S_Init+0x1ea>
 80034e6:	4b25      	ldr	r3, [pc, #148]	; (800357c <HAL_I2S_Init+0x27c>)
 80034e8:	e001      	b.n	80034ee <HAL_I2S_Init+0x1ee>
 80034ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fa:	d003      	beq.n	8003504 <HAL_I2S_Init+0x204>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	e001      	b.n	8003510 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800351a:	4313      	orrs	r3, r2
 800351c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003524:	4313      	orrs	r3, r2
 8003526:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800352e:	4313      	orrs	r3, r2
 8003530:	b29a      	uxth	r2, r3
 8003532:	897b      	ldrh	r3, [r7, #10]
 8003534:	4313      	orrs	r3, r2
 8003536:	b29b      	uxth	r3, r3
 8003538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800353c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a0d      	ldr	r2, [pc, #52]	; (8003578 <HAL_I2S_Init+0x278>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_I2S_Init+0x24c>
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_I2S_Init+0x27c>)
 800354a:	e001      	b.n	8003550 <HAL_I2S_Init+0x250>
 800354c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003550:	897a      	ldrh	r2, [r7, #10]
 8003552:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	08003677 	.word	0x08003677
 8003570:	cccccccd 	.word	0xcccccccd
 8003574:	0800378d 	.word	0x0800378d
 8003578:	40003800 	.word	0x40003800
 800357c:	40003400 	.word	0x40003400

08003580 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	881a      	ldrh	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	1c9a      	adds	r2, r3, #2
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10e      	bne.n	8003610 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003600:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ffb8 	bl	8003580 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	b292      	uxth	r2, r2
 800362c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	1c9a      	adds	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10e      	bne.n	800366e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800365e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff93 	bl	8003594 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b04      	cmp	r3, #4
 8003690:	d13a      	bne.n	8003708 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d109      	bne.n	80036b0 <I2S_IRQHandler+0x3a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d102      	bne.n	80036b0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ffb4 	bl	8003618 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d126      	bne.n	8003708 <I2S_IRQHandler+0x92>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d11f      	bne.n	8003708 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f043 0202 	orr.w	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ff50 	bl	80035a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b03      	cmp	r3, #3
 8003712:	d136      	bne.n	8003782 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d109      	bne.n	8003732 <I2S_IRQHandler+0xbc>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d102      	bne.n	8003732 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff45 	bl	80035bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b08      	cmp	r3, #8
 800373a:	d122      	bne.n	8003782 <I2S_IRQHandler+0x10c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b20      	cmp	r3, #32
 8003748:	d11b      	bne.n	8003782 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003758:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff13 	bl	80035a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003782:	bf00      	nop
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a92      	ldr	r2, [pc, #584]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d101      	bne.n	80037aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037a6:	4b92      	ldr	r3, [pc, #584]	; (80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037a8:	e001      	b.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a8b      	ldr	r2, [pc, #556]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80037c4:	4b8a      	ldr	r3, [pc, #552]	; (80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037c6:	e001      	b.n	80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d004      	beq.n	80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f040 8099 	bne.w	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d107      	bne.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f925 	bl	8003a48 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f9c8 	bl	8003ba8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d13a      	bne.n	8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d035      	beq.n	8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a6e      	ldr	r2, [pc, #440]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003836:	4b6e      	ldr	r3, [pc, #440]	; (80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003838:	e001      	b.n	800383e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800383a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4969      	ldr	r1, [pc, #420]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003846:	428b      	cmp	r3, r1
 8003848:	d101      	bne.n	800384e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800384a:	4b69      	ldr	r3, [pc, #420]	; (80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800384c:	e001      	b.n	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800384e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003852:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003856:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003866:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f043 0202 	orr.w	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff fe88 	bl	80035a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b08      	cmp	r3, #8
 80038a0:	f040 80c3 	bne.w	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80bd 	beq.w	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a49      	ldr	r2, [pc, #292]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038ca:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038cc:	e001      	b.n	80038d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80038ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4944      	ldr	r1, [pc, #272]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038da:	428b      	cmp	r3, r1
 80038dc:	d101      	bne.n	80038e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80038de:	4b44      	ldr	r3, [pc, #272]	; (80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038e0:	e001      	b.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80038e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038ec:	2300      	movs	r3, #0
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f043 0204 	orr.w	r2, r3, #4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fe4a 	bl	80035a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003914:	e089      	b.n	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b02      	cmp	r3, #2
 800391e:	d107      	bne.n	8003930 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8be 	bl	8003aac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8fd 	bl	8003b44 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d12f      	bne.n	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d02a      	beq.n	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800396c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800397a:	e001      	b.n	8003980 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800397c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4919      	ldr	r1, [pc, #100]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003988:	428b      	cmp	r3, r1
 800398a:	d101      	bne.n	8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800398e:	e001      	b.n	8003994 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003994:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003998:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f043 0202 	orr.w	r2, r3, #2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff fdfa 	bl	80035a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d136      	bne.n	8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d031      	beq.n	8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a07      	ldr	r2, [pc, #28]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d101      	bne.n	80039d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039d4:	e001      	b.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80039d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4902      	ldr	r1, [pc, #8]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039e2:	428b      	cmp	r3, r1
 80039e4:	d106      	bne.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80039e6:	4b02      	ldr	r3, [pc, #8]	; (80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039e8:	e006      	b.n	80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80039ea:	bf00      	nop
 80039ec:	40003800 	.word	0x40003800
 80039f0:	40003400 	.word	0x40003400
 80039f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039fc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a0c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0204 	orr.w	r2, r3, #4
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fdc0 	bl	80035a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a28:	e000      	b.n	8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a2a:	bf00      	nop
}
 8003a2c:	bf00      	nop
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	1c99      	adds	r1, r3, #2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6251      	str	r1, [r2, #36]	; 0x24
 8003a5a:	881a      	ldrh	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d113      	bne.n	8003aa2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ffc9 	bl	8003a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	1c99      	adds	r1, r3, #2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6251      	str	r1, [r2, #36]	; 0x24
 8003abe:	8819      	ldrh	r1, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1d      	ldr	r2, [pc, #116]	; (8003b3c <I2SEx_TxISR_I2SExt+0x90>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d101      	bne.n	8003ace <I2SEx_TxISR_I2SExt+0x22>
 8003aca:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <I2SEx_TxISR_I2SExt+0x94>)
 8003acc:	e001      	b.n	8003ad2 <I2SEx_TxISR_I2SExt+0x26>
 8003ace:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad2:	460a      	mov	r2, r1
 8003ad4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d121      	bne.n	8003b32 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <I2SEx_TxISR_I2SExt+0x90>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <I2SEx_TxISR_I2SExt+0x50>
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <I2SEx_TxISR_I2SExt+0x94>)
 8003afa:	e001      	b.n	8003b00 <I2SEx_TxISR_I2SExt+0x54>
 8003afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	490d      	ldr	r1, [pc, #52]	; (8003b3c <I2SEx_TxISR_I2SExt+0x90>)
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	d101      	bne.n	8003b10 <I2SEx_TxISR_I2SExt+0x64>
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <I2SEx_TxISR_I2SExt+0x94>)
 8003b0e:	e001      	b.n	8003b14 <I2SEx_TxISR_I2SExt+0x68>
 8003b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff81 	bl	8003a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40003800 	.word	0x40003800
 8003b40:	40003400 	.word	0x40003400

08003b44 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68d8      	ldr	r0, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	1c99      	adds	r1, r3, #2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b5c:	b282      	uxth	r2, r0
 8003b5e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d113      	bne.n	8003ba0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b86:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff ff4a 	bl	8003a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a20      	ldr	r2, [pc, #128]	; (8003c38 <I2SEx_RxISR_I2SExt+0x90>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <I2SEx_RxISR_I2SExt+0x16>
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <I2SEx_RxISR_I2SExt+0x94>)
 8003bbc:	e001      	b.n	8003bc2 <I2SEx_RxISR_I2SExt+0x1a>
 8003bbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc2:	68d8      	ldr	r0, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	1c99      	adds	r1, r3, #2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bce:	b282      	uxth	r2, r0
 8003bd0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d121      	bne.n	8003c2e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a12      	ldr	r2, [pc, #72]	; (8003c38 <I2SEx_RxISR_I2SExt+0x90>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <I2SEx_RxISR_I2SExt+0x50>
 8003bf4:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <I2SEx_RxISR_I2SExt+0x94>)
 8003bf6:	e001      	b.n	8003bfc <I2SEx_RxISR_I2SExt+0x54>
 8003bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	490d      	ldr	r1, [pc, #52]	; (8003c38 <I2SEx_RxISR_I2SExt+0x90>)
 8003c04:	428b      	cmp	r3, r1
 8003c06:	d101      	bne.n	8003c0c <I2SEx_RxISR_I2SExt+0x64>
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <I2SEx_RxISR_I2SExt+0x94>)
 8003c0a:	e001      	b.n	8003c10 <I2SEx_RxISR_I2SExt+0x68>
 8003c0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c14:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff ff03 	bl	8003a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40003800 	.word	0x40003800
 8003c3c:	40003400 	.word	0x40003400

08003c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e267      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d075      	beq.n	8003d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c5e:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d00c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6a:	4b85      	ldr	r3, [pc, #532]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d112      	bne.n	8003c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c76:	4b82      	ldr	r3, [pc, #520]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	4b7e      	ldr	r3, [pc, #504]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d05b      	beq.n	8003d48 <HAL_RCC_OscConfig+0x108>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d157      	bne.n	8003d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e242      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca4:	d106      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x74>
 8003ca6:	4b76      	ldr	r3, [pc, #472]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a75      	ldr	r2, [pc, #468]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e01d      	b.n	8003cf0 <HAL_RCC_OscConfig+0xb0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x98>
 8003cbe:	4b70      	ldr	r3, [pc, #448]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6f      	ldr	r2, [pc, #444]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b6d      	ldr	r3, [pc, #436]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a6c      	ldr	r2, [pc, #432]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0xb0>
 8003cd8:	4b69      	ldr	r3, [pc, #420]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a68      	ldr	r2, [pc, #416]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b66      	ldr	r3, [pc, #408]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a65      	ldr	r2, [pc, #404]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fd f9d4 	bl	80010a4 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fd f9d0 	bl	80010a4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e207      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b5b      	ldr	r3, [pc, #364]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0xc0>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fd f9c0 	bl	80010a4 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fd f9bc 	bl	80010a4 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	; 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e1f3      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	4b51      	ldr	r3, [pc, #324]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0xe8>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d063      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d56:	4b4a      	ldr	r3, [pc, #296]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d62:	4b47      	ldr	r3, [pc, #284]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d11c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6e:	4b44      	ldr	r3, [pc, #272]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	4b41      	ldr	r3, [pc, #260]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_RCC_OscConfig+0x152>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e1c7      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d92:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4937      	ldr	r1, [pc, #220]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	e03a      	b.n	8003e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d020      	beq.n	8003df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db0:	4b34      	ldr	r3, [pc, #208]	; (8003e84 <HAL_RCC_OscConfig+0x244>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fd f975 	bl	80010a4 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dbe:	f7fd f971 	bl	80010a4 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e1a8      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ddc:	4b28      	ldr	r3, [pc, #160]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4925      	ldr	r1, [pc, #148]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	600b      	str	r3, [r1, #0]
 8003df0:	e015      	b.n	8003e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <HAL_RCC_OscConfig+0x244>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd f954 	bl	80010a4 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e00:	f7fd f950 	bl	80010a4 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e187      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d036      	beq.n	8003e98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <HAL_RCC_OscConfig+0x248>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fd f934 	bl	80010a4 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e40:	f7fd f930 	bl	80010a4 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e167      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCC_OscConfig+0x240>)
 8003e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x200>
 8003e5e:	e01b      	b.n	8003e98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_RCC_OscConfig+0x248>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e66:	f7fd f91d 	bl	80010a4 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6c:	e00e      	b.n	8003e8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e6e:	f7fd f919 	bl	80010a4 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d907      	bls.n	8003e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e150      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
 8003e80:	40023800 	.word	0x40023800
 8003e84:	42470000 	.word	0x42470000
 8003e88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	4b88      	ldr	r3, [pc, #544]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1ea      	bne.n	8003e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8097 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eaa:	4b81      	ldr	r3, [pc, #516]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10f      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	4b7d      	ldr	r3, [pc, #500]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	4a7c      	ldr	r2, [pc, #496]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec6:	4b7a      	ldr	r3, [pc, #488]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed6:	4b77      	ldr	r3, [pc, #476]	; (80040b4 <HAL_RCC_OscConfig+0x474>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d118      	bne.n	8003f14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee2:	4b74      	ldr	r3, [pc, #464]	; (80040b4 <HAL_RCC_OscConfig+0x474>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a73      	ldr	r2, [pc, #460]	; (80040b4 <HAL_RCC_OscConfig+0x474>)
 8003ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eee:	f7fd f8d9 	bl	80010a4 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef6:	f7fd f8d5 	bl	80010a4 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e10c      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f08:	4b6a      	ldr	r3, [pc, #424]	; (80040b4 <HAL_RCC_OscConfig+0x474>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCC_OscConfig+0x2ea>
 8003f1c:	4b64      	ldr	r3, [pc, #400]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a63      	ldr	r2, [pc, #396]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	e01c      	b.n	8003f64 <HAL_RCC_OscConfig+0x324>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x30c>
 8003f32:	4b5f      	ldr	r3, [pc, #380]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	4a5e      	ldr	r2, [pc, #376]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f38:	f043 0304 	orr.w	r3, r3, #4
 8003f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3e:	4b5c      	ldr	r3, [pc, #368]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	4a5b      	ldr	r2, [pc, #364]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4a:	e00b      	b.n	8003f64 <HAL_RCC_OscConfig+0x324>
 8003f4c:	4b58      	ldr	r3, [pc, #352]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	4a57      	ldr	r2, [pc, #348]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	6713      	str	r3, [r2, #112]	; 0x70
 8003f58:	4b55      	ldr	r3, [pc, #340]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a54      	ldr	r2, [pc, #336]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	f023 0304 	bic.w	r3, r3, #4
 8003f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d015      	beq.n	8003f98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6c:	f7fd f89a 	bl	80010a4 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f72:	e00a      	b.n	8003f8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f74:	f7fd f896 	bl	80010a4 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e0cb      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8a:	4b49      	ldr	r3, [pc, #292]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0ee      	beq.n	8003f74 <HAL_RCC_OscConfig+0x334>
 8003f96:	e014      	b.n	8003fc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f98:	f7fd f884 	bl	80010a4 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa0:	f7fd f880 	bl	80010a4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e0b5      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb6:	4b3e      	ldr	r3, [pc, #248]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1ee      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc8:	4b39      	ldr	r3, [pc, #228]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 80a1 	beq.w	8004120 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fde:	4b34      	ldr	r3, [pc, #208]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d05c      	beq.n	80040a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d141      	bne.n	8004076 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff2:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <HAL_RCC_OscConfig+0x478>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff8:	f7fd f854 	bl	80010a4 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd f850 	bl	80010a4 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e087      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	019b      	lsls	r3, r3, #6
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	3b01      	subs	r3, #1
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	491b      	ldr	r1, [pc, #108]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <HAL_RCC_OscConfig+0x478>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404e:	f7fd f829 	bl	80010a4 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004056:	f7fd f825 	bl	80010a4 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e05c      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x416>
 8004074:	e054      	b.n	8004120 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_RCC_OscConfig+0x478>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fd f812 	bl	80010a4 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd f80e 	bl	80010a4 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e045      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCC_OscConfig+0x470>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x444>
 80040a2:	e03d      	b.n	8004120 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e038      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40007000 	.word	0x40007000
 80040b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040bc:	4b1b      	ldr	r3, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x4ec>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d028      	beq.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d121      	bne.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d11a      	bne.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040ec:	4013      	ands	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d111      	bne.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	3b01      	subs	r3, #1
 8004106:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d107      	bne.n	800411c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800

08004130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0cc      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b68      	ldr	r3, [pc, #416]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d90c      	bls.n	800416c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b65      	ldr	r3, [pc, #404]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b63      	ldr	r3, [pc, #396]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0b8      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004184:	4b59      	ldr	r3, [pc, #356]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a58      	ldr	r2, [pc, #352]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800418e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800419c:	4b53      	ldr	r3, [pc, #332]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a52      	ldr	r2, [pc, #328]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	4b50      	ldr	r3, [pc, #320]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	494d      	ldr	r1, [pc, #308]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d044      	beq.n	8004250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	4b47      	ldr	r3, [pc, #284]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d119      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e07f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	4b3f      	ldr	r3, [pc, #252]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fe:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e067      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420e:	4b37      	ldr	r3, [pc, #220]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 0203 	bic.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4934      	ldr	r1, [pc, #208]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004220:	f7fc ff40 	bl	80010a4 <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	e00a      	b.n	800423e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004228:	f7fc ff3c 	bl	80010a4 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e04f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 020c 	and.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d1eb      	bne.n	8004228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004250:	4b25      	ldr	r3, [pc, #148]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d20c      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e032      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4916      	ldr	r1, [pc, #88]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	490e      	ldr	r1, [pc, #56]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042b6:	f000 f821 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80042ba:	4602      	mov	r2, r0
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	490a      	ldr	r1, [pc, #40]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 80042c8:	5ccb      	ldrb	r3, [r1, r3]
 80042ca:	fa22 f303 	lsr.w	r3, r2, r3
 80042ce:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fc fea0 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023c00 	.word	0x40023c00
 80042ec:	40023800 	.word	0x40023800
 80042f0:	08009510 	.word	0x08009510
 80042f4:	20000004 	.word	0x20000004
 80042f8:	20000008 	.word	0x20000008

080042fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004300:	b094      	sub	sp, #80	; 0x50
 8004302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	647b      	str	r3, [r7, #68]	; 0x44
 8004308:	2300      	movs	r3, #0
 800430a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800430c:	2300      	movs	r3, #0
 800430e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004314:	4b79      	ldr	r3, [pc, #484]	; (80044fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b08      	cmp	r3, #8
 800431e:	d00d      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x40>
 8004320:	2b08      	cmp	r3, #8
 8004322:	f200 80e1 	bhi.w	80044e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x34>
 800432a:	2b04      	cmp	r3, #4
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0x3a>
 800432e:	e0db      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004330:	4b73      	ldr	r3, [pc, #460]	; (8004500 <HAL_RCC_GetSysClockFreq+0x204>)
 8004332:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004334:	e0db      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004336:	4b73      	ldr	r3, [pc, #460]	; (8004504 <HAL_RCC_GetSysClockFreq+0x208>)
 8004338:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800433a:	e0d8      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800433c:	4b6f      	ldr	r3, [pc, #444]	; (80044fc <HAL_RCC_GetSysClockFreq+0x200>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004346:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d063      	beq.n	800441a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004352:	4b6a      	ldr	r3, [pc, #424]	; (80044fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	2200      	movs	r2, #0
 800435a:	63bb      	str	r3, [r7, #56]	; 0x38
 800435c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004364:	633b      	str	r3, [r7, #48]	; 0x30
 8004366:	2300      	movs	r3, #0
 8004368:	637b      	str	r3, [r7, #52]	; 0x34
 800436a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800436e:	4622      	mov	r2, r4
 8004370:	462b      	mov	r3, r5
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	0159      	lsls	r1, r3, #5
 800437c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004380:	0150      	lsls	r0, r2, #5
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4621      	mov	r1, r4
 8004388:	1a51      	subs	r1, r2, r1
 800438a:	6139      	str	r1, [r7, #16]
 800438c:	4629      	mov	r1, r5
 800438e:	eb63 0301 	sbc.w	r3, r3, r1
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043a0:	4659      	mov	r1, fp
 80043a2:	018b      	lsls	r3, r1, #6
 80043a4:	4651      	mov	r1, sl
 80043a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043aa:	4651      	mov	r1, sl
 80043ac:	018a      	lsls	r2, r1, #6
 80043ae:	4651      	mov	r1, sl
 80043b0:	ebb2 0801 	subs.w	r8, r2, r1
 80043b4:	4659      	mov	r1, fp
 80043b6:	eb63 0901 	sbc.w	r9, r3, r1
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ce:	4690      	mov	r8, r2
 80043d0:	4699      	mov	r9, r3
 80043d2:	4623      	mov	r3, r4
 80043d4:	eb18 0303 	adds.w	r3, r8, r3
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	462b      	mov	r3, r5
 80043dc:	eb49 0303 	adc.w	r3, r9, r3
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043ee:	4629      	mov	r1, r5
 80043f0:	024b      	lsls	r3, r1, #9
 80043f2:	4621      	mov	r1, r4
 80043f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043f8:	4621      	mov	r1, r4
 80043fa:	024a      	lsls	r2, r1, #9
 80043fc:	4610      	mov	r0, r2
 80043fe:	4619      	mov	r1, r3
 8004400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004402:	2200      	movs	r2, #0
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
 8004406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800440c:	f7fb fedc 	bl	80001c8 <__aeabi_uldivmod>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4613      	mov	r3, r2
 8004416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004418:	e058      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441a:	4b38      	ldr	r3, [pc, #224]	; (80044fc <HAL_RCC_GetSysClockFreq+0x200>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	099b      	lsrs	r3, r3, #6
 8004420:	2200      	movs	r2, #0
 8004422:	4618      	mov	r0, r3
 8004424:	4611      	mov	r1, r2
 8004426:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800442a:	623b      	str	r3, [r7, #32]
 800442c:	2300      	movs	r3, #0
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
 8004430:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	f04f 0000 	mov.w	r0, #0
 800443c:	f04f 0100 	mov.w	r1, #0
 8004440:	0159      	lsls	r1, r3, #5
 8004442:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004446:	0150      	lsls	r0, r2, #5
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4641      	mov	r1, r8
 800444e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004452:	4649      	mov	r1, r9
 8004454:	eb63 0b01 	sbc.w	fp, r3, r1
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004464:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004468:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800446c:	ebb2 040a 	subs.w	r4, r2, sl
 8004470:	eb63 050b 	sbc.w	r5, r3, fp
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	00eb      	lsls	r3, r5, #3
 800447e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004482:	00e2      	lsls	r2, r4, #3
 8004484:	4614      	mov	r4, r2
 8004486:	461d      	mov	r5, r3
 8004488:	4643      	mov	r3, r8
 800448a:	18e3      	adds	r3, r4, r3
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	464b      	mov	r3, r9
 8004490:	eb45 0303 	adc.w	r3, r5, r3
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044a2:	4629      	mov	r1, r5
 80044a4:	028b      	lsls	r3, r1, #10
 80044a6:	4621      	mov	r1, r4
 80044a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044ac:	4621      	mov	r1, r4
 80044ae:	028a      	lsls	r2, r1, #10
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b6:	2200      	movs	r2, #0
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	61fa      	str	r2, [r7, #28]
 80044bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c0:	f7fb fe82 	bl	80001c8 <__aeabi_uldivmod>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4613      	mov	r3, r2
 80044ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_GetSysClockFreq+0x200>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	0c1b      	lsrs	r3, r3, #16
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	3301      	adds	r3, #1
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044e6:	e002      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCC_GetSysClockFreq+0x204>)
 80044ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3750      	adds	r7, #80	; 0x50
 80044f4:	46bd      	mov	sp, r7
 80044f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fa:	bf00      	nop
 80044fc:	40023800 	.word	0x40023800
 8004500:	00f42400 	.word	0x00f42400
 8004504:	007a1200 	.word	0x007a1200

08004508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <HAL_RCC_GetHCLKFreq+0x14>)
 800450e:	681b      	ldr	r3, [r3, #0]
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000004 	.word	0x20000004

08004520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004524:	f7ff fff0 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	0a9b      	lsrs	r3, r3, #10
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4903      	ldr	r1, [pc, #12]	; (8004544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40023800 	.word	0x40023800
 8004544:	08009520 	.word	0x08009520

08004548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800454c:	f7ff ffdc 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	0b5b      	lsrs	r3, r3, #13
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	4903      	ldr	r1, [pc, #12]	; (800456c <HAL_RCC_GetPCLK2Freq+0x24>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40023800 	.word	0x40023800
 800456c:	08009520 	.word	0x08009520

08004570 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004594:	2b00      	cmp	r3, #0
 8004596:	d035      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004598:	4b62      	ldr	r3, [pc, #392]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800459e:	f7fc fd81 	bl	80010a4 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045a6:	f7fc fd7d 	bl	80010a4 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e0b0      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045b8:	4b5b      	ldr	r3, [pc, #364]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	019a      	lsls	r2, r3, #6
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	071b      	lsls	r3, r3, #28
 80045d0:	4955      	ldr	r1, [pc, #340]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045d8:	4b52      	ldr	r3, [pc, #328]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045de:	f7fc fd61 	bl	80010a4 <HAL_GetTick>
 80045e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045e4:	e008      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045e6:	f7fc fd5d 	bl	80010a4 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e090      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045f8:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 8083 	beq.w	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	4b44      	ldr	r3, [pc, #272]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	4a43      	ldr	r2, [pc, #268]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004620:	6413      	str	r3, [r2, #64]	; 0x40
 8004622:	4b41      	ldr	r3, [pc, #260]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a3e      	ldr	r2, [pc, #248]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004638:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800463a:	f7fc fd33 	bl	80010a4 <HAL_GetTick>
 800463e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004642:	f7fc fd2f 	bl	80010a4 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e062      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004654:	4b35      	ldr	r3, [pc, #212]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004660:	4b31      	ldr	r3, [pc, #196]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004668:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d02f      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	429a      	cmp	r2, r3
 800467c:	d028      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800467e:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004686:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004688:	4b29      	ldr	r3, [pc, #164]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800468e:	4b28      	ldr	r3, [pc, #160]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004694:	4a24      	ldr	r2, [pc, #144]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d114      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046a6:	f7fc fcfd 	bl	80010a4 <HAL_GetTick>
 80046aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ac:	e00a      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ae:	f7fc fcf9 	bl	80010a4 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e02a      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c4:	4b18      	ldr	r3, [pc, #96]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ee      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046dc:	d10d      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046de:	4b12      	ldr	r3, [pc, #72]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f2:	490d      	ldr	r1, [pc, #52]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	608b      	str	r3, [r1, #8]
 80046f8:	e005      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004700:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004704:	6093      	str	r3, [r2, #8]
 8004706:	4b08      	ldr	r3, [pc, #32]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004708:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004712:	4905      	ldr	r1, [pc, #20]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004714:	4313      	orrs	r3, r2
 8004716:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	42470068 	.word	0x42470068
 8004728:	40023800 	.word	0x40023800
 800472c:	40007000 	.word	0x40007000
 8004730:	42470e40 	.word	0x42470e40

08004734 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d13e      	bne.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004752:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d12f      	bne.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004768:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800476a:	617b      	str	r3, [r7, #20]
          break;
 800476c:	e02f      	b.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800476e:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477a:	d108      	bne.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800477c:	4b18      	ldr	r3, [pc, #96]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004784:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004786:	fbb2 f3f3 	udiv	r3, r2, r3
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	e007      	b.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800478e:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004796:	4a15      	ldr	r2, [pc, #84]	; (80047ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800479e:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047b2:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b8:	0f1b      	lsrs	r3, r3, #28
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c4:	617b      	str	r3, [r7, #20]
          break;
 80047c6:	e002      	b.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
          break;
 80047cc:	bf00      	nop
        }
      }
      break;
 80047ce:	bf00      	nop
    }
  }
  return frequency;
 80047d0:	697b      	ldr	r3, [r7, #20]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40023800 	.word	0x40023800
 80047e4:	00bb8000 	.word	0x00bb8000
 80047e8:	007a1200 	.word	0x007a1200
 80047ec:	00f42400 	.word	0x00f42400

080047f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e07b      	b.n	80048fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	d108      	bne.n	800481c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004812:	d009      	beq.n	8004828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	61da      	str	r2, [r3, #28]
 800481a:	e005      	b.n	8004828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fc fa26 	bl	8000c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	ea42 0103 	orr.w	r1, r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f003 0104 	and.w	r1, r3, #4
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	f003 0210 	and.w	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e041      	b.n	8004998 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7fc f9fb 	bl	8000d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3304      	adds	r3, #4
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f000 f9cd 	bl	8004ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d001      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e04e      	b.n	8004a56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a23      	ldr	r2, [pc, #140]	; (8004a64 <HAL_TIM_Base_Start_IT+0xc4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d022      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d01d      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <HAL_TIM_Base_Start_IT+0xc8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d018      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <HAL_TIM_Base_Start_IT+0xcc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d013      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <HAL_TIM_Base_Start_IT+0xd0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00e      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1b      	ldr	r2, [pc, #108]	; (8004a74 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d009      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a19      	ldr	r2, [pc, #100]	; (8004a78 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d004      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a18      	ldr	r2, [pc, #96]	; (8004a7c <HAL_TIM_Base_Start_IT+0xdc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d111      	bne.n	8004a44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b06      	cmp	r3, #6
 8004a30:	d010      	beq.n	8004a54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0201 	orr.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a42:	e007      	b.n	8004a54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40010400 	.word	0x40010400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40001800 	.word	0x40001800

08004a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0202 	mvn.w	r2, #2
 8004aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8ee 	bl	8004ca4 <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8e0 	bl	8004c90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f8f1 	bl	8004cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d122      	bne.n	8004b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d11b      	bne.n	8004b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0204 	mvn.w	r2, #4
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f8c4 	bl	8004ca4 <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8b6 	bl	8004c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f8c7 	bl	8004cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d122      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d11b      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0208 	mvn.w	r2, #8
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f89a 	bl	8004ca4 <HAL_TIM_IC_CaptureCallback>
 8004b70:	e005      	b.n	8004b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f88c 	bl	8004c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f89d 	bl	8004cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d122      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d11b      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0210 	mvn.w	r2, #16
 8004ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2208      	movs	r2, #8
 8004bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f870 	bl	8004ca4 <HAL_TIM_IC_CaptureCallback>
 8004bc4:	e005      	b.n	8004bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f862 	bl	8004c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f873 	bl	8004cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d10e      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d107      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0201 	mvn.w	r2, #1
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fb ff2e 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b80      	cmp	r3, #128	; 0x80
 8004c10:	d10e      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1c:	2b80      	cmp	r3, #128	; 0x80
 8004c1e:	d107      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f902 	bl	8004e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d10e      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c48:	2b40      	cmp	r3, #64	; 0x40
 8004c4a:	d107      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f838 	bl	8004ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d10e      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d107      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0220 	mvn.w	r2, #32
 8004c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f8cc 	bl	8004e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a40      	ldr	r2, [pc, #256]	; (8004df4 <TIM_Base_SetConfig+0x114>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d013      	beq.n	8004d20 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfe:	d00f      	beq.n	8004d20 <TIM_Base_SetConfig+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a3d      	ldr	r2, [pc, #244]	; (8004df8 <TIM_Base_SetConfig+0x118>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00b      	beq.n	8004d20 <TIM_Base_SetConfig+0x40>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a3c      	ldr	r2, [pc, #240]	; (8004dfc <TIM_Base_SetConfig+0x11c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d007      	beq.n	8004d20 <TIM_Base_SetConfig+0x40>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a3b      	ldr	r2, [pc, #236]	; (8004e00 <TIM_Base_SetConfig+0x120>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <TIM_Base_SetConfig+0x40>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a3a      	ldr	r2, [pc, #232]	; (8004e04 <TIM_Base_SetConfig+0x124>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d108      	bne.n	8004d32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2f      	ldr	r2, [pc, #188]	; (8004df4 <TIM_Base_SetConfig+0x114>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d02b      	beq.n	8004d92 <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d40:	d027      	beq.n	8004d92 <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2c      	ldr	r2, [pc, #176]	; (8004df8 <TIM_Base_SetConfig+0x118>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d023      	beq.n	8004d92 <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a2b      	ldr	r2, [pc, #172]	; (8004dfc <TIM_Base_SetConfig+0x11c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d01f      	beq.n	8004d92 <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a2a      	ldr	r2, [pc, #168]	; (8004e00 <TIM_Base_SetConfig+0x120>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01b      	beq.n	8004d92 <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a29      	ldr	r2, [pc, #164]	; (8004e04 <TIM_Base_SetConfig+0x124>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d017      	beq.n	8004d92 <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a28      	ldr	r2, [pc, #160]	; (8004e08 <TIM_Base_SetConfig+0x128>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d013      	beq.n	8004d92 <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a27      	ldr	r2, [pc, #156]	; (8004e0c <TIM_Base_SetConfig+0x12c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00f      	beq.n	8004d92 <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <TIM_Base_SetConfig+0x130>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00b      	beq.n	8004d92 <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a25      	ldr	r2, [pc, #148]	; (8004e14 <TIM_Base_SetConfig+0x134>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d007      	beq.n	8004d92 <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a24      	ldr	r2, [pc, #144]	; (8004e18 <TIM_Base_SetConfig+0x138>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d003      	beq.n	8004d92 <TIM_Base_SetConfig+0xb2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a23      	ldr	r2, [pc, #140]	; (8004e1c <TIM_Base_SetConfig+0x13c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d108      	bne.n	8004da4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a0a      	ldr	r2, [pc, #40]	; (8004df4 <TIM_Base_SetConfig+0x114>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_Base_SetConfig+0xf8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a0c      	ldr	r2, [pc, #48]	; (8004e04 <TIM_Base_SetConfig+0x124>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d103      	bne.n	8004de0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	615a      	str	r2, [r3, #20]
}
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40010000 	.word	0x40010000
 8004df8:	40000400 	.word	0x40000400
 8004dfc:	40000800 	.word	0x40000800
 8004e00:	40000c00 	.word	0x40000c00
 8004e04:	40010400 	.word	0x40010400
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40014400 	.word	0x40014400
 8004e10:	40014800 	.word	0x40014800
 8004e14:	40001800 	.word	0x40001800
 8004e18:	40001c00 	.word	0x40001c00
 8004e1c:	40002000 	.word	0x40002000

08004e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e057      	b.n	8004f0c <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d106      	bne.n	8004e76 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7fb ff7f 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2224      	movs	r2, #36	; 0x24
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e8c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fc92 	bl	80057b8 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ea2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eb2:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ec2:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0220 	bic.w	r2, r2, #32
 8004ed2:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6919      	ldr	r1, [r3, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b0ba      	sub	sp, #232	; 0xe8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10f      	bne.n	8004f7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <HAL_UART_IRQHandler+0x66>
 8004f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fb65 	bl	8005642 <UART_Receive_IT>
      return;
 8004f78:	e256      	b.n	8005428 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 80de 	beq.w	8005140 <HAL_UART_IRQHandler+0x22c>
 8004f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80d1 	beq.w	8005140 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <HAL_UART_IRQHandler+0xae>
 8004faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f043 0201 	orr.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00b      	beq.n	8004fe6 <HAL_UART_IRQHandler+0xd2>
 8004fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f043 0202 	orr.w	r2, r3, #2
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00b      	beq.n	800500a <HAL_UART_IRQHandler+0xf6>
 8004ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f043 0204 	orr.w	r2, r3, #4
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d011      	beq.n	800503a <HAL_UART_IRQHandler+0x126>
 8005016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d105      	bne.n	800502e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0208 	orr.w	r2, r3, #8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 81ed 	beq.w	800541e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d008      	beq.n	8005062 <HAL_UART_IRQHandler+0x14e>
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 faf0 	bl	8005642 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	bf0c      	ite	eq
 8005070:	2301      	moveq	r3, #1
 8005072:	2300      	movne	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <HAL_UART_IRQHandler+0x17a>
 8005086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800508a:	2b00      	cmp	r3, #0
 800508c:	d04f      	beq.n	800512e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f9f8 	bl	8005484 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d141      	bne.n	8005126 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3314      	adds	r3, #20
 80050ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1d9      	bne.n	80050a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d013      	beq.n	800511e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	4a7d      	ldr	r2, [pc, #500]	; (80052f0 <HAL_UART_IRQHandler+0x3dc>)
 80050fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	4618      	mov	r0, r3
 8005104:	f7fc f97f 	bl	8001406 <HAL_DMA_Abort_IT>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d016      	beq.n	800513c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005118:	4610      	mov	r0, r2
 800511a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511c:	e00e      	b.n	800513c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f99a 	bl	8005458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005124:	e00a      	b.n	800513c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f996 	bl	8005458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	e006      	b.n	800513c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f992 	bl	8005458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800513a:	e170      	b.n	800541e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	bf00      	nop
    return;
 800513e:	e16e      	b.n	800541e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	2b01      	cmp	r3, #1
 8005146:	f040 814a 	bne.w	80053de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 8143 	beq.w	80053de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 813c 	beq.w	80053de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005166:	2300      	movs	r3, #0
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	f040 80b4 	bne.w	80052f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005198:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 8140 	beq.w	8005422 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051aa:	429a      	cmp	r2, r3
 80051ac:	f080 8139 	bcs.w	8005422 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c2:	f000 8088 	beq.w	80052d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800520a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1d9      	bne.n	80051c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3314      	adds	r3, #20
 8005218:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3314      	adds	r3, #20
 8005232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005236:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800523a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800523e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e1      	bne.n	8005212 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3314      	adds	r3, #20
 8005254:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800525e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3314      	adds	r3, #20
 800526e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005272:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005274:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005278:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e3      	bne.n	800524e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	330c      	adds	r3, #12
 800529a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a6:	f023 0310 	bic.w	r3, r3, #16
 80052aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	330c      	adds	r3, #12
 80052b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80052ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e3      	bne.n	8005294 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fc f828 	bl	8001326 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052de:	b29b      	uxth	r3, r3
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	4619      	mov	r1, r3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f8c0 	bl	800546c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052ec:	e099      	b.n	8005422 <HAL_UART_IRQHandler+0x50e>
 80052ee:	bf00      	nop
 80052f0:	0800554b 	.word	0x0800554b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 808b 	beq.w	8005426 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8086 	beq.w	8005426 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800533e:	647a      	str	r2, [r7, #68]	; 0x44
 8005340:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800534c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e3      	bne.n	800531a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3314      	adds	r3, #20
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	623b      	str	r3, [r7, #32]
   return(result);
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3314      	adds	r3, #20
 8005372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005376:	633a      	str	r2, [r7, #48]	; 0x30
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800537c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e3      	bne.n	8005352 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	e853 3f00 	ldrex	r3, [r3]
 80053a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0310 	bic.w	r3, r3, #16
 80053ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	330c      	adds	r3, #12
 80053b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053bc:	61fa      	str	r2, [r7, #28]
 80053be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	69b9      	ldr	r1, [r7, #24]
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	617b      	str	r3, [r7, #20]
   return(result);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e3      	bne.n	8005398 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f848 	bl	800546c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053dc:	e023      	b.n	8005426 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <HAL_UART_IRQHandler+0x4ea>
 80053ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f8bb 	bl	8005572 <UART_Transmit_IT>
    return;
 80053fc:	e014      	b.n	8005428 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00e      	beq.n	8005428 <HAL_UART_IRQHandler+0x514>
 800540a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8fb 	bl	8005612 <UART_EndTransmit_IT>
    return;
 800541c:	e004      	b.n	8005428 <HAL_UART_IRQHandler+0x514>
    return;
 800541e:	bf00      	nop
 8005420:	e002      	b.n	8005428 <HAL_UART_IRQHandler+0x514>
      return;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <HAL_UART_IRQHandler+0x514>
      return;
 8005426:	bf00      	nop
  }
}
 8005428:	37e8      	adds	r7, #232	; 0xe8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop

08005430 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b095      	sub	sp, #84	; 0x54
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	330c      	adds	r3, #12
 8005492:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054ac:	643a      	str	r2, [r7, #64]	; 0x40
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e5      	bne.n	800548c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3314      	adds	r3, #20
 80054c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f023 0301 	bic.w	r3, r3, #1
 80054d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3314      	adds	r3, #20
 80054de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e5      	bne.n	80054c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d119      	bne.n	8005530 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	60bb      	str	r3, [r7, #8]
   return(result);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f023 0310 	bic.w	r3, r3, #16
 8005512:	647b      	str	r3, [r7, #68]	; 0x44
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800551c:	61ba      	str	r2, [r7, #24]
 800551e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6979      	ldr	r1, [r7, #20]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	613b      	str	r3, [r7, #16]
   return(result);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e5      	bne.n	80054fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800553e:	bf00      	nop
 8005540:	3754      	adds	r7, #84	; 0x54
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f7ff ff77 	bl	8005458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800556a:	bf00      	nop
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005572:	b480      	push	{r7}
 8005574:	b085      	sub	sp, #20
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b21      	cmp	r3, #33	; 0x21
 8005584:	d13e      	bne.n	8005604 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558e:	d114      	bne.n	80055ba <UART_Transmit_IT+0x48>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d110      	bne.n	80055ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	1c9a      	adds	r2, r3, #2
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	621a      	str	r2, [r3, #32]
 80055b8:	e008      	b.n	80055cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	1c59      	adds	r1, r3, #1
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6211      	str	r1, [r2, #32]
 80055c4:	781a      	ldrb	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	4619      	mov	r1, r3
 80055da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10f      	bne.n	8005600 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	e000      	b.n	8005606 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005604:	2302      	movs	r3, #2
  }
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005628:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff fefc 	bl	8005430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b08c      	sub	sp, #48	; 0x30
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b22      	cmp	r3, #34	; 0x22
 8005654:	f040 80ab 	bne.w	80057ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005660:	d117      	bne.n	8005692 <UART_Receive_IT+0x50>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d113      	bne.n	8005692 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005680:	b29a      	uxth	r2, r3
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	1c9a      	adds	r2, r3, #2
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	629a      	str	r2, [r3, #40]	; 0x28
 8005690:	e026      	b.n	80056e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a4:	d007      	beq.n	80056b6 <UART_Receive_IT+0x74>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <UART_Receive_IT+0x82>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e008      	b.n	80056d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	4619      	mov	r1, r3
 80056ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d15a      	bne.n	80057aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0220 	bic.w	r2, r2, #32
 8005702:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005712:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695a      	ldr	r2, [r3, #20]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0201 	bic.w	r2, r2, #1
 8005722:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	2b01      	cmp	r3, #1
 8005732:	d135      	bne.n	80057a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	330c      	adds	r3, #12
 8005740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	613b      	str	r3, [r7, #16]
   return(result);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f023 0310 	bic.w	r3, r3, #16
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	330c      	adds	r3, #12
 8005758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575a:	623a      	str	r2, [r7, #32]
 800575c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	69f9      	ldr	r1, [r7, #28]
 8005760:	6a3a      	ldr	r2, [r7, #32]
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	61bb      	str	r3, [r7, #24]
   return(result);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e5      	bne.n	800573a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b10      	cmp	r3, #16
 800577a:	d10a      	bne.n	8005792 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff fe67 	bl	800546c <HAL_UARTEx_RxEventCallback>
 800579e:	e002      	b.n	80057a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff fe4f 	bl	8005444 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e002      	b.n	80057b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e000      	b.n	80057b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
  }
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3730      	adds	r7, #48	; 0x30
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057bc:	b0c0      	sub	sp, #256	; 0x100
 80057be:	af00      	add	r7, sp, #0
 80057c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	68d9      	ldr	r1, [r3, #12]
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	ea40 0301 	orr.w	r3, r0, r1
 80057e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005810:	f021 010c 	bic.w	r1, r1, #12
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800581e:	430b      	orrs	r3, r1
 8005820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005832:	6999      	ldr	r1, [r3, #24]
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	ea40 0301 	orr.w	r3, r0, r1
 800583e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	4b8f      	ldr	r3, [pc, #572]	; (8005a84 <UART_SetConfig+0x2cc>)
 8005848:	429a      	cmp	r2, r3
 800584a:	d005      	beq.n	8005858 <UART_SetConfig+0xa0>
 800584c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b8d      	ldr	r3, [pc, #564]	; (8005a88 <UART_SetConfig+0x2d0>)
 8005854:	429a      	cmp	r2, r3
 8005856:	d104      	bne.n	8005862 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005858:	f7fe fe76 	bl	8004548 <HAL_RCC_GetPCLK2Freq>
 800585c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005860:	e003      	b.n	800586a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005862:	f7fe fe5d 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8005866:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005874:	f040 810c 	bne.w	8005a90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587c:	2200      	movs	r2, #0
 800587e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005882:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005886:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800588a:	4622      	mov	r2, r4
 800588c:	462b      	mov	r3, r5
 800588e:	1891      	adds	r1, r2, r2
 8005890:	65b9      	str	r1, [r7, #88]	; 0x58
 8005892:	415b      	adcs	r3, r3
 8005894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005896:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800589a:	4621      	mov	r1, r4
 800589c:	eb12 0801 	adds.w	r8, r2, r1
 80058a0:	4629      	mov	r1, r5
 80058a2:	eb43 0901 	adc.w	r9, r3, r1
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058ba:	4690      	mov	r8, r2
 80058bc:	4699      	mov	r9, r3
 80058be:	4623      	mov	r3, r4
 80058c0:	eb18 0303 	adds.w	r3, r8, r3
 80058c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058c8:	462b      	mov	r3, r5
 80058ca:	eb49 0303 	adc.w	r3, r9, r3
 80058ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058e6:	460b      	mov	r3, r1
 80058e8:	18db      	adds	r3, r3, r3
 80058ea:	653b      	str	r3, [r7, #80]	; 0x50
 80058ec:	4613      	mov	r3, r2
 80058ee:	eb42 0303 	adc.w	r3, r2, r3
 80058f2:	657b      	str	r3, [r7, #84]	; 0x54
 80058f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058fc:	f7fa fc64 	bl	80001c8 <__aeabi_uldivmod>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4b61      	ldr	r3, [pc, #388]	; (8005a8c <UART_SetConfig+0x2d4>)
 8005906:	fba3 2302 	umull	r2, r3, r3, r2
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	011c      	lsls	r4, r3, #4
 800590e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005912:	2200      	movs	r2, #0
 8005914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005918:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800591c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	1891      	adds	r1, r2, r2
 8005926:	64b9      	str	r1, [r7, #72]	; 0x48
 8005928:	415b      	adcs	r3, r3
 800592a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800592c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005930:	4641      	mov	r1, r8
 8005932:	eb12 0a01 	adds.w	sl, r2, r1
 8005936:	4649      	mov	r1, r9
 8005938:	eb43 0b01 	adc.w	fp, r3, r1
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005948:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800594c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005950:	4692      	mov	sl, r2
 8005952:	469b      	mov	fp, r3
 8005954:	4643      	mov	r3, r8
 8005956:	eb1a 0303 	adds.w	r3, sl, r3
 800595a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800595e:	464b      	mov	r3, r9
 8005960:	eb4b 0303 	adc.w	r3, fp, r3
 8005964:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005974:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005978:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800597c:	460b      	mov	r3, r1
 800597e:	18db      	adds	r3, r3, r3
 8005980:	643b      	str	r3, [r7, #64]	; 0x40
 8005982:	4613      	mov	r3, r2
 8005984:	eb42 0303 	adc.w	r3, r2, r3
 8005988:	647b      	str	r3, [r7, #68]	; 0x44
 800598a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800598e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005992:	f7fa fc19 	bl	80001c8 <__aeabi_uldivmod>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4611      	mov	r1, r2
 800599c:	4b3b      	ldr	r3, [pc, #236]	; (8005a8c <UART_SetConfig+0x2d4>)
 800599e:	fba3 2301 	umull	r2, r3, r3, r1
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	2264      	movs	r2, #100	; 0x64
 80059a6:	fb02 f303 	mul.w	r3, r2, r3
 80059aa:	1acb      	subs	r3, r1, r3
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059b2:	4b36      	ldr	r3, [pc, #216]	; (8005a8c <UART_SetConfig+0x2d4>)
 80059b4:	fba3 2302 	umull	r2, r3, r3, r2
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059c0:	441c      	add	r4, r3
 80059c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	1891      	adds	r1, r2, r2
 80059da:	63b9      	str	r1, [r7, #56]	; 0x38
 80059dc:	415b      	adcs	r3, r3
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059e4:	4641      	mov	r1, r8
 80059e6:	1851      	adds	r1, r2, r1
 80059e8:	6339      	str	r1, [r7, #48]	; 0x30
 80059ea:	4649      	mov	r1, r9
 80059ec:	414b      	adcs	r3, r1
 80059ee:	637b      	str	r3, [r7, #52]	; 0x34
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059fc:	4659      	mov	r1, fp
 80059fe:	00cb      	lsls	r3, r1, #3
 8005a00:	4651      	mov	r1, sl
 8005a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a06:	4651      	mov	r1, sl
 8005a08:	00ca      	lsls	r2, r1, #3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4642      	mov	r2, r8
 8005a12:	189b      	adds	r3, r3, r2
 8005a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a18:	464b      	mov	r3, r9
 8005a1a:	460a      	mov	r2, r1
 8005a1c:	eb42 0303 	adc.w	r3, r2, r3
 8005a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a38:	460b      	mov	r3, r1
 8005a3a:	18db      	adds	r3, r3, r3
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3e:	4613      	mov	r3, r2
 8005a40:	eb42 0303 	adc.w	r3, r2, r3
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a4e:	f7fa fbbb 	bl	80001c8 <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <UART_SetConfig+0x2d4>)
 8005a58:	fba3 1302 	umull	r1, r3, r3, r2
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	2164      	movs	r1, #100	; 0x64
 8005a60:	fb01 f303 	mul.w	r3, r1, r3
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	3332      	adds	r3, #50	; 0x32
 8005a6a:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <UART_SetConfig+0x2d4>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	f003 0207 	and.w	r2, r3, #7
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4422      	add	r2, r4
 8005a7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a80:	e106      	b.n	8005c90 <UART_SetConfig+0x4d8>
 8005a82:	bf00      	nop
 8005a84:	40011000 	.word	0x40011000
 8005a88:	40011400 	.word	0x40011400
 8005a8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005aa2:	4642      	mov	r2, r8
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	1891      	adds	r1, r2, r2
 8005aa8:	6239      	str	r1, [r7, #32]
 8005aaa:	415b      	adcs	r3, r3
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
 8005aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ab2:	4641      	mov	r1, r8
 8005ab4:	1854      	adds	r4, r2, r1
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	eb43 0501 	adc.w	r5, r3, r1
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	00eb      	lsls	r3, r5, #3
 8005ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aca:	00e2      	lsls	r2, r4, #3
 8005acc:	4614      	mov	r4, r2
 8005ace:	461d      	mov	r5, r3
 8005ad0:	4643      	mov	r3, r8
 8005ad2:	18e3      	adds	r3, r4, r3
 8005ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ad8:	464b      	mov	r3, r9
 8005ada:	eb45 0303 	adc.w	r3, r5, r3
 8005ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005afe:	4629      	mov	r1, r5
 8005b00:	008b      	lsls	r3, r1, #2
 8005b02:	4621      	mov	r1, r4
 8005b04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b08:	4621      	mov	r1, r4
 8005b0a:	008a      	lsls	r2, r1, #2
 8005b0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b10:	f7fa fb5a 	bl	80001c8 <__aeabi_uldivmod>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4b60      	ldr	r3, [pc, #384]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	011c      	lsls	r4, r3, #4
 8005b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b34:	4642      	mov	r2, r8
 8005b36:	464b      	mov	r3, r9
 8005b38:	1891      	adds	r1, r2, r2
 8005b3a:	61b9      	str	r1, [r7, #24]
 8005b3c:	415b      	adcs	r3, r3
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b44:	4641      	mov	r1, r8
 8005b46:	1851      	adds	r1, r2, r1
 8005b48:	6139      	str	r1, [r7, #16]
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	414b      	adcs	r3, r1
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	00cb      	lsls	r3, r1, #3
 8005b60:	4651      	mov	r1, sl
 8005b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b66:	4651      	mov	r1, sl
 8005b68:	00ca      	lsls	r2, r1, #3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4642      	mov	r2, r8
 8005b72:	189b      	adds	r3, r3, r2
 8005b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b78:	464b      	mov	r3, r9
 8005b7a:	460a      	mov	r2, r1
 8005b7c:	eb42 0303 	adc.w	r3, r2, r3
 8005b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	008b      	lsls	r3, r1, #2
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba6:	4641      	mov	r1, r8
 8005ba8:	008a      	lsls	r2, r1, #2
 8005baa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bae:	f7fa fb0b 	bl	80001c8 <__aeabi_uldivmod>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	4b38      	ldr	r3, [pc, #224]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005bba:	fba3 2301 	umull	r2, r3, r3, r1
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2264      	movs	r2, #100	; 0x64
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	1acb      	subs	r3, r1, r3
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	3332      	adds	r3, #50	; 0x32
 8005bcc:	4a33      	ldr	r2, [pc, #204]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd8:	441c      	add	r4, r3
 8005bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bde:	2200      	movs	r2, #0
 8005be0:	673b      	str	r3, [r7, #112]	; 0x70
 8005be2:	677a      	str	r2, [r7, #116]	; 0x74
 8005be4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005be8:	4642      	mov	r2, r8
 8005bea:	464b      	mov	r3, r9
 8005bec:	1891      	adds	r1, r2, r2
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	415b      	adcs	r3, r3
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	1851      	adds	r1, r2, r1
 8005bfc:	6039      	str	r1, [r7, #0]
 8005bfe:	4649      	mov	r1, r9
 8005c00:	414b      	adcs	r3, r1
 8005c02:	607b      	str	r3, [r7, #4]
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c10:	4659      	mov	r1, fp
 8005c12:	00cb      	lsls	r3, r1, #3
 8005c14:	4651      	mov	r1, sl
 8005c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1a:	4651      	mov	r1, sl
 8005c1c:	00ca      	lsls	r2, r1, #3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	4619      	mov	r1, r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	4642      	mov	r2, r8
 8005c26:	189b      	adds	r3, r3, r2
 8005c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	460a      	mov	r2, r1
 8005c2e:	eb42 0303 	adc.w	r3, r2, r3
 8005c32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c3e:	667a      	str	r2, [r7, #100]	; 0x64
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	008b      	lsls	r3, r1, #2
 8005c50:	4641      	mov	r1, r8
 8005c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c56:	4641      	mov	r1, r8
 8005c58:	008a      	lsls	r2, r1, #2
 8005c5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c5e:	f7fa fab3 	bl	80001c8 <__aeabi_uldivmod>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005c68:	fba3 1302 	umull	r1, r3, r3, r2
 8005c6c:	095b      	lsrs	r3, r3, #5
 8005c6e:	2164      	movs	r1, #100	; 0x64
 8005c70:	fb01 f303 	mul.w	r3, r1, r3
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	3332      	adds	r3, #50	; 0x32
 8005c7a:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	f003 020f 	and.w	r2, r3, #15
 8005c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4422      	add	r2, r4
 8005c8e:	609a      	str	r2, [r3, #8]
}
 8005c90:	bf00      	nop
 8005c92:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c96:	46bd      	mov	sp, r7
 8005c98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c9c:	51eb851f 	.word	0x51eb851f

08005ca0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	f107 001c 	add.w	r0, r7, #28
 8005cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d122      	bne.n	8005cfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d105      	bne.n	8005cf2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f9c0 	bl	8006078 <USB_CoreReset>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]
 8005cfc:	e01a      	b.n	8005d34 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f9b4 	bl	8006078 <USB_CoreReset>
 8005d10:	4603      	mov	r3, r0
 8005d12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	639a      	str	r2, [r3, #56]	; 0x38
 8005d26:	e005      	b.n	8005d34 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d10b      	bne.n	8005d52 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f043 0206 	orr.w	r2, r3, #6
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f043 0220 	orr.w	r2, r3, #32
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d5e:	b004      	add	sp, #16
 8005d60:	4770      	bx	lr

08005d62 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f043 0201 	orr.w	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f023 0201 	bic.w	r2, r3, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	460b      	mov	r3, r1
 8005db0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d115      	bne.n	8005df4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005dd4:	2001      	movs	r0, #1
 8005dd6:	f7fb f971 	bl	80010bc <HAL_Delay>
      ms++;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f93a 	bl	800605a <USB_GetMode>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d01e      	beq.n	8005e2a <USB_SetCurrentMode+0x84>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b31      	cmp	r3, #49	; 0x31
 8005df0:	d9f0      	bls.n	8005dd4 <USB_SetCurrentMode+0x2e>
 8005df2:	e01a      	b.n	8005e2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d115      	bne.n	8005e26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e06:	2001      	movs	r0, #1
 8005e08:	f7fb f958 	bl	80010bc <HAL_Delay>
      ms++;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f921 	bl	800605a <USB_GetMode>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <USB_SetCurrentMode+0x84>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b31      	cmp	r3, #49	; 0x31
 8005e22:	d9f0      	bls.n	8005e06 <USB_SetCurrentMode+0x60>
 8005e24:	e001      	b.n	8005e2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e005      	b.n	8005e36 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b32      	cmp	r3, #50	; 0x32
 8005e2e:	d101      	bne.n	8005e34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3301      	adds	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a13      	ldr	r2, [pc, #76]	; (8005ea4 <USB_FlushTxFifo+0x64>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d901      	bls.n	8005e60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e01b      	b.n	8005e98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	daf2      	bge.n	8005e4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	019b      	lsls	r3, r3, #6
 8005e70:	f043 0220 	orr.w	r2, r3, #32
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4a08      	ldr	r2, [pc, #32]	; (8005ea4 <USB_FlushTxFifo+0x64>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d901      	bls.n	8005e8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e006      	b.n	8005e98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d0f0      	beq.n	8005e78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	00030d40 	.word	0x00030d40

08005ea8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4a11      	ldr	r2, [pc, #68]	; (8005f04 <USB_FlushRxFifo+0x5c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d901      	bls.n	8005ec6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e018      	b.n	8005ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	daf2      	bge.n	8005eb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3301      	adds	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a08      	ldr	r2, [pc, #32]	; (8005f04 <USB_FlushRxFifo+0x5c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e006      	b.n	8005ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d0f0      	beq.n	8005ed8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	00030d40 	.word	0x00030d40

08005f08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b089      	sub	sp, #36	; 0x24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	4611      	mov	r1, r2
 8005f14:	461a      	mov	r2, r3
 8005f16:	460b      	mov	r3, r1
 8005f18:	71fb      	strb	r3, [r7, #7]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d123      	bne.n	8005f76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f2e:	88bb      	ldrh	r3, [r7, #4]
 8005f30:	3303      	adds	r3, #3
 8005f32:	089b      	lsrs	r3, r3, #2
 8005f34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f36:	2300      	movs	r3, #0
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	e018      	b.n	8005f6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	031a      	lsls	r2, r3, #12
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f48:	461a      	mov	r2, r3
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	3301      	adds	r3, #1
 8005f54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	3301      	adds	r3, #1
 8005f66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d3e2      	bcc.n	8005f3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3724      	adds	r7, #36	; 0x24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b08b      	sub	sp, #44	; 0x2c
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	089b      	lsrs	r3, r3, #2
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	f003 0303 	and.w	r3, r3, #3
 8005fa8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	623b      	str	r3, [r7, #32]
 8005fae:	e014      	b.n	8005fda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	3301      	adds	r3, #1
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	623b      	str	r3, [r7, #32]
 8005fda:	6a3a      	ldr	r2, [r7, #32]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d3e6      	bcc.n	8005fb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fe2:	8bfb      	ldrh	r3, [r7, #30]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01e      	beq.n	8006026 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f107 0310 	add.w	r3, r7, #16
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
 8006008:	b2da      	uxtb	r2, r3
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	701a      	strb	r2, [r3, #0]
      i++;
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	3301      	adds	r3, #1
 8006012:	623b      	str	r3, [r7, #32]
      pDest++;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	3301      	adds	r3, #1
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800601a:	8bfb      	ldrh	r3, [r7, #30]
 800601c:	3b01      	subs	r3, #1
 800601e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006020:	8bfb      	ldrh	r3, [r7, #30]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1ea      	bne.n	8005ffc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006028:	4618      	mov	r0, r3
 800602a:	372c      	adds	r7, #44	; 0x2c
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4013      	ands	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800604c:	68fb      	ldr	r3, [r7, #12]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0301 	and.w	r3, r3, #1
}
 800606a:	4618      	mov	r0, r3
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
	...

08006078 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3301      	adds	r3, #1
 8006088:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a13      	ldr	r2, [pc, #76]	; (80060dc <USB_CoreReset+0x64>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d901      	bls.n	8006096 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e01b      	b.n	80060ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	daf2      	bge.n	8006084 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f043 0201 	orr.w	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a09      	ldr	r2, [pc, #36]	; (80060dc <USB_CoreReset+0x64>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e006      	b.n	80060ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d0f0      	beq.n	80060ae <USB_CoreReset+0x36>

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	00030d40 	.word	0x00030d40

080060e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060e0:	b084      	sub	sp, #16
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b086      	sub	sp, #24
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006100:	461a      	mov	r2, r3
 8006102:	2300      	movs	r3, #0
 8006104:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d018      	beq.n	8006168 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	2b01      	cmp	r3, #1
 800613a:	d10a      	bne.n	8006152 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800614a:	f043 0304 	orr.w	r3, r3, #4
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	e014      	b.n	800617c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006160:	f023 0304 	bic.w	r3, r3, #4
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	e009      	b.n	800617c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006176:	f023 0304 	bic.w	r3, r3, #4
 800617a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800617c:	2110      	movs	r1, #16
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff fe5e 	bl	8005e40 <USB_FlushTxFifo>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff fe8a 	bl	8005ea8 <USB_FlushRxFifo>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e015      	b.n	80061d0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b0:	461a      	mov	r2, r3
 80061b2:	f04f 33ff 	mov.w	r3, #4294967295
 80061b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c4:	461a      	mov	r2, r3
 80061c6:	2300      	movs	r3, #0
 80061c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3301      	adds	r3, #1
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d3e5      	bcc.n	80061a4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f04f 32ff 	mov.w	r2, #4294967295
 80061e4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00b      	beq.n	800620a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a13      	ldr	r2, [pc, #76]	; (800624c <USB_HostInit+0x16c>)
 80061fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a13      	ldr	r2, [pc, #76]	; (8006250 <USB_HostInit+0x170>)
 8006204:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006208:	e009      	b.n	800621e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2280      	movs	r2, #128	; 0x80
 800620e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a10      	ldr	r2, [pc, #64]	; (8006254 <USB_HostInit+0x174>)
 8006214:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a0f      	ldr	r2, [pc, #60]	; (8006258 <USB_HostInit+0x178>)
 800621a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	2b00      	cmp	r3, #0
 8006222:	d105      	bne.n	8006230 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	f043 0210 	orr.w	r2, r3, #16
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699a      	ldr	r2, [r3, #24]
 8006234:	4b09      	ldr	r3, [pc, #36]	; (800625c <USB_HostInit+0x17c>)
 8006236:	4313      	orrs	r3, r2
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800623c:	7dfb      	ldrb	r3, [r7, #23]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006248:	b004      	add	sp, #16
 800624a:	4770      	bx	lr
 800624c:	01000200 	.word	0x01000200
 8006250:	00e00300 	.word	0x00e00300
 8006254:	00600080 	.word	0x00600080
 8006258:	004000e0 	.word	0x004000e0
 800625c:	a3200008 	.word	0xa3200008

08006260 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800627e:	f023 0303 	bic.w	r3, r3, #3
 8006282:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	68f9      	ldr	r1, [r7, #12]
 8006294:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006298:	4313      	orrs	r3, r2
 800629a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d107      	bne.n	80062b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062a8:	461a      	mov	r2, r3
 80062aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80062ae:	6053      	str	r3, [r2, #4]
 80062b0:	e009      	b.n	80062c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d106      	bne.n	80062c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062be:	461a      	mov	r2, r3
 80062c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80062c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006302:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006304:	2064      	movs	r0, #100	; 0x64
 8006306:	f7fa fed9 	bl	80010bc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006316:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006318:	200a      	movs	r0, #10
 800631a:	f7fa fecf 	bl	80010bc <HAL_Delay>

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800634c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <USB_DriveVbus+0x44>
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d106      	bne.n	800636c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006366:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800636a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006376:	d109      	bne.n	800638c <USB_DriveVbus+0x64>
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800638a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800639a:	b480      	push	{r7}
 800639c:	b085      	sub	sp, #20
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	0c5b      	lsrs	r3, r3, #17
 80063b8:	f003 0303 	and.w	r3, r3, #3
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	b29b      	uxth	r3, r3
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
	...

080063ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	4608      	mov	r0, r1
 80063f6:	4611      	mov	r1, r2
 80063f8:	461a      	mov	r2, r3
 80063fa:	4603      	mov	r3, r0
 80063fc:	70fb      	strb	r3, [r7, #3]
 80063fe:	460b      	mov	r3, r1
 8006400:	70bb      	strb	r3, [r7, #2]
 8006402:	4613      	mov	r3, r2
 8006404:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4413      	add	r3, r2
 8006416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641a:	461a      	mov	r2, r3
 800641c:	f04f 33ff 	mov.w	r3, #4294967295
 8006420:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006422:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006426:	2b03      	cmp	r3, #3
 8006428:	d87e      	bhi.n	8006528 <USB_HC_Init+0x13c>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <USB_HC_Init+0x44>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	08006441 	.word	0x08006441
 8006434:	080064eb 	.word	0x080064eb
 8006438:	08006441 	.word	0x08006441
 800643c:	080064ad 	.word	0x080064ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	461a      	mov	r2, r3
 800644e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006452:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006454:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006458:	2b00      	cmp	r3, #0
 800645a:	da10      	bge.n	800647e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	4413      	add	r3, r2
 8006464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	78fa      	ldrb	r2, [r7, #3]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	440a      	add	r2, r1
 8006472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800647c:	e057      	b.n	800652e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d051      	beq.n	800652e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	78fa      	ldrb	r2, [r7, #3]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064a8:	60d3      	str	r3, [r2, #12]
      break;
 80064aa:	e040      	b.n	800652e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064ac:	78fb      	ldrb	r3, [r7, #3]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b8:	461a      	mov	r2, r3
 80064ba:	f240 639d 	movw	r3, #1693	; 0x69d
 80064be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80064c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	da34      	bge.n	8006532 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80064e8:	e023      	b.n	8006532 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80064ea:	78fb      	ldrb	r3, [r7, #3]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	461a      	mov	r2, r3
 80064f8:	f240 2325 	movw	r3, #549	; 0x225
 80064fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80064fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006502:	2b00      	cmp	r3, #0
 8006504:	da17      	bge.n	8006536 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4413      	add	r3, r2
 800650e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	440a      	add	r2, r1
 800651c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006520:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006524:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006526:	e006      	b.n	8006536 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	77fb      	strb	r3, [r7, #31]
      break;
 800652c:	e004      	b.n	8006538 <USB_HC_Init+0x14c>
      break;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <USB_HC_Init+0x14c>
      break;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <USB_HC_Init+0x14c>
      break;
 8006536:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	78fa      	ldrb	r2, [r7, #3]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	440a      	add	r2, r1
 800654e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006552:	f043 0302 	orr.w	r3, r3, #2
 8006556:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800655e:	699a      	ldr	r2, [r3, #24]
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	2101      	movs	r1, #1
 8006568:	fa01 f303 	lsl.w	r3, r1, r3
 800656c:	6939      	ldr	r1, [r7, #16]
 800656e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006572:	4313      	orrs	r3, r2
 8006574:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006582:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006586:	2b00      	cmp	r3, #0
 8006588:	da03      	bge.n	8006592 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800658a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	e001      	b.n	8006596 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7ff feff 	bl	800639a <USB_GetHostSpeed>
 800659c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800659e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d106      	bne.n	80065b4 <USB_HC_Init+0x1c8>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d003      	beq.n	80065b4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80065ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	e001      	b.n	80065b8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065b8:	787b      	ldrb	r3, [r7, #1]
 80065ba:	059b      	lsls	r3, r3, #22
 80065bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80065c0:	78bb      	ldrb	r3, [r7, #2]
 80065c2:	02db      	lsls	r3, r3, #11
 80065c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80065ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80065ce:	049b      	lsls	r3, r3, #18
 80065d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80065d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80065d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80065dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	0159      	lsls	r1, r3, #5
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80065f4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80065f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d003      	beq.n	8006606 <USB_HC_Init+0x21a>
 80065fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006602:	2b01      	cmp	r3, #1
 8006604:	d10f      	bne.n	8006626 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006606:	78fb      	ldrb	r3, [r7, #3]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	78fa      	ldrb	r2, [r7, #3]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	440a      	add	r2, r1
 800661c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006620:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006624:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006626:	7ffb      	ldrb	r3, [r7, #31]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3720      	adds	r7, #32
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	; 0x30
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800664c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	2b00      	cmp	r3, #0
 8006658:	d02d      	beq.n	80066b6 <USB_HC_StartXfer+0x86>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	791b      	ldrb	r3, [r3, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d129      	bne.n	80066b6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d117      	bne.n	8006698 <USB_HC_StartXfer+0x68>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	79db      	ldrb	r3, [r3, #7]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <USB_HC_StartXfer+0x48>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	79db      	ldrb	r3, [r3, #7]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d10f      	bne.n	8006698 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	4413      	add	r3, r2
 8006680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	0151      	lsls	r1, r2, #5
 800668a:	6a3a      	ldr	r2, [r7, #32]
 800668c:	440a      	add	r2, r1
 800668e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006696:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10b      	bne.n	80066b6 <USB_HC_StartXfer+0x86>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	795b      	ldrb	r3, [r3, #5]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d107      	bne.n	80066b6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	785b      	ldrb	r3, [r3, #1]
 80066aa:	4619      	mov	r1, r3
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 fa0f 	bl	8006ad0 <USB_DoPing>
      return HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e0f8      	b.n	80068a8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d018      	beq.n	80066f0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	8912      	ldrh	r2, [r2, #8]
 80066c6:	4413      	add	r3, r2
 80066c8:	3b01      	subs	r3, #1
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	8912      	ldrh	r2, [r2, #8]
 80066ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80066d2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80066d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80066d6:	8b7b      	ldrh	r3, [r7, #26]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d90b      	bls.n	80066f4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80066dc:	8b7b      	ldrh	r3, [r7, #26]
 80066de:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	8912      	ldrh	r2, [r2, #8]
 80066e6:	fb03 f202 	mul.w	r2, r3, r2
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	611a      	str	r2, [r3, #16]
 80066ee:	e001      	b.n	80066f4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80066f0:	2301      	movs	r3, #1
 80066f2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	78db      	ldrb	r3, [r3, #3]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80066fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	8912      	ldrh	r2, [r2, #8]
 8006702:	fb03 f202 	mul.w	r2, r3, r2
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	611a      	str	r2, [r3, #16]
 800670a:	e003      	b.n	8006714 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	695a      	ldr	r2, [r3, #20]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800671c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800671e:	04d9      	lsls	r1, r3, #19
 8006720:	4b63      	ldr	r3, [pc, #396]	; (80068b0 <USB_HC_StartXfer+0x280>)
 8006722:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006724:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	7a9b      	ldrb	r3, [r3, #10]
 800672a:	075b      	lsls	r3, r3, #29
 800672c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006730:	69f9      	ldr	r1, [r7, #28]
 8006732:	0148      	lsls	r0, r1, #5
 8006734:	6a39      	ldr	r1, [r7, #32]
 8006736:	4401      	add	r1, r0
 8006738:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800673c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800673e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	68d9      	ldr	r1, [r3, #12]
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	4413      	add	r3, r2
 8006752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006756:	460a      	mov	r2, r1
 8006758:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	bf0c      	ite	eq
 800676a:	2301      	moveq	r3, #1
 800676c:	2300      	movne	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	4413      	add	r3, r2
 800677a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	6a3a      	ldr	r2, [r7, #32]
 8006786:	440a      	add	r2, r1
 8006788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006790:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	7e7b      	ldrb	r3, [r7, #25]
 80067a2:	075b      	lsls	r3, r3, #29
 80067a4:	69f9      	ldr	r1, [r7, #28]
 80067a6:	0148      	lsls	r0, r1, #5
 80067a8:	6a39      	ldr	r1, [r7, #32]
 80067aa:	4401      	add	r1, r0
 80067ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80067b0:	4313      	orrs	r3, r2
 80067b2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067ca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	78db      	ldrb	r3, [r3, #3]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d004      	beq.n	80067de <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067da:	613b      	str	r3, [r7, #16]
 80067dc:	e003      	b.n	80067e6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067e4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067ec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fa:	461a      	mov	r2, r3
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	e04e      	b.n	80068a8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	78db      	ldrb	r3, [r3, #3]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d149      	bne.n	80068a6 <USB_HC_StartXfer+0x276>
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d045      	beq.n	80068a6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	79db      	ldrb	r3, [r3, #7]
 800681e:	2b03      	cmp	r3, #3
 8006820:	d830      	bhi.n	8006884 <USB_HC_StartXfer+0x254>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <USB_HC_StartXfer+0x1f8>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	08006839 	.word	0x08006839
 800682c:	0800685d 	.word	0x0800685d
 8006830:	08006839 	.word	0x08006839
 8006834:	0800685d 	.word	0x0800685d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	3303      	adds	r3, #3
 800683e:	089b      	lsrs	r3, r3, #2
 8006840:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006842:	8afa      	ldrh	r2, [r7, #22]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	b29b      	uxth	r3, r3
 800684a:	429a      	cmp	r2, r3
 800684c:	d91c      	bls.n	8006888 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f043 0220 	orr.w	r2, r3, #32
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	619a      	str	r2, [r3, #24]
        }
        break;
 800685a:	e015      	b.n	8006888 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	3303      	adds	r3, #3
 8006862:	089b      	lsrs	r3, r3, #2
 8006864:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006866:	8afa      	ldrh	r2, [r7, #22]
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	b29b      	uxth	r3, r3
 8006872:	429a      	cmp	r2, r3
 8006874:	d90a      	bls.n	800688c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	619a      	str	r2, [r3, #24]
        }
        break;
 8006882:	e003      	b.n	800688c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006884:	bf00      	nop
 8006886:	e002      	b.n	800688e <USB_HC_StartXfer+0x25e>
        break;
 8006888:	bf00      	nop
 800688a:	e000      	b.n	800688e <USB_HC_StartXfer+0x25e>
        break;
 800688c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	68d9      	ldr	r1, [r3, #12]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	785a      	ldrb	r2, [r3, #1]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	b29b      	uxth	r3, r3
 800689c:	2000      	movs	r0, #0
 800689e:	9000      	str	r0, [sp, #0]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff fb31 	bl	8005f08 <USB_WritePacket>
  }

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3728      	adds	r7, #40	; 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	1ff80000 	.word	0x1ff80000

080068b4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	b29b      	uxth	r3, r3
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b089      	sub	sp, #36	; 0x24
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80068e6:	78fb      	ldrb	r3, [r7, #3]
 80068e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	0c9b      	lsrs	r3, r3, #18
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	4413      	add	r3, r2
 800690c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	0fdb      	lsrs	r3, r3, #31
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b20      	cmp	r3, #32
 8006924:	d104      	bne.n	8006930 <USB_HC_Halt+0x5a>
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	e0c8      	b.n	8006ac2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <USB_HC_Halt+0x66>
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d163      	bne.n	8006a04 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	440a      	add	r2, r1
 8006952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006956:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800695a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	f040 80ab 	bne.w	8006ac0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d133      	bne.n	80069de <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	440a      	add	r2, r1
 800698c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006994:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069b4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c2:	d81d      	bhi.n	8006a00 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069da:	d0ec      	beq.n	80069b6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069dc:	e070      	b.n	8006ac0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	69fa      	ldr	r2, [r7, #28]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069fc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069fe:	e05f      	b.n	8006ac0 <USB_HC_Halt+0x1ea>
            break;
 8006a00:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a02:	e05d      	b.n	8006ac0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a22:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d133      	bne.n	8006a9c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	0151      	lsls	r1, r2, #5
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	440a      	add	r2, r1
 8006a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	0151      	lsls	r1, r2, #5
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	440a      	add	r2, r1
 8006a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a72:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a80:	d81d      	bhi.n	8006abe <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a98:	d0ec      	beq.n	8006a74 <USB_HC_Halt+0x19e>
 8006a9a:	e011      	b.n	8006ac0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	0151      	lsls	r1, r2, #5
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	440a      	add	r2, r1
 8006ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	e000      	b.n	8006ac0 <USB_HC_Halt+0x1ea>
          break;
 8006abe:	bf00      	nop
    }
  }

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3724      	adds	r7, #36	; 0x24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
	...

08006ad0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	04da      	lsls	r2, r3, #19
 8006aec:	4b15      	ldr	r3, [pc, #84]	; (8006b44 <USB_DoPing+0x74>)
 8006aee:	4013      	ands	r3, r2
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	0151      	lsls	r1, r2, #5
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	440a      	add	r2, r1
 8006af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006afc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b00:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b18:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b20:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2e:	461a      	mov	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	1ff80000 	.word	0x1ff80000

08006b48 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7ff f911 	bl	8005d84 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b62:	2110      	movs	r1, #16
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff f96b 	bl	8005e40 <USB_FlushTxFifo>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff f997 	bl	8005ea8 <USB_FlushRxFifo>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b84:	2300      	movs	r3, #0
 8006b86:	61bb      	str	r3, [r7, #24]
 8006b88:	e01f      	b.n	8006bca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ba0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ba8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bb0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	61bb      	str	r3, [r7, #24]
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2b0f      	cmp	r3, #15
 8006bce:	d9dc      	bls.n	8006b8a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	e034      	b.n	8006c40 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bf4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bfc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3301      	adds	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c1c:	d80c      	bhi.n	8006c38 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c34:	d0ec      	beq.n	8006c10 <USB_StopHost+0xc8>
 8006c36:	e000      	b.n	8006c3a <USB_StopHost+0xf2>
        break;
 8006c38:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	2b0f      	cmp	r3, #15
 8006c44:	d9c7      	bls.n	8006bd6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c52:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff f880 	bl	8005d62 <USB_EnableGlobalInt>

  return ret;
 8006c62:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b089      	sub	sp, #36	; 0x24
 8006c70:	af04      	add	r7, sp, #16
 8006c72:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006c74:	2301      	movs	r3, #1
 8006c76:	2202      	movs	r2, #2
 8006c78:	2102      	movs	r1, #2
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fc66 	bl	800754c <USBH_FindInterface>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	2bff      	cmp	r3, #255	; 0xff
 8006c88:	d002      	beq.n	8006c90 <USBH_CDC_InterfaceInit+0x24>
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d901      	bls.n	8006c94 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c90:	2302      	movs	r3, #2
 8006c92:	e13d      	b.n	8006f10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fc3b 	bl	8007514 <USBH_SelectInterface>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e131      	b.n	8006f10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006cb2:	2050      	movs	r0, #80	; 0x50
 8006cb4:	f002 fad2 	bl	800925c <malloc>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e11f      	b.n	8006f10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006cd0:	2250      	movs	r2, #80	; 0x50
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	68b8      	ldr	r0, [r7, #8]
 8006cd6:	f002 fb7d 	bl	80093d4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	211a      	movs	r1, #26
 8006ce0:	fb01 f303 	mul.w	r3, r1, r3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b25b      	sxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	da15      	bge.n	8006d1e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	211a      	movs	r1, #26
 8006cf8:	fb01 f303 	mul.w	r3, r1, r3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d02:	781a      	ldrb	r2, [r3, #0]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	211a      	movs	r1, #26
 8006d0e:	fb01 f303 	mul.w	r3, r1, r3
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d18:	881a      	ldrh	r2, [r3, #0]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 ff2e 	bl	8008b86 <USBH_AllocPipe>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	7819      	ldrb	r1, [r3, #0]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	7858      	ldrb	r0, [r3, #1]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	8952      	ldrh	r2, [r2, #10]
 8006d4a:	9202      	str	r2, [sp, #8]
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	9201      	str	r2, [sp, #4]
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4623      	mov	r3, r4
 8006d54:	4602      	mov	r2, r0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fee6 	bl	8008b28 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2200      	movs	r2, #0
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f002 f9f5 	bl	8009154 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	210a      	movs	r1, #10
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fbeb 	bl	800754c <USBH_FindInterface>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	2bff      	cmp	r3, #255	; 0xff
 8006d7e:	d002      	beq.n	8006d86 <USBH_CDC_InterfaceInit+0x11a>
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d901      	bls.n	8006d8a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d86:	2302      	movs	r3, #2
 8006d88:	e0c2      	b.n	8006f10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	211a      	movs	r1, #26
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	4413      	add	r3, r2
 8006d96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	b25b      	sxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da16      	bge.n	8006dd0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	211a      	movs	r1, #26
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	4413      	add	r3, r2
 8006dae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006db2:	781a      	ldrb	r2, [r3, #0]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	211a      	movs	r1, #26
 8006dbe:	fb01 f303 	mul.w	r3, r1, r3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dc8:	881a      	ldrh	r2, [r3, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	835a      	strh	r2, [r3, #26]
 8006dce:	e015      	b.n	8006dfc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	211a      	movs	r1, #26
 8006dd6:	fb01 f303 	mul.w	r3, r1, r3
 8006dda:	4413      	add	r3, r2
 8006ddc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	211a      	movs	r1, #26
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006df6:	881a      	ldrh	r2, [r3, #0]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	211a      	movs	r1, #26
 8006e02:	fb01 f303 	mul.w	r3, r1, r3
 8006e06:	4413      	add	r3, r2
 8006e08:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	b25b      	sxtb	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	da16      	bge.n	8006e42 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	211a      	movs	r1, #26
 8006e1a:	fb01 f303 	mul.w	r3, r1, r3
 8006e1e:	4413      	add	r3, r2
 8006e20:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e24:	781a      	ldrb	r2, [r3, #0]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	211a      	movs	r1, #26
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e3a:	881a      	ldrh	r2, [r3, #0]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	835a      	strh	r2, [r3, #26]
 8006e40:	e015      	b.n	8006e6e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	211a      	movs	r1, #26
 8006e48:	fb01 f303 	mul.w	r3, r1, r3
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e52:	781a      	ldrb	r2, [r3, #0]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	211a      	movs	r1, #26
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e68:	881a      	ldrh	r2, [r3, #0]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	7b9b      	ldrb	r3, [r3, #14]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 fe86 	bl	8008b86 <USBH_AllocPipe>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	7bdb      	ldrb	r3, [r3, #15]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 fe7c 	bl	8008b86 <USBH_AllocPipe>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	461a      	mov	r2, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	7b59      	ldrb	r1, [r3, #13]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	7b98      	ldrb	r0, [r3, #14]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	8b12      	ldrh	r2, [r2, #24]
 8006eae:	9202      	str	r2, [sp, #8]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	9201      	str	r2, [sp, #4]
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	4623      	mov	r3, r4
 8006eb8:	4602      	mov	r2, r0
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 fe34 	bl	8008b28 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	7b19      	ldrb	r1, [r3, #12]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	7bd8      	ldrb	r0, [r3, #15]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	8b52      	ldrh	r2, [r2, #26]
 8006ed8:	9202      	str	r2, [sp, #8]
 8006eda:	2202      	movs	r2, #2
 8006edc:	9201      	str	r2, [sp, #4]
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	4623      	mov	r3, r4
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 fe1f 	bl	8008b28 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	7b5b      	ldrb	r3, [r3, #13]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f002 f92a 	bl	8009154 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	7b1b      	ldrb	r3, [r3, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f002 f923 	bl	8009154 <USBH_LL_SetToggle>

  return USBH_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd90      	pop	{r4, r7, pc}

08006f18 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00e      	beq.n	8006f50 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fe14 	bl	8008b66 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 fe3f 	bl	8008bc8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	7b1b      	ldrb	r3, [r3, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00e      	beq.n	8006f76 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	7b1b      	ldrb	r3, [r3, #12]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fe01 	bl	8008b66 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	7b1b      	ldrb	r3, [r3, #12]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fe2c 	bl	8008bc8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	7b5b      	ldrb	r3, [r3, #13]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00e      	beq.n	8006f9c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	7b5b      	ldrb	r3, [r3, #13]
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 fdee 	bl	8008b66 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	7b5b      	ldrb	r3, [r3, #13]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 fe19 	bl	8008bc8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00b      	beq.n	8006fc0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f002 f95b 	bl	800926c <free>
    phost->pActiveClass->pData = 0U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3340      	adds	r3, #64	; 0x40
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f8b1 	bl	800714a <GetLineCoding>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006fec:	7afb      	ldrb	r3, [r7, #11]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d105      	bne.n	8006ffe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ff8:	2102      	movs	r1, #2
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006ffe:	7afb      	ldrb	r3, [r7, #11]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007010:	2301      	movs	r3, #1
 8007012:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007028:	2b04      	cmp	r3, #4
 800702a:	d877      	bhi.n	800711c <USBH_CDC_Process+0x114>
 800702c:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <USBH_CDC_Process+0x2c>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	08007049 	.word	0x08007049
 8007038:	0800704f 	.word	0x0800704f
 800703c:	0800707f 	.word	0x0800707f
 8007040:	080070f3 	.word	0x080070f3
 8007044:	08007101 	.word	0x08007101
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]
      break;
 800704c:	e06d      	b.n	800712a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f897 	bl	8007188 <SetLineCoding>
 800705a:	4603      	mov	r3, r0
 800705c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d104      	bne.n	800706e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800706c:	e058      	b.n	8007120 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d055      	beq.n	8007120 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2204      	movs	r2, #4
 8007078:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800707c:	e050      	b.n	8007120 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	3340      	adds	r3, #64	; 0x40
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f860 	bl	800714a <GetLineCoding>
 800708a:	4603      	mov	r3, r0
 800708c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800708e:	7bbb      	ldrb	r3, [r7, #14]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d126      	bne.n	80070e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a6:	791b      	ldrb	r3, [r3, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d13b      	bne.n	8007124 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d133      	bne.n	8007124 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d12b      	bne.n	8007124 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d124      	bne.n	8007124 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f958 	bl	8007390 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070e0:	e020      	b.n	8007124 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d01d      	beq.n	8007124 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2204      	movs	r2, #4
 80070ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80070f0:	e018      	b.n	8007124 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f867 	bl	80071c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f8da 	bl	80072b2 <CDC_ProcessReception>
      break;
 80070fe:	e014      	b.n	800712a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007100:	2100      	movs	r1, #0
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 ffef 	bl	80080e6 <USBH_ClrFeature>
 8007108:	4603      	mov	r3, r0
 800710a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800710c:	7bbb      	ldrb	r3, [r7, #14]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800711a:	e005      	b.n	8007128 <USBH_CDC_Process+0x120>

    default:
      break;
 800711c:	bf00      	nop
 800711e:	e004      	b.n	800712a <USBH_CDC_Process+0x122>
      break;
 8007120:	bf00      	nop
 8007122:	e002      	b.n	800712a <USBH_CDC_Process+0x122>
      break;
 8007124:	bf00      	nop
 8007126:	e000      	b.n	800712a <USBH_CDC_Process+0x122>
      break;
 8007128:	bf00      	nop

  }

  return status;
 800712a:	7bfb      	ldrb	r3, [r7, #15]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	22a1      	movs	r2, #161	; 0xa1
 8007158:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2221      	movs	r2, #33	; 0x21
 800715e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2207      	movs	r2, #7
 8007170:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2207      	movs	r2, #7
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fa83 	bl	8008684 <USBH_CtlReq>
 800717e:	4603      	mov	r3, r0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2221      	movs	r2, #33	; 0x21
 8007196:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2220      	movs	r2, #32
 800719c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2207      	movs	r2, #7
 80071ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2207      	movs	r2, #7
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 fa64 	bl	8008684 <USBH_CtlReq>
 80071bc:	4603      	mov	r3, r0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b086      	sub	sp, #24
 80071ca:	af02      	add	r7, sp, #8
 80071cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071d8:	2300      	movs	r3, #0
 80071da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d002      	beq.n	80071ec <CDC_ProcessTransmission+0x26>
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d023      	beq.n	8007232 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80071ea:	e05e      	b.n	80072aa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	8b12      	ldrh	r2, [r2, #24]
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d90b      	bls.n	8007210 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	69d9      	ldr	r1, [r3, #28]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8b1a      	ldrh	r2, [r3, #24]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	7b5b      	ldrb	r3, [r3, #13]
 8007204:	2001      	movs	r0, #1
 8007206:	9000      	str	r0, [sp, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 fc4a 	bl	8008aa2 <USBH_BulkSendData>
 800720e:	e00b      	b.n	8007228 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007218:	b29a      	uxth	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	7b5b      	ldrb	r3, [r3, #13]
 800721e:	2001      	movs	r0, #1
 8007220:	9000      	str	r0, [sp, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 fc3d 	bl	8008aa2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007230:	e03b      	b.n	80072aa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	7b5b      	ldrb	r3, [r3, #13]
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 ff61 	bl	8009100 <USBH_LL_GetURBState>
 800723e:	4603      	mov	r3, r0
 8007240:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007242:	7afb      	ldrb	r3, [r7, #11]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d128      	bne.n	800729a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	8b12      	ldrh	r2, [r2, #24]
 8007250:	4293      	cmp	r3, r2
 8007252:	d90e      	bls.n	8007272 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	8b12      	ldrh	r2, [r2, #24]
 800725c:	1a9a      	subs	r2, r3, r2
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	8b12      	ldrh	r2, [r2, #24]
 800726a:	441a      	add	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	61da      	str	r2, [r3, #28]
 8007270:	e002      	b.n	8007278 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007288:	e00e      	b.n	80072a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f868 	bl	8007368 <USBH_CDC_TransmitCallback>
      break;
 8007298:	e006      	b.n	80072a8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800729a:	7afb      	ldrb	r3, [r7, #11]
 800729c:	2b02      	cmp	r3, #2
 800729e:	d103      	bne.n	80072a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072a8:	bf00      	nop
  }
}
 80072aa:	bf00      	nop
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072c4:	2300      	movs	r3, #0
 80072c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d002      	beq.n	80072d8 <CDC_ProcessReception+0x26>
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d00e      	beq.n	80072f4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80072d6:	e043      	b.n	8007360 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	6a19      	ldr	r1, [r3, #32]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	8b5a      	ldrh	r2, [r3, #26]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	7b1b      	ldrb	r3, [r3, #12]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 fc01 	bl	8008aec <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2204      	movs	r2, #4
 80072ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80072f2:	e035      	b.n	8007360 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	7b1b      	ldrb	r3, [r3, #12]
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 ff00 	bl	8009100 <USBH_LL_GetURBState>
 8007300:	4603      	mov	r3, r0
 8007302:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007304:	7cfb      	ldrb	r3, [r7, #19]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d129      	bne.n	800735e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	7b1b      	ldrb	r3, [r3, #12]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 fe63 	bl	8008fdc <USBH_LL_GetLastXferSize>
 8007316:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	429a      	cmp	r2, r3
 8007320:	d016      	beq.n	8007350 <CDC_ProcessReception+0x9e>
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	8b5b      	ldrh	r3, [r3, #26]
 8007326:	461a      	mov	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4293      	cmp	r3, r2
 800732c:	d910      	bls.n	8007350 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1ad2      	subs	r2, r2, r3
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	6a1a      	ldr	r2, [r3, #32]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	441a      	add	r2, r3
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2203      	movs	r2, #3
 800734a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800734e:	e006      	b.n	800735e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f80f 	bl	800737c <USBH_CDC_ReceiveCallback>
      break;
 800735e:	bf00      	nop
  }
}
 8007360:	bf00      	nop
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80073b8:	2302      	movs	r3, #2
 80073ba:	e029      	b.n	8007410 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	79fa      	ldrb	r2, [r7, #7]
 80073c0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 f81f 	bl	8007418 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f001 fd33 	bl	8008e74 <USBH_LL_Init>

  return USBH_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	e009      	b.n	800743e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	33e0      	adds	r3, #224	; 0xe0
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	2200      	movs	r2, #0
 8007436:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3301      	adds	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b0f      	cmp	r3, #15
 8007442:	d9f2      	bls.n	800742a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	e009      	b.n	800745e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007454:	2200      	movs	r2, #0
 8007456:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3301      	adds	r3, #1
 800745c:	60fb      	str	r3, [r7, #12]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007464:	d3f1      	bcc.n	800744a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2240      	movs	r2, #64	; 0x40
 800748a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d016      	beq.n	8007502 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10e      	bne.n	80074fc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074e4:	1c59      	adds	r1, r3, #1
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	33de      	adds	r3, #222	; 0xde
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	73fb      	strb	r3, [r7, #15]
 80074fa:	e004      	b.n	8007506 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80074fc:	2302      	movs	r3, #2
 80074fe:	73fb      	strb	r3, [r7, #15]
 8007500:	e001      	b.n	8007506 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007502:	2302      	movs	r3, #2
 8007504:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800752a:	78fa      	ldrb	r2, [r7, #3]
 800752c:	429a      	cmp	r2, r3
 800752e:	d204      	bcs.n	800753a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	78fa      	ldrb	r2, [r7, #3]
 8007534:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007538:	e001      	b.n	800753e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800753a:	2302      	movs	r3, #2
 800753c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	4608      	mov	r0, r1
 8007556:	4611      	mov	r1, r2
 8007558:	461a      	mov	r2, r3
 800755a:	4603      	mov	r3, r0
 800755c:	70fb      	strb	r3, [r7, #3]
 800755e:	460b      	mov	r3, r1
 8007560:	70bb      	strb	r3, [r7, #2]
 8007562:	4613      	mov	r3, r2
 8007564:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800756a:	2300      	movs	r3, #0
 800756c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007574:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007576:	e025      	b.n	80075c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	221a      	movs	r2, #26
 800757c:	fb02 f303 	mul.w	r3, r2, r3
 8007580:	3308      	adds	r3, #8
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4413      	add	r3, r2
 8007586:	3302      	adds	r3, #2
 8007588:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	795b      	ldrb	r3, [r3, #5]
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	429a      	cmp	r2, r3
 8007592:	d002      	beq.n	800759a <USBH_FindInterface+0x4e>
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	2bff      	cmp	r3, #255	; 0xff
 8007598:	d111      	bne.n	80075be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800759e:	78ba      	ldrb	r2, [r7, #2]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d002      	beq.n	80075aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075a4:	78bb      	ldrb	r3, [r7, #2]
 80075a6:	2bff      	cmp	r3, #255	; 0xff
 80075a8:	d109      	bne.n	80075be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075ae:	787a      	ldrb	r2, [r7, #1]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d002      	beq.n	80075ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075b4:	787b      	ldrb	r3, [r7, #1]
 80075b6:	2bff      	cmp	r3, #255	; 0xff
 80075b8:	d101      	bne.n	80075be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	e006      	b.n	80075cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	3301      	adds	r3, #1
 80075c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d9d6      	bls.n	8007578 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80075ca:	23ff      	movs	r3, #255	; 0xff
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 fc83 	bl	8008eec <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80075e6:	2101      	movs	r1, #1
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fd9c 	bl	8009126 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af04      	add	r7, sp, #16
 80075fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007600:	2302      	movs	r3, #2
 8007602:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b01      	cmp	r3, #1
 8007612:	d102      	bne.n	800761a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2203      	movs	r2, #3
 8007618:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b0b      	cmp	r3, #11
 8007622:	f200 81be 	bhi.w	80079a2 <USBH_Process+0x3aa>
 8007626:	a201      	add	r2, pc, #4	; (adr r2, 800762c <USBH_Process+0x34>)
 8007628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762c:	0800765d 	.word	0x0800765d
 8007630:	0800768f 	.word	0x0800768f
 8007634:	080076f7 	.word	0x080076f7
 8007638:	0800793d 	.word	0x0800793d
 800763c:	080079a3 	.word	0x080079a3
 8007640:	0800779b 	.word	0x0800779b
 8007644:	080078e3 	.word	0x080078e3
 8007648:	080077d1 	.word	0x080077d1
 800764c:	080077f1 	.word	0x080077f1
 8007650:	08007811 	.word	0x08007811
 8007654:	08007855 	.word	0x08007855
 8007658:	08007925 	.word	0x08007925
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 819e 	beq.w	80079a6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007670:	20c8      	movs	r0, #200	; 0xc8
 8007672:	f001 fd9f 	bl	80091b4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 fc95 	bl	8008fa6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800768c:	e18b      	b.n	80079a6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007694:	2b01      	cmp	r3, #1
 8007696:	d107      	bne.n	80076a8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076a6:	e18d      	b.n	80079c4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076b2:	d914      	bls.n	80076de <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076ba:	3301      	adds	r3, #1
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d903      	bls.n	80076d6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	220d      	movs	r2, #13
 80076d2:	701a      	strb	r2, [r3, #0]
      break;
 80076d4:	e176      	b.n	80079c4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
      break;
 80076dc:	e172      	b.n	80079c4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076e4:	f103 020a 	add.w	r2, r3, #10
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80076ee:	200a      	movs	r0, #10
 80076f0:	f001 fd60 	bl	80091b4 <USBH_Delay>
      break;
 80076f4:	e166      	b.n	80079c4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007706:	2104      	movs	r1, #4
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800770c:	2064      	movs	r0, #100	; 0x64
 800770e:	f001 fd51 	bl	80091b4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 fc20 	bl	8008f58 <USBH_LL_GetSpeed>
 8007718:	4603      	mov	r3, r0
 800771a:	461a      	mov	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2205      	movs	r2, #5
 8007726:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007728:	2100      	movs	r1, #0
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 fa2b 	bl	8008b86 <USBH_AllocPipe>
 8007730:	4603      	mov	r3, r0
 8007732:	461a      	mov	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007738:	2180      	movs	r1, #128	; 0x80
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fa23 	bl	8008b86 <USBH_AllocPipe>
 8007740:	4603      	mov	r3, r0
 8007742:	461a      	mov	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7919      	ldrb	r1, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800775c:	b292      	uxth	r2, r2
 800775e:	9202      	str	r2, [sp, #8]
 8007760:	2200      	movs	r2, #0
 8007762:	9201      	str	r2, [sp, #4]
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	4603      	mov	r3, r0
 8007768:	2280      	movs	r2, #128	; 0x80
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 f9dc 	bl	8008b28 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	7959      	ldrb	r1, [r3, #5]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007784:	b292      	uxth	r2, r2
 8007786:	9202      	str	r2, [sp, #8]
 8007788:	2200      	movs	r2, #0
 800778a:	9201      	str	r2, [sp, #4]
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	4603      	mov	r3, r0
 8007790:	2200      	movs	r2, #0
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 f9c8 	bl	8008b28 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007798:	e114      	b.n	80079c4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f918 	bl	80079d0 <USBH_HandleEnum>
 80077a0:	4603      	mov	r3, r0
 80077a2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f040 80fe 	bne.w	80079aa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d103      	bne.n	80077c8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2208      	movs	r2, #8
 80077c4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077c6:	e0f0      	b.n	80079aa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2207      	movs	r2, #7
 80077cc:	701a      	strb	r2, [r3, #0]
      break;
 80077ce:	e0ec      	b.n	80079aa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 80e9 	beq.w	80079ae <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077e2:	2101      	movs	r1, #1
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2208      	movs	r2, #8
 80077ec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80077ee:	e0de      	b.n	80079ae <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fc2c 	bl	8008058 <USBH_SetCfg>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	f040 80d5 	bne.w	80079b2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2209      	movs	r2, #9
 800780c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800780e:	e0d0      	b.n	80079b2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d016      	beq.n	800784c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800781e:	2101      	movs	r1, #1
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fc3c 	bl	800809e <USBH_SetFeature>
 8007826:	4603      	mov	r3, r0
 8007828:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	220a      	movs	r2, #10
 8007836:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007838:	e0bd      	b.n	80079b6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b03      	cmp	r3, #3
 8007840:	f040 80b9 	bne.w	80079b6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	220a      	movs	r2, #10
 8007848:	701a      	strb	r2, [r3, #0]
      break;
 800784a:	e0b4      	b.n	80079b6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	220a      	movs	r2, #10
 8007850:	701a      	strb	r2, [r3, #0]
      break;
 8007852:	e0b0      	b.n	80079b6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80ad 	beq.w	80079ba <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007868:	2300      	movs	r3, #0
 800786a:	73fb      	strb	r3, [r7, #15]
 800786c:	e016      	b.n	800789c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800786e:	7bfa      	ldrb	r2, [r7, #15]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	32de      	adds	r2, #222	; 0xde
 8007874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007878:	791a      	ldrb	r2, [r3, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007880:	429a      	cmp	r2, r3
 8007882:	d108      	bne.n	8007896 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007884:	7bfa      	ldrb	r2, [r7, #15]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	32de      	adds	r2, #222	; 0xde
 800788a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007894:	e005      	b.n	80078a2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	3301      	adds	r3, #1
 800789a:	73fb      	strb	r3, [r7, #15]
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0e5      	beq.n	800786e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d016      	beq.n	80078da <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4798      	blx	r3
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d109      	bne.n	80078d2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2206      	movs	r2, #6
 80078c2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078ca:	2103      	movs	r1, #3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078d0:	e073      	b.n	80079ba <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	220d      	movs	r2, #13
 80078d6:	701a      	strb	r2, [r3, #0]
      break;
 80078d8:	e06f      	b.n	80079ba <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	220d      	movs	r2, #13
 80078de:	701a      	strb	r2, [r3, #0]
      break;
 80078e0:	e06b      	b.n	80079ba <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d017      	beq.n	800791c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	4798      	blx	r3
 80078f8:	4603      	mov	r3, r0
 80078fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d103      	bne.n	800790c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	220b      	movs	r2, #11
 8007908:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800790a:	e058      	b.n	80079be <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d154      	bne.n	80079be <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	220d      	movs	r2, #13
 8007918:	701a      	strb	r2, [r3, #0]
      break;
 800791a:	e050      	b.n	80079be <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	220d      	movs	r2, #13
 8007920:	701a      	strb	r2, [r3, #0]
      break;
 8007922:	e04c      	b.n	80079be <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d049      	beq.n	80079c2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	4798      	blx	r3
      }
      break;
 800793a:	e042      	b.n	80079c2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fd67 	bl	8007418 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d009      	beq.n	8007968 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800796e:	2b00      	cmp	r3, #0
 8007970:	d005      	beq.n	800797e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007978:	2105      	movs	r1, #5
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b01      	cmp	r3, #1
 8007988:	d107      	bne.n	800799a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff fe20 	bl	80075d8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007998:	e014      	b.n	80079c4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 faa6 	bl	8008eec <USBH_LL_Start>
      break;
 80079a0:	e010      	b.n	80079c4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80079a2:	bf00      	nop
 80079a4:	e00e      	b.n	80079c4 <USBH_Process+0x3cc>
      break;
 80079a6:	bf00      	nop
 80079a8:	e00c      	b.n	80079c4 <USBH_Process+0x3cc>
      break;
 80079aa:	bf00      	nop
 80079ac:	e00a      	b.n	80079c4 <USBH_Process+0x3cc>
    break;
 80079ae:	bf00      	nop
 80079b0:	e008      	b.n	80079c4 <USBH_Process+0x3cc>
      break;
 80079b2:	bf00      	nop
 80079b4:	e006      	b.n	80079c4 <USBH_Process+0x3cc>
      break;
 80079b6:	bf00      	nop
 80079b8:	e004      	b.n	80079c4 <USBH_Process+0x3cc>
      break;
 80079ba:	bf00      	nop
 80079bc:	e002      	b.n	80079c4 <USBH_Process+0x3cc>
      break;
 80079be:	bf00      	nop
 80079c0:	e000      	b.n	80079c4 <USBH_Process+0x3cc>
      break;
 80079c2:	bf00      	nop
  }
  return USBH_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop

080079d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af04      	add	r7, sp, #16
 80079d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80079dc:	2301      	movs	r3, #1
 80079de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b07      	cmp	r3, #7
 80079e6:	f200 81c1 	bhi.w	8007d6c <USBH_HandleEnum+0x39c>
 80079ea:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <USBH_HandleEnum+0x20>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a11 	.word	0x08007a11
 80079f4:	08007acf 	.word	0x08007acf
 80079f8:	08007b39 	.word	0x08007b39
 80079fc:	08007bc7 	.word	0x08007bc7
 8007a00:	08007c31 	.word	0x08007c31
 8007a04:	08007ca1 	.word	0x08007ca1
 8007a08:	08007ce7 	.word	0x08007ce7
 8007a0c:	08007d2d 	.word	0x08007d2d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a10:	2108      	movs	r1, #8
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa50 	bl	8007eb8 <USBH_Get_DevDesc>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d130      	bne.n	8007a84 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	7919      	ldrb	r1, [r3, #4]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a46:	b292      	uxth	r2, r2
 8007a48:	9202      	str	r2, [sp, #8]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	9201      	str	r2, [sp, #4]
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	4603      	mov	r3, r0
 8007a52:	2280      	movs	r2, #128	; 0x80
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 f867 	bl	8008b28 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	7959      	ldrb	r1, [r3, #5]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a6e:	b292      	uxth	r2, r2
 8007a70:	9202      	str	r2, [sp, #8]
 8007a72:	2200      	movs	r2, #0
 8007a74:	9201      	str	r2, [sp, #4]
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 f853 	bl	8008b28 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a82:	e175      	b.n	8007d70 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	f040 8172 	bne.w	8007d70 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a92:	3301      	adds	r3, #1
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d903      	bls.n	8007aae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	220d      	movs	r2, #13
 8007aaa:	701a      	strb	r2, [r3, #0]
      break;
 8007aac:	e160      	b.n	8007d70 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	795b      	ldrb	r3, [r3, #5]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 f887 	bl	8008bc8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	791b      	ldrb	r3, [r3, #4]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f881 	bl	8008bc8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	701a      	strb	r2, [r3, #0]
      break;
 8007acc:	e150      	b.n	8007d70 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007ace:	2112      	movs	r1, #18
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f9f1 	bl	8007eb8 <USBH_Get_DevDesc>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d103      	bne.n	8007ae8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ae6:	e145      	b.n	8007d74 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	f040 8142 	bne.w	8007d74 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007af6:	3301      	adds	r3, #1
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d903      	bls.n	8007b12 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	220d      	movs	r2, #13
 8007b0e:	701a      	strb	r2, [r3, #0]
      break;
 8007b10:	e130      	b.n	8007d74 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	795b      	ldrb	r3, [r3, #5]
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f001 f855 	bl	8008bc8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	791b      	ldrb	r3, [r3, #4]
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 f84f 	bl	8008bc8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	701a      	strb	r2, [r3, #0]
      break;
 8007b36:	e11d      	b.n	8007d74 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007b38:	2101      	movs	r1, #1
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa68 	bl	8008010 <USBH_SetAddress>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d132      	bne.n	8007bb0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007b4a:	2002      	movs	r0, #2
 8007b4c:	f001 fb32 	bl	80091b4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2203      	movs	r2, #3
 8007b5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	7919      	ldrb	r1, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b72:	b292      	uxth	r2, r2
 8007b74:	9202      	str	r2, [sp, #8]
 8007b76:	2200      	movs	r2, #0
 8007b78:	9201      	str	r2, [sp, #4]
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2280      	movs	r2, #128	; 0x80
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 ffd1 	bl	8008b28 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	7959      	ldrb	r1, [r3, #5]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b9a:	b292      	uxth	r2, r2
 8007b9c:	9202      	str	r2, [sp, #8]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	9201      	str	r2, [sp, #4]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 ffbd 	bl	8008b28 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007bae:	e0e3      	b.n	8007d78 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	f040 80e0 	bne.w	8007d78 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	220d      	movs	r2, #13
 8007bbc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	705a      	strb	r2, [r3, #1]
      break;
 8007bc4:	e0d8      	b.n	8007d78 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007bc6:	2109      	movs	r1, #9
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f99d 	bl	8007f08 <USBH_Get_CfgDesc>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d103      	bne.n	8007be0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2204      	movs	r2, #4
 8007bdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bde:	e0cd      	b.n	8007d7c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	f040 80ca 	bne.w	8007d7c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bee:	3301      	adds	r3, #1
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d903      	bls.n	8007c0a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	220d      	movs	r2, #13
 8007c06:	701a      	strb	r2, [r3, #0]
      break;
 8007c08:	e0b8      	b.n	8007d7c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	795b      	ldrb	r3, [r3, #5]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 ffd9 	bl	8008bc8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	791b      	ldrb	r3, [r3, #4]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 ffd3 	bl	8008bc8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	701a      	strb	r2, [r3, #0]
      break;
 8007c2e:	e0a5      	b.n	8007d7c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f965 	bl	8007f08 <USBH_Get_CfgDesc>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d103      	bne.n	8007c50 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2205      	movs	r2, #5
 8007c4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c4e:	e097      	b.n	8007d80 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	f040 8094 	bne.w	8007d80 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c5e:	3301      	adds	r3, #1
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d903      	bls.n	8007c7a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	220d      	movs	r2, #13
 8007c76:	701a      	strb	r2, [r3, #0]
      break;
 8007c78:	e082      	b.n	8007d80 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	795b      	ldrb	r3, [r3, #5]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 ffa1 	bl	8008bc8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	791b      	ldrb	r3, [r3, #4]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 ff9b 	bl	8008bc8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	701a      	strb	r2, [r3, #0]
      break;
 8007c9e:	e06f      	b.n	8007d80 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d019      	beq.n	8007cde <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007cb6:	23ff      	movs	r3, #255	; 0xff
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f949 	bl	8007f50 <USBH_Get_StringDesc>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d103      	bne.n	8007cd0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2206      	movs	r2, #6
 8007ccc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007cce:	e059      	b.n	8007d84 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d156      	bne.n	8007d84 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2206      	movs	r2, #6
 8007cda:	705a      	strb	r2, [r3, #1]
      break;
 8007cdc:	e052      	b.n	8007d84 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2206      	movs	r2, #6
 8007ce2:	705a      	strb	r2, [r3, #1]
      break;
 8007ce4:	e04e      	b.n	8007d84 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d019      	beq.n	8007d24 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007cfc:	23ff      	movs	r3, #255	; 0xff
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f926 	bl	8007f50 <USBH_Get_StringDesc>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d103      	bne.n	8007d16 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2207      	movs	r2, #7
 8007d12:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d14:	e038      	b.n	8007d88 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d135      	bne.n	8007d88 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2207      	movs	r2, #7
 8007d20:	705a      	strb	r2, [r3, #1]
      break;
 8007d22:	e031      	b.n	8007d88 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2207      	movs	r2, #7
 8007d28:	705a      	strb	r2, [r3, #1]
      break;
 8007d2a:	e02d      	b.n	8007d88 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d017      	beq.n	8007d66 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d42:	23ff      	movs	r3, #255	; 0xff
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f903 	bl	8007f50 <USBH_Get_StringDesc>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d102      	bne.n	8007d5a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d58:	e018      	b.n	8007d8c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d115      	bne.n	8007d8c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]
      break;
 8007d64:	e012      	b.n	8007d8c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]
      break;
 8007d6a:	e00f      	b.n	8007d8c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007d6c:	bf00      	nop
 8007d6e:	e00e      	b.n	8007d8e <USBH_HandleEnum+0x3be>
      break;
 8007d70:	bf00      	nop
 8007d72:	e00c      	b.n	8007d8e <USBH_HandleEnum+0x3be>
      break;
 8007d74:	bf00      	nop
 8007d76:	e00a      	b.n	8007d8e <USBH_HandleEnum+0x3be>
      break;
 8007d78:	bf00      	nop
 8007d7a:	e008      	b.n	8007d8e <USBH_HandleEnum+0x3be>
      break;
 8007d7c:	bf00      	nop
 8007d7e:	e006      	b.n	8007d8e <USBH_HandleEnum+0x3be>
      break;
 8007d80:	bf00      	nop
 8007d82:	e004      	b.n	8007d8e <USBH_HandleEnum+0x3be>
      break;
 8007d84:	bf00      	nop
 8007d86:	e002      	b.n	8007d8e <USBH_HandleEnum+0x3be>
      break;
 8007d88:	bf00      	nop
 8007d8a:	e000      	b.n	8007d8e <USBH_HandleEnum+0x3be>
      break;
 8007d8c:	bf00      	nop
  }
  return Status;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f804 	bl	8007dda <USBH_HandleSof>
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b0b      	cmp	r3, #11
 8007dea:	d10a      	bne.n	8007e02 <USBH_HandleSof+0x28>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d005      	beq.n	8007e02 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
  }
}
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007e1a:	bf00      	nop
}
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007e36:	bf00      	nop
}
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 f846 	bl	8008f22 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	791b      	ldrb	r3, [r3, #4]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fe93 	bl	8008bc8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	795b      	ldrb	r3, [r3, #5]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fe8d 	bl	8008bc8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f864 	bl	8007fa6 <USBH_GetDescriptor>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10a      	bne.n	8007efe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ef4:	78fa      	ldrb	r2, [r7, #3]
 8007ef6:	b292      	uxth	r2, r2
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f000 f919 	bl	8008130 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	331c      	adds	r3, #28
 8007f18:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f1a:	887b      	ldrh	r3, [r7, #2]
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f24:	2100      	movs	r1, #0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f83d 	bl	8007fa6 <USBH_GetDescriptor>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d107      	bne.n	8007f46 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007f36:	887b      	ldrh	r3, [r7, #2]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f989 	bl	8008254 <USBH_ParseCfgDesc>
 8007f42:	4603      	mov	r3, r0
 8007f44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	607a      	str	r2, [r7, #4]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	72fb      	strb	r3, [r7, #11]
 8007f60:	4613      	mov	r3, r2
 8007f62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007f64:	7afb      	ldrb	r3, [r7, #11]
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007f6c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007f74:	893b      	ldrh	r3, [r7, #8]
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 f812 	bl	8007fa6 <USBH_GetDescriptor>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d107      	bne.n	8007f9c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f92:	893a      	ldrh	r2, [r7, #8]
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fb26 	bl	80085e8 <USBH_ParseStringDesc>
  }

  return status;
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	607b      	str	r3, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	72fb      	strb	r3, [r7, #11]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	789b      	ldrb	r3, [r3, #2]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d11c      	bne.n	8007ffa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007fc0:	7afb      	ldrb	r3, [r7, #11]
 8007fc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2206      	movs	r2, #6
 8007fd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	893a      	ldrh	r2, [r7, #8]
 8007fd6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007fd8:	893b      	ldrh	r3, [r7, #8]
 8007fda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fe2:	d104      	bne.n	8007fee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f240 4209 	movw	r2, #1033	; 0x409
 8007fea:	829a      	strh	r2, [r3, #20]
 8007fec:	e002      	b.n	8007ff4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8b3a      	ldrh	r2, [r7, #24]
 8007ff8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ffa:	8b3b      	ldrh	r3, [r7, #24]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 fb3f 	bl	8008684 <USBH_CtlReq>
 8008006:	4603      	mov	r3, r0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	789b      	ldrb	r3, [r3, #2]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d10f      	bne.n	8008044 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2205      	movs	r2, #5
 800802e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	b29a      	uxth	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008044:	2200      	movs	r2, #0
 8008046:	2100      	movs	r1, #0
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fb1b 	bl	8008684 <USBH_CtlReq>
 800804e:	4603      	mov	r3, r0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	789b      	ldrb	r3, [r3, #2]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d10e      	bne.n	800808a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2209      	movs	r2, #9
 8008076:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	887a      	ldrh	r2, [r7, #2]
 800807c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800808a:	2200      	movs	r2, #0
 800808c:	2100      	movs	r1, #0
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 faf8 	bl	8008684 <USBH_CtlReq>
 8008094:	4603      	mov	r3, r0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	460b      	mov	r3, r1
 80080a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	789b      	ldrb	r3, [r3, #2]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d10f      	bne.n	80080d2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2203      	movs	r2, #3
 80080bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080d2:	2200      	movs	r2, #0
 80080d4:	2100      	movs	r1, #0
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fad4 	bl	8008684 <USBH_CtlReq>
 80080dc:	4603      	mov	r3, r0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	460b      	mov	r3, r1
 80080f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	789b      	ldrb	r3, [r3, #2]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d10f      	bne.n	800811a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2202      	movs	r2, #2
 80080fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800810c:	78fb      	ldrb	r3, [r7, #3]
 800810e:	b29a      	uxth	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800811a:	2200      	movs	r2, #0
 800811c:	2100      	movs	r1, #0
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fab0 	bl	8008684 <USBH_CtlReq>
 8008124:	4603      	mov	r3, r0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	781a      	ldrb	r2, [r3, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	785a      	ldrb	r2, [r3, #1]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	3302      	adds	r3, #2
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	b29a      	uxth	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	3303      	adds	r3, #3
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	b29b      	uxth	r3, r3
 8008162:	4313      	orrs	r3, r2
 8008164:	b29a      	uxth	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	791a      	ldrb	r2, [r3, #4]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	795a      	ldrb	r2, [r3, #5]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	799a      	ldrb	r2, [r3, #6]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	79da      	ldrb	r2, [r3, #7]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	79db      	ldrb	r3, [r3, #7]
 800818e:	2b20      	cmp	r3, #32
 8008190:	dc0f      	bgt.n	80081b2 <USBH_ParseDevDesc+0x82>
 8008192:	2b08      	cmp	r3, #8
 8008194:	db14      	blt.n	80081c0 <USBH_ParseDevDesc+0x90>
 8008196:	3b08      	subs	r3, #8
 8008198:	4a2d      	ldr	r2, [pc, #180]	; (8008250 <USBH_ParseDevDesc+0x120>)
 800819a:	fa22 f303 	lsr.w	r3, r2, r3
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	bf14      	ite	ne
 80081a6:	2301      	movne	r3, #1
 80081a8:	2300      	moveq	r3, #0
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <USBH_ParseDevDesc+0x86>
 80081b0:	e006      	b.n	80081c0 <USBH_ParseDevDesc+0x90>
 80081b2:	2b40      	cmp	r3, #64	; 0x40
 80081b4:	d104      	bne.n	80081c0 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	79da      	ldrb	r2, [r3, #7]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	71da      	strb	r2, [r3, #7]
      break;
 80081be:	e003      	b.n	80081c8 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2240      	movs	r2, #64	; 0x40
 80081c4:	71da      	strb	r2, [r3, #7]
      break;
 80081c6:	bf00      	nop
  }

  if (length > 8U)
 80081c8:	88fb      	ldrh	r3, [r7, #6]
 80081ca:	2b08      	cmp	r3, #8
 80081cc:	d939      	bls.n	8008242 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	3308      	adds	r3, #8
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	3309      	adds	r3, #9
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	b29b      	uxth	r3, r3
 80081de:	021b      	lsls	r3, r3, #8
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	4313      	orrs	r3, r2
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	330a      	adds	r3, #10
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	330b      	adds	r3, #11
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	021b      	lsls	r3, r3, #8
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	b29a      	uxth	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	330c      	adds	r3, #12
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	b29a      	uxth	r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	330d      	adds	r3, #13
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	b29b      	uxth	r3, r3
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	b29b      	uxth	r3, r3
 800821a:	4313      	orrs	r3, r2
 800821c:	b29a      	uxth	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	7b9a      	ldrb	r2, [r3, #14]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	7bda      	ldrb	r2, [r3, #15]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	7c1a      	ldrb	r2, [r3, #16]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	7c5a      	ldrb	r2, [r3, #17]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	745a      	strb	r2, [r3, #17]
  }
}
 8008242:	bf00      	nop
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	01000101 	.word	0x01000101

08008254 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08c      	sub	sp, #48	; 0x30
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	4613      	mov	r3, r2
 8008260:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008268:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	781a      	ldrb	r2, [r3, #0]
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	785a      	ldrb	r2, [r3, #1]
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	3302      	adds	r3, #2
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	b29a      	uxth	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	3303      	adds	r3, #3
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	021b      	lsls	r3, r3, #8
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	4313      	orrs	r3, r2
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082b0:	bf28      	it	cs
 80082b2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	791a      	ldrb	r2, [r3, #4]
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	795a      	ldrb	r2, [r3, #5]
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	799a      	ldrb	r2, [r3, #6]
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	79da      	ldrb	r2, [r3, #7]
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	7a1a      	ldrb	r2, [r3, #8]
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b09      	cmp	r3, #9
 80082ea:	d002      	beq.n	80082f2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	2209      	movs	r2, #9
 80082f0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	2b09      	cmp	r3, #9
 80082f6:	f240 809d 	bls.w	8008434 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80082fa:	2309      	movs	r3, #9
 80082fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008302:	e081      	b.n	8008408 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008304:	f107 0316 	add.w	r3, r7, #22
 8008308:	4619      	mov	r1, r3
 800830a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800830c:	f000 f99f 	bl	800864e <USBH_GetNextDesc>
 8008310:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	785b      	ldrb	r3, [r3, #1]
 8008316:	2b04      	cmp	r3, #4
 8008318:	d176      	bne.n	8008408 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	2b09      	cmp	r3, #9
 8008320:	d002      	beq.n	8008328 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	2209      	movs	r2, #9
 8008326:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800832c:	221a      	movs	r2, #26
 800832e:	fb02 f303 	mul.w	r3, r2, r3
 8008332:	3308      	adds	r3, #8
 8008334:	6a3a      	ldr	r2, [r7, #32]
 8008336:	4413      	add	r3, r2
 8008338:	3302      	adds	r3, #2
 800833a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800833c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800833e:	69f8      	ldr	r0, [r7, #28]
 8008340:	f000 f87e 	bl	8008440 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800834a:	2300      	movs	r3, #0
 800834c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800834e:	e043      	b.n	80083d8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008350:	f107 0316 	add.w	r3, r7, #22
 8008354:	4619      	mov	r1, r3
 8008356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008358:	f000 f979 	bl	800864e <USBH_GetNextDesc>
 800835c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008360:	785b      	ldrb	r3, [r3, #1]
 8008362:	2b05      	cmp	r3, #5
 8008364:	d138      	bne.n	80083d8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	795b      	ldrb	r3, [r3, #5]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d10f      	bne.n	800838e <USBH_ParseCfgDesc+0x13a>
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	799b      	ldrb	r3, [r3, #6]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d10b      	bne.n	800838e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	79db      	ldrb	r3, [r3, #7]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10f      	bne.n	800839e <USBH_ParseCfgDesc+0x14a>
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b09      	cmp	r3, #9
 8008384:	d00b      	beq.n	800839e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	2209      	movs	r2, #9
 800838a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800838c:	e007      	b.n	800839e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b07      	cmp	r3, #7
 8008394:	d004      	beq.n	80083a0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	2207      	movs	r2, #7
 800839a:	701a      	strb	r2, [r3, #0]
 800839c:	e000      	b.n	80083a0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800839e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80083a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80083a8:	3201      	adds	r2, #1
 80083aa:	00d2      	lsls	r2, r2, #3
 80083ac:	211a      	movs	r1, #26
 80083ae:	fb01 f303 	mul.w	r3, r1, r3
 80083b2:	4413      	add	r3, r2
 80083b4:	3308      	adds	r3, #8
 80083b6:	6a3a      	ldr	r2, [r7, #32]
 80083b8:	4413      	add	r3, r2
 80083ba:	3304      	adds	r3, #4
 80083bc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80083be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083c0:	69b9      	ldr	r1, [r7, #24]
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 f86b 	bl	800849e <USBH_ParseEPDesc>
 80083c8:	4603      	mov	r3, r0
 80083ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80083ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083d2:	3301      	adds	r3, #1
 80083d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	791b      	ldrb	r3, [r3, #4]
 80083dc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d204      	bcs.n	80083ee <USBH_ParseCfgDesc+0x19a>
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	885a      	ldrh	r2, [r3, #2]
 80083e8:	8afb      	ldrh	r3, [r7, #22]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d8b0      	bhi.n	8008350 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	791b      	ldrb	r3, [r3, #4]
 80083f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d201      	bcs.n	80083fe <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e01c      	b.n	8008438 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80083fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008402:	3301      	adds	r3, #1
 8008404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800840c:	2b01      	cmp	r3, #1
 800840e:	d805      	bhi.n	800841c <USBH_ParseCfgDesc+0x1c8>
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	885a      	ldrh	r2, [r3, #2]
 8008414:	8afb      	ldrh	r3, [r7, #22]
 8008416:	429a      	cmp	r2, r3
 8008418:	f63f af74 	bhi.w	8008304 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	791b      	ldrb	r3, [r3, #4]
 8008420:	2b02      	cmp	r3, #2
 8008422:	bf28      	it	cs
 8008424:	2302      	movcs	r3, #2
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800842c:	429a      	cmp	r2, r3
 800842e:	d201      	bcs.n	8008434 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008430:	2303      	movs	r3, #3
 8008432:	e001      	b.n	8008438 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008434:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008438:	4618      	mov	r0, r3
 800843a:	3730      	adds	r7, #48	; 0x30
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	781a      	ldrb	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	785a      	ldrb	r2, [r3, #1]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	789a      	ldrb	r2, [r3, #2]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	78da      	ldrb	r2, [r3, #3]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	791a      	ldrb	r2, [r3, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	795a      	ldrb	r2, [r3, #5]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	799a      	ldrb	r2, [r3, #6]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	79da      	ldrb	r2, [r3, #7]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	7a1a      	ldrb	r2, [r3, #8]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	721a      	strb	r2, [r3, #8]
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800849e:	b480      	push	{r7}
 80084a0:	b087      	sub	sp, #28
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	781a      	ldrb	r2, [r3, #0]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	785a      	ldrb	r2, [r3, #1]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	789a      	ldrb	r2, [r3, #2]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	78da      	ldrb	r2, [r3, #3]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3304      	adds	r3, #4
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	3305      	adds	r3, #5
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	4313      	orrs	r3, r2
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	799a      	ldrb	r2, [r3, #6]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	889b      	ldrh	r3, [r3, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d102      	bne.n	8008500 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80084fa:	2303      	movs	r3, #3
 80084fc:	75fb      	strb	r3, [r7, #23]
 80084fe:	e033      	b.n	8008568 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	889b      	ldrh	r3, [r3, #4]
 8008504:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008508:	f023 0307 	bic.w	r3, r3, #7
 800850c:	b29a      	uxth	r2, r3
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	889b      	ldrh	r3, [r3, #4]
 8008516:	b21a      	sxth	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3304      	adds	r3, #4
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	b299      	uxth	r1, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3305      	adds	r3, #5
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	021b      	lsls	r3, r3, #8
 800852a:	b29b      	uxth	r3, r3
 800852c:	430b      	orrs	r3, r1
 800852e:	b29b      	uxth	r3, r3
 8008530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008534:	2b00      	cmp	r3, #0
 8008536:	d110      	bne.n	800855a <USBH_ParseEPDesc+0xbc>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3304      	adds	r3, #4
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	b299      	uxth	r1, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3305      	adds	r3, #5
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	b29b      	uxth	r3, r3
 8008548:	021b      	lsls	r3, r3, #8
 800854a:	b29b      	uxth	r3, r3
 800854c:	430b      	orrs	r3, r1
 800854e:	b29b      	uxth	r3, r3
 8008550:	b21b      	sxth	r3, r3
 8008552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008556:	b21b      	sxth	r3, r3
 8008558:	e001      	b.n	800855e <USBH_ParseEPDesc+0xc0>
 800855a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800855e:	4313      	orrs	r3, r2
 8008560:	b21b      	sxth	r3, r3
 8008562:	b29a      	uxth	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800856e:	2b00      	cmp	r3, #0
 8008570:	d116      	bne.n	80085a0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	78db      	ldrb	r3, [r3, #3]
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	2b01      	cmp	r3, #1
 800857c:	d005      	beq.n	800858a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	78db      	ldrb	r3, [r3, #3]
 8008582:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008586:	2b03      	cmp	r3, #3
 8008588:	d127      	bne.n	80085da <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	799b      	ldrb	r3, [r3, #6]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <USBH_ParseEPDesc+0xfc>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	799b      	ldrb	r3, [r3, #6]
 8008596:	2b10      	cmp	r3, #16
 8008598:	d91f      	bls.n	80085da <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800859a:	2303      	movs	r3, #3
 800859c:	75fb      	strb	r3, [r7, #23]
 800859e:	e01c      	b.n	80085da <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	78db      	ldrb	r3, [r3, #3]
 80085a4:	f003 0303 	and.w	r3, r3, #3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d10a      	bne.n	80085c2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	799b      	ldrb	r3, [r3, #6]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d003      	beq.n	80085bc <USBH_ParseEPDesc+0x11e>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	799b      	ldrb	r3, [r3, #6]
 80085b8:	2b10      	cmp	r3, #16
 80085ba:	d90e      	bls.n	80085da <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80085bc:	2303      	movs	r3, #3
 80085be:	75fb      	strb	r3, [r7, #23]
 80085c0:	e00b      	b.n	80085da <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	78db      	ldrb	r3, [r3, #3]
 80085c6:	f003 0303 	and.w	r3, r3, #3
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d105      	bne.n	80085da <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	799b      	ldrb	r3, [r3, #6]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80085d6:	2303      	movs	r3, #3
 80085d8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80085da:	7dfb      	ldrb	r3, [r7, #23]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	371c      	adds	r7, #28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	4613      	mov	r3, r2
 80085f4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d120      	bne.n	8008642 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	1e9a      	subs	r2, r3, #2
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	4293      	cmp	r3, r2
 800860a:	bf28      	it	cs
 800860c:	4613      	movcs	r3, r2
 800860e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3302      	adds	r3, #2
 8008614:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008616:	2300      	movs	r3, #0
 8008618:	82fb      	strh	r3, [r7, #22]
 800861a:	e00b      	b.n	8008634 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800861c:	8afb      	ldrh	r3, [r7, #22]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	4413      	add	r3, r2
 8008622:	781a      	ldrb	r2, [r3, #0]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	3301      	adds	r3, #1
 800862c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800862e:	8afb      	ldrh	r3, [r7, #22]
 8008630:	3302      	adds	r3, #2
 8008632:	82fb      	strh	r3, [r7, #22]
 8008634:	8afa      	ldrh	r2, [r7, #22]
 8008636:	8abb      	ldrh	r3, [r7, #20]
 8008638:	429a      	cmp	r2, r3
 800863a:	d3ef      	bcc.n	800861c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2200      	movs	r2, #0
 8008640:	701a      	strb	r2, [r3, #0]
  }
}
 8008642:	bf00      	nop
 8008644:	371c      	adds	r7, #28
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800864e:	b480      	push	{r7}
 8008650:	b085      	sub	sp, #20
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	881a      	ldrh	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	b29b      	uxth	r3, r3
 8008662:	4413      	add	r3, r2
 8008664:	b29a      	uxth	r2, r3
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4413      	add	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008676:	68fb      	ldr	r3, [r7, #12]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008692:	2301      	movs	r3, #1
 8008694:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	789b      	ldrb	r3, [r3, #2]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d002      	beq.n	80086a4 <USBH_CtlReq+0x20>
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d00f      	beq.n	80086c2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80086a2:	e027      	b.n	80086f4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	88fa      	ldrh	r2, [r7, #6]
 80086ae:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2202      	movs	r2, #2
 80086ba:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80086bc:	2301      	movs	r3, #1
 80086be:	75fb      	strb	r3, [r7, #23]
      break;
 80086c0:	e018      	b.n	80086f4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f000 f81c 	bl	8008700 <USBH_HandleControl>
 80086c8:	4603      	mov	r3, r0
 80086ca:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <USBH_CtlReq+0x54>
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d106      	bne.n	80086e6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	761a      	strb	r2, [r3, #24]
      break;
 80086e4:	e005      	b.n	80086f2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d102      	bne.n	80086f2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	709a      	strb	r2, [r3, #2]
      break;
 80086f2:	bf00      	nop
  }
  return status;
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af02      	add	r7, sp, #8
 8008706:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008708:	2301      	movs	r3, #1
 800870a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800870c:	2300      	movs	r3, #0
 800870e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	7e1b      	ldrb	r3, [r3, #24]
 8008714:	3b01      	subs	r3, #1
 8008716:	2b0a      	cmp	r3, #10
 8008718:	f200 8156 	bhi.w	80089c8 <USBH_HandleControl+0x2c8>
 800871c:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <USBH_HandleControl+0x24>)
 800871e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008722:	bf00      	nop
 8008724:	08008751 	.word	0x08008751
 8008728:	0800876b 	.word	0x0800876b
 800872c:	080087d5 	.word	0x080087d5
 8008730:	080087fb 	.word	0x080087fb
 8008734:	08008833 	.word	0x08008833
 8008738:	0800885d 	.word	0x0800885d
 800873c:	080088af 	.word	0x080088af
 8008740:	080088d1 	.word	0x080088d1
 8008744:	0800890d 	.word	0x0800890d
 8008748:	08008933 	.word	0x08008933
 800874c:	08008971 	.word	0x08008971
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f103 0110 	add.w	r1, r3, #16
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	795b      	ldrb	r3, [r3, #5]
 800875a:	461a      	mov	r2, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f943 	bl	80089e8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2202      	movs	r2, #2
 8008766:	761a      	strb	r2, [r3, #24]
      break;
 8008768:	e139      	b.n	80089de <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	795b      	ldrb	r3, [r3, #5]
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fcc5 	bl	8009100 <USBH_LL_GetURBState>
 8008776:	4603      	mov	r3, r0
 8008778:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800877a:	7bbb      	ldrb	r3, [r7, #14]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d11e      	bne.n	80087be <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	7c1b      	ldrb	r3, [r3, #16]
 8008784:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008788:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	8adb      	ldrh	r3, [r3, #22]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008792:	7b7b      	ldrb	r3, [r7, #13]
 8008794:	2b80      	cmp	r3, #128	; 0x80
 8008796:	d103      	bne.n	80087a0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2203      	movs	r2, #3
 800879c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800879e:	e115      	b.n	80089cc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2205      	movs	r2, #5
 80087a4:	761a      	strb	r2, [r3, #24]
      break;
 80087a6:	e111      	b.n	80089cc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80087a8:	7b7b      	ldrb	r3, [r7, #13]
 80087aa:	2b80      	cmp	r3, #128	; 0x80
 80087ac:	d103      	bne.n	80087b6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2209      	movs	r2, #9
 80087b2:	761a      	strb	r2, [r3, #24]
      break;
 80087b4:	e10a      	b.n	80089cc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2207      	movs	r2, #7
 80087ba:	761a      	strb	r2, [r3, #24]
      break;
 80087bc:	e106      	b.n	80089cc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d003      	beq.n	80087cc <USBH_HandleControl+0xcc>
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	f040 8100 	bne.w	80089cc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	220b      	movs	r2, #11
 80087d0:	761a      	strb	r2, [r3, #24]
      break;
 80087d2:	e0fb      	b.n	80089cc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087da:	b29a      	uxth	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6899      	ldr	r1, [r3, #8]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	899a      	ldrh	r2, [r3, #12]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	791b      	ldrb	r3, [r3, #4]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f93a 	bl	8008a66 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2204      	movs	r2, #4
 80087f6:	761a      	strb	r2, [r3, #24]
      break;
 80087f8:	e0f1      	b.n	80089de <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	791b      	ldrb	r3, [r3, #4]
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fc7d 	bl	8009100 <USBH_LL_GetURBState>
 8008806:	4603      	mov	r3, r0
 8008808:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d102      	bne.n	8008816 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2209      	movs	r2, #9
 8008814:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	2b05      	cmp	r3, #5
 800881a:	d102      	bne.n	8008822 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800881c:	2303      	movs	r3, #3
 800881e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008820:	e0d6      	b.n	80089d0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008822:	7bbb      	ldrb	r3, [r7, #14]
 8008824:	2b04      	cmp	r3, #4
 8008826:	f040 80d3 	bne.w	80089d0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	220b      	movs	r2, #11
 800882e:	761a      	strb	r2, [r3, #24]
      break;
 8008830:	e0ce      	b.n	80089d0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6899      	ldr	r1, [r3, #8]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	899a      	ldrh	r2, [r3, #12]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	795b      	ldrb	r3, [r3, #5]
 800883e:	2001      	movs	r0, #1
 8008840:	9000      	str	r0, [sp, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f8ea 	bl	8008a1c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800884e:	b29a      	uxth	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2206      	movs	r2, #6
 8008858:	761a      	strb	r2, [r3, #24]
      break;
 800885a:	e0c0      	b.n	80089de <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	795b      	ldrb	r3, [r3, #5]
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fc4c 	bl	8009100 <USBH_LL_GetURBState>
 8008868:	4603      	mov	r3, r0
 800886a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d103      	bne.n	800887a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2207      	movs	r2, #7
 8008876:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008878:	e0ac      	b.n	80089d4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	2b05      	cmp	r3, #5
 800887e:	d105      	bne.n	800888c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	220c      	movs	r2, #12
 8008884:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008886:	2303      	movs	r3, #3
 8008888:	73fb      	strb	r3, [r7, #15]
      break;
 800888a:	e0a3      	b.n	80089d4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d103      	bne.n	800889a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2205      	movs	r2, #5
 8008896:	761a      	strb	r2, [r3, #24]
      break;
 8008898:	e09c      	b.n	80089d4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	2b04      	cmp	r3, #4
 800889e:	f040 8099 	bne.w	80089d4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	220b      	movs	r2, #11
 80088a6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80088a8:	2302      	movs	r3, #2
 80088aa:	73fb      	strb	r3, [r7, #15]
      break;
 80088ac:	e092      	b.n	80089d4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	791b      	ldrb	r3, [r3, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	2100      	movs	r1, #0
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f8d5 	bl	8008a66 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2208      	movs	r2, #8
 80088cc:	761a      	strb	r2, [r3, #24]

      break;
 80088ce:	e086      	b.n	80089de <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	791b      	ldrb	r3, [r3, #4]
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fc12 	bl	8009100 <USBH_LL_GetURBState>
 80088dc:	4603      	mov	r3, r0
 80088de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d105      	bne.n	80088f2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	220d      	movs	r2, #13
 80088ea:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088f0:	e072      	b.n	80089d8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	d103      	bne.n	8008900 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	220b      	movs	r2, #11
 80088fc:	761a      	strb	r2, [r3, #24]
      break;
 80088fe:	e06b      	b.n	80089d8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	2b05      	cmp	r3, #5
 8008904:	d168      	bne.n	80089d8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008906:	2303      	movs	r3, #3
 8008908:	73fb      	strb	r3, [r7, #15]
      break;
 800890a:	e065      	b.n	80089d8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	795b      	ldrb	r3, [r3, #5]
 8008910:	2201      	movs	r2, #1
 8008912:	9200      	str	r2, [sp, #0]
 8008914:	2200      	movs	r2, #0
 8008916:	2100      	movs	r1, #0
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f87f 	bl	8008a1c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008924:	b29a      	uxth	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	220a      	movs	r2, #10
 800892e:	761a      	strb	r2, [r3, #24]
      break;
 8008930:	e055      	b.n	80089de <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	795b      	ldrb	r3, [r3, #5]
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fbe1 	bl	8009100 <USBH_LL_GetURBState>
 800893e:	4603      	mov	r3, r0
 8008940:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d105      	bne.n	8008954 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	220d      	movs	r2, #13
 8008950:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008952:	e043      	b.n	80089dc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	2b02      	cmp	r3, #2
 8008958:	d103      	bne.n	8008962 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2209      	movs	r2, #9
 800895e:	761a      	strb	r2, [r3, #24]
      break;
 8008960:	e03c      	b.n	80089dc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	2b04      	cmp	r3, #4
 8008966:	d139      	bne.n	80089dc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	220b      	movs	r2, #11
 800896c:	761a      	strb	r2, [r3, #24]
      break;
 800896e:	e035      	b.n	80089dc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	7e5b      	ldrb	r3, [r3, #25]
 8008974:	3301      	adds	r3, #1
 8008976:	b2da      	uxtb	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	765a      	strb	r2, [r3, #25]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	7e5b      	ldrb	r3, [r3, #25]
 8008980:	2b02      	cmp	r3, #2
 8008982:	d806      	bhi.n	8008992 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008990:	e025      	b.n	80089de <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008998:	2106      	movs	r1, #6
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	795b      	ldrb	r3, [r3, #5]
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f90c 	bl	8008bc8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	791b      	ldrb	r3, [r3, #4]
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f906 	bl	8008bc8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80089c2:	2302      	movs	r3, #2
 80089c4:	73fb      	strb	r3, [r7, #15]
      break;
 80089c6:	e00a      	b.n	80089de <USBH_HandleControl+0x2de>

    default:
      break;
 80089c8:	bf00      	nop
 80089ca:	e008      	b.n	80089de <USBH_HandleControl+0x2de>
      break;
 80089cc:	bf00      	nop
 80089ce:	e006      	b.n	80089de <USBH_HandleControl+0x2de>
      break;
 80089d0:	bf00      	nop
 80089d2:	e004      	b.n	80089de <USBH_HandleControl+0x2de>
      break;
 80089d4:	bf00      	nop
 80089d6:	e002      	b.n	80089de <USBH_HandleControl+0x2de>
      break;
 80089d8:	bf00      	nop
 80089da:	e000      	b.n	80089de <USBH_HandleControl+0x2de>
      break;
 80089dc:	bf00      	nop
  }

  return status;
 80089de:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b088      	sub	sp, #32
 80089ec:	af04      	add	r7, sp, #16
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089f6:	79f9      	ldrb	r1, [r7, #7]
 80089f8:	2300      	movs	r3, #0
 80089fa:	9303      	str	r3, [sp, #12]
 80089fc:	2308      	movs	r3, #8
 80089fe:	9302      	str	r3, [sp, #8]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	9301      	str	r3, [sp, #4]
 8008a04:	2300      	movs	r3, #0
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 fb46 	bl	800909e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b088      	sub	sp, #32
 8008a20:	af04      	add	r7, sp, #16
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	4611      	mov	r1, r2
 8008a28:	461a      	mov	r2, r3
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	80fb      	strh	r3, [r7, #6]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a40:	7979      	ldrb	r1, [r7, #5]
 8008a42:	7e3b      	ldrb	r3, [r7, #24]
 8008a44:	9303      	str	r3, [sp, #12]
 8008a46:	88fb      	ldrh	r3, [r7, #6]
 8008a48:	9302      	str	r3, [sp, #8]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	2301      	movs	r3, #1
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	2300      	movs	r3, #0
 8008a54:	2200      	movs	r2, #0
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 fb21 	bl	800909e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b088      	sub	sp, #32
 8008a6a:	af04      	add	r7, sp, #16
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	4611      	mov	r1, r2
 8008a72:	461a      	mov	r2, r3
 8008a74:	460b      	mov	r3, r1
 8008a76:	80fb      	strh	r3, [r7, #6]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a7c:	7979      	ldrb	r1, [r7, #5]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9303      	str	r3, [sp, #12]
 8008a82:	88fb      	ldrh	r3, [r7, #6]
 8008a84:	9302      	str	r3, [sp, #8]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	2201      	movs	r2, #1
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 fb03 	bl	800909e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a98:	2300      	movs	r3, #0

}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b088      	sub	sp, #32
 8008aa6:	af04      	add	r7, sp, #16
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	4611      	mov	r1, r2
 8008aae:	461a      	mov	r2, r3
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	80fb      	strh	r3, [r7, #6]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ac6:	7979      	ldrb	r1, [r7, #5]
 8008ac8:	7e3b      	ldrb	r3, [r7, #24]
 8008aca:	9303      	str	r3, [sp, #12]
 8008acc:	88fb      	ldrh	r3, [r7, #6]
 8008ace:	9302      	str	r3, [sp, #8]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	2302      	movs	r3, #2
 8008ada:	2200      	movs	r2, #0
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 fade 	bl	800909e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af04      	add	r7, sp, #16
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	4611      	mov	r1, r2
 8008af8:	461a      	mov	r2, r3
 8008afa:	460b      	mov	r3, r1
 8008afc:	80fb      	strh	r3, [r7, #6]
 8008afe:	4613      	mov	r3, r2
 8008b00:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b02:	7979      	ldrb	r1, [r7, #5]
 8008b04:	2300      	movs	r3, #0
 8008b06:	9303      	str	r3, [sp, #12]
 8008b08:	88fb      	ldrh	r3, [r7, #6]
 8008b0a:	9302      	str	r3, [sp, #8]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	2301      	movs	r3, #1
 8008b12:	9300      	str	r3, [sp, #0]
 8008b14:	2302      	movs	r3, #2
 8008b16:	2201      	movs	r2, #1
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 fac0 	bl	800909e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af04      	add	r7, sp, #16
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	4608      	mov	r0, r1
 8008b32:	4611      	mov	r1, r2
 8008b34:	461a      	mov	r2, r3
 8008b36:	4603      	mov	r3, r0
 8008b38:	70fb      	strb	r3, [r7, #3]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	70bb      	strb	r3, [r7, #2]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b42:	7878      	ldrb	r0, [r7, #1]
 8008b44:	78ba      	ldrb	r2, [r7, #2]
 8008b46:	78f9      	ldrb	r1, [r7, #3]
 8008b48:	8b3b      	ldrh	r3, [r7, #24]
 8008b4a:	9302      	str	r3, [sp, #8]
 8008b4c:	7d3b      	ldrb	r3, [r7, #20]
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	7c3b      	ldrb	r3, [r7, #16]
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	4603      	mov	r3, r0
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fa53 	bl	8009002 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b082      	sub	sp, #8
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	460b      	mov	r3, r1
 8008b70:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa72 	bl	8009060 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	460b      	mov	r3, r1
 8008b90:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f836 	bl	8008c04 <USBH_GetFreePipe>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008b9c:	89fb      	ldrh	r3, [r7, #14]
 8008b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00a      	beq.n	8008bbc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008ba6:	78fa      	ldrb	r2, [r7, #3]
 8008ba8:	89fb      	ldrh	r3, [r7, #14]
 8008baa:	f003 030f 	and.w	r3, r3, #15
 8008bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	33e0      	adds	r3, #224	; 0xe0
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	440b      	add	r3, r1
 8008bba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008bbc:	89fb      	ldrh	r3, [r7, #14]
 8008bbe:	b2db      	uxtb	r3, r3
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	2b0f      	cmp	r3, #15
 8008bd8:	d80d      	bhi.n	8008bf6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008bda:	78fb      	ldrb	r3, [r7, #3]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	33e0      	adds	r3, #224	; 0xe0
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	78fb      	ldrb	r3, [r7, #3]
 8008be8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008bec:	6879      	ldr	r1, [r7, #4]
 8008bee:	33e0      	adds	r3, #224	; 0xe0
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	440b      	add	r3, r1
 8008bf4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]
 8008c14:	e00f      	b.n	8008c36 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	33e0      	adds	r3, #224	; 0xe0
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	e007      	b.n	8008c40 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	3301      	adds	r3, #1
 8008c34:	73fb      	strb	r3, [r7, #15]
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	2b0f      	cmp	r3, #15
 8008c3a:	d9ec      	bls.n	8008c16 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008c50:	2201      	movs	r2, #1
 8008c52:	490e      	ldr	r1, [pc, #56]	; (8008c8c <MX_USB_HOST_Init+0x40>)
 8008c54:	480e      	ldr	r0, [pc, #56]	; (8008c90 <MX_USB_HOST_Init+0x44>)
 8008c56:	f7fe fba5 	bl	80073a4 <USBH_Init>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008c60:	f7f7 ff22 	bl	8000aa8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008c64:	490b      	ldr	r1, [pc, #44]	; (8008c94 <MX_USB_HOST_Init+0x48>)
 8008c66:	480a      	ldr	r0, [pc, #40]	; (8008c90 <MX_USB_HOST_Init+0x44>)
 8008c68:	f7fe fc2a 	bl	80074c0 <USBH_RegisterClass>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008c72:	f7f7 ff19 	bl	8000aa8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008c76:	4806      	ldr	r0, [pc, #24]	; (8008c90 <MX_USB_HOST_Init+0x44>)
 8008c78:	f7fe fcae 	bl	80075d8 <USBH_Start>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008c82:	f7f7 ff11 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008c86:	bf00      	nop
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	08008cad 	.word	0x08008cad
 8008c90:	20000228 	.word	0x20000228
 8008c94:	20000010 	.word	0x20000010

08008c98 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008c9c:	4802      	ldr	r0, [pc, #8]	; (8008ca8 <MX_USB_HOST_Process+0x10>)
 8008c9e:	f7fe fcab 	bl	80075f8 <USBH_Process>
}
 8008ca2:	bf00      	nop
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000228 	.word	0x20000228

08008cac <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d819      	bhi.n	8008cf4 <USBH_UserProcess+0x48>
 8008cc0:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <USBH_UserProcess+0x1c>)
 8008cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc6:	bf00      	nop
 8008cc8:	08008cf5 	.word	0x08008cf5
 8008ccc:	08008ce5 	.word	0x08008ce5
 8008cd0:	08008cf5 	.word	0x08008cf5
 8008cd4:	08008ced 	.word	0x08008ced
 8008cd8:	08008cdd 	.word	0x08008cdd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008cdc:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <USBH_UserProcess+0x58>)
 8008cde:	2203      	movs	r2, #3
 8008ce0:	701a      	strb	r2, [r3, #0]
  break;
 8008ce2:	e008      	b.n	8008cf6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008ce4:	4b07      	ldr	r3, [pc, #28]	; (8008d04 <USBH_UserProcess+0x58>)
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	701a      	strb	r2, [r3, #0]
  break;
 8008cea:	e004      	b.n	8008cf6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008cec:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <USBH_UserProcess+0x58>)
 8008cee:	2201      	movs	r2, #1
 8008cf0:	701a      	strb	r2, [r3, #0]
  break;
 8008cf2:	e000      	b.n	8008cf6 <USBH_UserProcess+0x4a>

  default:
  break;
 8008cf4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	20000600 	.word	0x20000600

08008d08 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	; 0x28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d10:	f107 0314 	add.w	r3, r7, #20
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	605a      	str	r2, [r3, #4]
 8008d1a:	609a      	str	r2, [r3, #8]
 8008d1c:	60da      	str	r2, [r3, #12]
 8008d1e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d28:	d147      	bne.n	8008dba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	613b      	str	r3, [r7, #16]
 8008d2e:	4b25      	ldr	r3, [pc, #148]	; (8008dc4 <HAL_HCD_MspInit+0xbc>)
 8008d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d32:	4a24      	ldr	r2, [pc, #144]	; (8008dc4 <HAL_HCD_MspInit+0xbc>)
 8008d34:	f043 0301 	orr.w	r3, r3, #1
 8008d38:	6313      	str	r3, [r2, #48]	; 0x30
 8008d3a:	4b22      	ldr	r3, [pc, #136]	; (8008dc4 <HAL_HCD_MspInit+0xbc>)
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	613b      	str	r3, [r7, #16]
 8008d44:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008d54:	f107 0314 	add.w	r3, r7, #20
 8008d58:	4619      	mov	r1, r3
 8008d5a:	481b      	ldr	r0, [pc, #108]	; (8008dc8 <HAL_HCD_MspInit+0xc0>)
 8008d5c:	f7f8 fb76 	bl	800144c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008d60:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d66:	2302      	movs	r3, #2
 8008d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d72:	230a      	movs	r3, #10
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d76:	f107 0314 	add.w	r3, r7, #20
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	4812      	ldr	r0, [pc, #72]	; (8008dc8 <HAL_HCD_MspInit+0xc0>)
 8008d7e:	f7f8 fb65 	bl	800144c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d82:	4b10      	ldr	r3, [pc, #64]	; (8008dc4 <HAL_HCD_MspInit+0xbc>)
 8008d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d86:	4a0f      	ldr	r2, [pc, #60]	; (8008dc4 <HAL_HCD_MspInit+0xbc>)
 8008d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d8c:	6353      	str	r3, [r2, #52]	; 0x34
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	4b0c      	ldr	r3, [pc, #48]	; (8008dc4 <HAL_HCD_MspInit+0xbc>)
 8008d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d96:	4a0b      	ldr	r2, [pc, #44]	; (8008dc4 <HAL_HCD_MspInit+0xbc>)
 8008d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8008d9e:	4b09      	ldr	r3, [pc, #36]	; (8008dc4 <HAL_HCD_MspInit+0xbc>)
 8008da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008daa:	2200      	movs	r2, #0
 8008dac:	2100      	movs	r1, #0
 8008dae:	2043      	movs	r0, #67	; 0x43
 8008db0:	f7f8 fa83 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008db4:	2043      	movs	r0, #67	; 0x43
 8008db6:	f7f8 fa9c 	bl	80012f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008dba:	bf00      	nop
 8008dbc:	3728      	adds	r7, #40	; 0x28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40023800 	.word	0x40023800
 8008dc8:	40020000 	.word	0x40020000

08008dcc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe ffeb 	bl	8007db6 <USBH_LL_IncTimer>
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff f823 	bl	8007e42 <USBH_LL_Connect>
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff f82c 	bl	8007e70 <USBH_LL_Disconnect>
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fe ffdd 	bl	8007e0a <USBH_LL_PortEnabled>
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe ffdd 	bl	8007e26 <USBH_LL_PortDisabled>
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d12a      	bne.n	8008edc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008e86:	4a18      	ldr	r2, [pc, #96]	; (8008ee8 <USBH_LL_Init+0x74>)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a15      	ldr	r2, [pc, #84]	; (8008ee8 <USBH_LL_Init+0x74>)
 8008e92:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e96:	4b14      	ldr	r3, [pc, #80]	; (8008ee8 <USBH_LL_Init+0x74>)
 8008e98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e9c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008e9e:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <USBH_LL_Init+0x74>)
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008ea4:	4b10      	ldr	r3, [pc, #64]	; (8008ee8 <USBH_LL_Init+0x74>)
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <USBH_LL_Init+0x74>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008eb0:	4b0d      	ldr	r3, [pc, #52]	; (8008ee8 <USBH_LL_Init+0x74>)
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008eb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <USBH_LL_Init+0x74>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008ebc:	480a      	ldr	r0, [pc, #40]	; (8008ee8 <USBH_LL_Init+0x74>)
 8008ebe:	f7f8 fcd0 	bl	8001862 <HAL_HCD_Init>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008ec8:	f7f7 fdee 	bl	8000aa8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ecc:	4806      	ldr	r0, [pc, #24]	; (8008ee8 <USBH_LL_Init+0x74>)
 8008ece:	f7f9 f8b4 	bl	800203a <HAL_HCD_GetCurrentFrame>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7fe ff5e 	bl	8007d98 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000604 	.word	0x20000604

08008eec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7f9 f823 	bl	8001f4e <HAL_HCD_Start>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 f95c 	bl	80091cc <USBH_Get_USB_Status>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7f9 f82b 	bl	8001f94 <HAL_HCD_Stop>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f941 	bl	80091cc <USBH_Get_USB_Status>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008f60:	2301      	movs	r3, #1
 8008f62:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7f9 f873 	bl	8002056 <HAL_HCD_GetCurrentSpeed>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d00c      	beq.n	8008f90 <USBH_LL_GetSpeed+0x38>
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d80d      	bhi.n	8008f96 <USBH_LL_GetSpeed+0x3e>
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <USBH_LL_GetSpeed+0x2c>
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d003      	beq.n	8008f8a <USBH_LL_GetSpeed+0x32>
 8008f82:	e008      	b.n	8008f96 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
    break;
 8008f88:	e008      	b.n	8008f9c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f8e:	e005      	b.n	8008f9c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008f90:	2302      	movs	r3, #2
 8008f92:	73fb      	strb	r3, [r7, #15]
    break;
 8008f94:	e002      	b.n	8008f9c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008f96:	2301      	movs	r3, #1
 8008f98:	73fb      	strb	r3, [r7, #15]
    break;
 8008f9a:	bf00      	nop
  }
  return  speed;
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7f9 f806 	bl	8001fce <HAL_HCD_ResetPort>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f8ff 	bl	80091cc <USBH_Get_USB_Status>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fee:	78fa      	ldrb	r2, [r7, #3]
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7f9 f80d 	bl	8002012 <HAL_HCD_HC_GetXferCount>
 8008ff8:	4603      	mov	r3, r0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009002:	b590      	push	{r4, r7, lr}
 8009004:	b089      	sub	sp, #36	; 0x24
 8009006:	af04      	add	r7, sp, #16
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	4608      	mov	r0, r1
 800900c:	4611      	mov	r1, r2
 800900e:	461a      	mov	r2, r3
 8009010:	4603      	mov	r3, r0
 8009012:	70fb      	strb	r3, [r7, #3]
 8009014:	460b      	mov	r3, r1
 8009016:	70bb      	strb	r3, [r7, #2]
 8009018:	4613      	mov	r3, r2
 800901a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800902a:	787c      	ldrb	r4, [r7, #1]
 800902c:	78ba      	ldrb	r2, [r7, #2]
 800902e:	78f9      	ldrb	r1, [r7, #3]
 8009030:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009032:	9302      	str	r3, [sp, #8]
 8009034:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	4623      	mov	r3, r4
 8009042:	f7f8 fc70 	bl	8001926 <HAL_HCD_HC_Init>
 8009046:	4603      	mov	r3, r0
 8009048:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	4618      	mov	r0, r3
 800904e:	f000 f8bd 	bl	80091cc <USBH_Get_USB_Status>
 8009052:	4603      	mov	r3, r0
 8009054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009056:	7bbb      	ldrb	r3, [r7, #14]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	bd90      	pop	{r4, r7, pc}

08009060 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	460b      	mov	r3, r1
 800906a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800907a:	78fa      	ldrb	r2, [r7, #3]
 800907c:	4611      	mov	r1, r2
 800907e:	4618      	mov	r0, r3
 8009080:	f7f8 fce0 	bl	8001a44 <HAL_HCD_HC_Halt>
 8009084:	4603      	mov	r3, r0
 8009086:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f89e 	bl	80091cc <USBH_Get_USB_Status>
 8009090:	4603      	mov	r3, r0
 8009092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009094:	7bbb      	ldrb	r3, [r7, #14]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800909e:	b590      	push	{r4, r7, lr}
 80090a0:	b089      	sub	sp, #36	; 0x24
 80090a2:	af04      	add	r7, sp, #16
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	4608      	mov	r0, r1
 80090a8:	4611      	mov	r1, r2
 80090aa:	461a      	mov	r2, r3
 80090ac:	4603      	mov	r3, r0
 80090ae:	70fb      	strb	r3, [r7, #3]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70bb      	strb	r3, [r7, #2]
 80090b4:	4613      	mov	r3, r2
 80090b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80090c6:	787c      	ldrb	r4, [r7, #1]
 80090c8:	78ba      	ldrb	r2, [r7, #2]
 80090ca:	78f9      	ldrb	r1, [r7, #3]
 80090cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090d0:	9303      	str	r3, [sp, #12]
 80090d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80090d4:	9302      	str	r3, [sp, #8]
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	4623      	mov	r3, r4
 80090e2:	f7f8 fcd3 	bl	8001a8c <HAL_HCD_HC_SubmitRequest>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f86d 	bl	80091cc <USBH_Get_USB_Status>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd90      	pop	{r4, r7, pc}

08009100 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009112:	78fa      	ldrb	r2, [r7, #3]
 8009114:	4611      	mov	r1, r2
 8009116:	4618      	mov	r0, r3
 8009118:	f7f8 ff67 	bl	8001fea <HAL_HCD_HC_GetURBState>
 800911c:	4603      	mov	r3, r0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009138:	2b01      	cmp	r3, #1
 800913a:	d103      	bne.n	8009144 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800913c:	78fb      	ldrb	r3, [r7, #3]
 800913e:	4618      	mov	r0, r3
 8009140:	f000 f870 	bl	8009224 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009144:	20c8      	movs	r0, #200	; 0xc8
 8009146:	f7f7 ffb9 	bl	80010bc <HAL_Delay>
  return USBH_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	460b      	mov	r3, r1
 800915e:	70fb      	strb	r3, [r7, #3]
 8009160:	4613      	mov	r3, r2
 8009162:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800916a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	212c      	movs	r1, #44	; 0x2c
 8009172:	fb01 f303 	mul.w	r3, r1, r3
 8009176:	4413      	add	r3, r2
 8009178:	333b      	adds	r3, #59	; 0x3b
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d009      	beq.n	8009194 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	212c      	movs	r1, #44	; 0x2c
 8009186:	fb01 f303 	mul.w	r3, r1, r3
 800918a:	4413      	add	r3, r2
 800918c:	3354      	adds	r3, #84	; 0x54
 800918e:	78ba      	ldrb	r2, [r7, #2]
 8009190:	701a      	strb	r2, [r3, #0]
 8009192:	e008      	b.n	80091a6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	212c      	movs	r1, #44	; 0x2c
 800919a:	fb01 f303 	mul.w	r3, r1, r3
 800919e:	4413      	add	r3, r2
 80091a0:	3355      	adds	r3, #85	; 0x55
 80091a2:	78ba      	ldrb	r2, [r7, #2]
 80091a4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7f7 ff7d 	bl	80010bc <HAL_Delay>
}
 80091c2:	bf00      	nop
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
	...

080091cc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	4603      	mov	r3, r0
 80091d4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d817      	bhi.n	8009210 <USBH_Get_USB_Status+0x44>
 80091e0:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <USBH_Get_USB_Status+0x1c>)
 80091e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e6:	bf00      	nop
 80091e8:	080091f9 	.word	0x080091f9
 80091ec:	080091ff 	.word	0x080091ff
 80091f0:	08009205 	.word	0x08009205
 80091f4:	0800920b 	.word	0x0800920b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	73fb      	strb	r3, [r7, #15]
    break;
 80091fc:	e00b      	b.n	8009216 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80091fe:	2302      	movs	r3, #2
 8009200:	73fb      	strb	r3, [r7, #15]
    break;
 8009202:	e008      	b.n	8009216 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009204:	2301      	movs	r3, #1
 8009206:	73fb      	strb	r3, [r7, #15]
    break;
 8009208:	e005      	b.n	8009216 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800920a:	2302      	movs	r3, #2
 800920c:	73fb      	strb	r3, [r7, #15]
    break;
 800920e:	e002      	b.n	8009216 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009210:	2302      	movs	r3, #2
 8009212:	73fb      	strb	r3, [r7, #15]
    break;
 8009214:	bf00      	nop
  }
  return usb_status;
 8009216:	7bfb      	ldrb	r3, [r7, #15]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800922e:	79fb      	ldrb	r3, [r7, #7]
 8009230:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]
 800923c:	e001      	b.n	8009242 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800923e:	2301      	movs	r3, #1
 8009240:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	461a      	mov	r2, r3
 8009246:	2101      	movs	r1, #1
 8009248:	4803      	ldr	r0, [pc, #12]	; (8009258 <MX_DriverVbusFS+0x34>)
 800924a:	f7f8 fab3 	bl	80017b4 <HAL_GPIO_WritePin>
}
 800924e:	bf00      	nop
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	40020800 	.word	0x40020800

0800925c <malloc>:
 800925c:	4b02      	ldr	r3, [pc, #8]	; (8009268 <malloc+0xc>)
 800925e:	4601      	mov	r1, r0
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	f000 b82b 	b.w	80092bc <_malloc_r>
 8009266:	bf00      	nop
 8009268:	2000007c 	.word	0x2000007c

0800926c <free>:
 800926c:	4b02      	ldr	r3, [pc, #8]	; (8009278 <free+0xc>)
 800926e:	4601      	mov	r1, r0
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	f000 b8f3 	b.w	800945c <_free_r>
 8009276:	bf00      	nop
 8009278:	2000007c 	.word	0x2000007c

0800927c <sbrk_aligned>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	4e0e      	ldr	r6, [pc, #56]	; (80092b8 <sbrk_aligned+0x3c>)
 8009280:	460c      	mov	r4, r1
 8009282:	6831      	ldr	r1, [r6, #0]
 8009284:	4605      	mov	r5, r0
 8009286:	b911      	cbnz	r1, 800928e <sbrk_aligned+0x12>
 8009288:	f000 f8ac 	bl	80093e4 <_sbrk_r>
 800928c:	6030      	str	r0, [r6, #0]
 800928e:	4621      	mov	r1, r4
 8009290:	4628      	mov	r0, r5
 8009292:	f000 f8a7 	bl	80093e4 <_sbrk_r>
 8009296:	1c43      	adds	r3, r0, #1
 8009298:	d00a      	beq.n	80092b0 <sbrk_aligned+0x34>
 800929a:	1cc4      	adds	r4, r0, #3
 800929c:	f024 0403 	bic.w	r4, r4, #3
 80092a0:	42a0      	cmp	r0, r4
 80092a2:	d007      	beq.n	80092b4 <sbrk_aligned+0x38>
 80092a4:	1a21      	subs	r1, r4, r0
 80092a6:	4628      	mov	r0, r5
 80092a8:	f000 f89c 	bl	80093e4 <_sbrk_r>
 80092ac:	3001      	adds	r0, #1
 80092ae:	d101      	bne.n	80092b4 <sbrk_aligned+0x38>
 80092b0:	f04f 34ff 	mov.w	r4, #4294967295
 80092b4:	4620      	mov	r0, r4
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	2000090c 	.word	0x2000090c

080092bc <_malloc_r>:
 80092bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c0:	1ccd      	adds	r5, r1, #3
 80092c2:	f025 0503 	bic.w	r5, r5, #3
 80092c6:	3508      	adds	r5, #8
 80092c8:	2d0c      	cmp	r5, #12
 80092ca:	bf38      	it	cc
 80092cc:	250c      	movcc	r5, #12
 80092ce:	2d00      	cmp	r5, #0
 80092d0:	4607      	mov	r7, r0
 80092d2:	db01      	blt.n	80092d8 <_malloc_r+0x1c>
 80092d4:	42a9      	cmp	r1, r5
 80092d6:	d905      	bls.n	80092e4 <_malloc_r+0x28>
 80092d8:	230c      	movs	r3, #12
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	2600      	movs	r6, #0
 80092de:	4630      	mov	r0, r6
 80092e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80093b8 <_malloc_r+0xfc>
 80092e8:	f000 f868 	bl	80093bc <__malloc_lock>
 80092ec:	f8d8 3000 	ldr.w	r3, [r8]
 80092f0:	461c      	mov	r4, r3
 80092f2:	bb5c      	cbnz	r4, 800934c <_malloc_r+0x90>
 80092f4:	4629      	mov	r1, r5
 80092f6:	4638      	mov	r0, r7
 80092f8:	f7ff ffc0 	bl	800927c <sbrk_aligned>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	4604      	mov	r4, r0
 8009300:	d155      	bne.n	80093ae <_malloc_r+0xf2>
 8009302:	f8d8 4000 	ldr.w	r4, [r8]
 8009306:	4626      	mov	r6, r4
 8009308:	2e00      	cmp	r6, #0
 800930a:	d145      	bne.n	8009398 <_malloc_r+0xdc>
 800930c:	2c00      	cmp	r4, #0
 800930e:	d048      	beq.n	80093a2 <_malloc_r+0xe6>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	4631      	mov	r1, r6
 8009314:	4638      	mov	r0, r7
 8009316:	eb04 0903 	add.w	r9, r4, r3
 800931a:	f000 f863 	bl	80093e4 <_sbrk_r>
 800931e:	4581      	cmp	r9, r0
 8009320:	d13f      	bne.n	80093a2 <_malloc_r+0xe6>
 8009322:	6821      	ldr	r1, [r4, #0]
 8009324:	1a6d      	subs	r5, r5, r1
 8009326:	4629      	mov	r1, r5
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff ffa7 	bl	800927c <sbrk_aligned>
 800932e:	3001      	adds	r0, #1
 8009330:	d037      	beq.n	80093a2 <_malloc_r+0xe6>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	442b      	add	r3, r5
 8009336:	6023      	str	r3, [r4, #0]
 8009338:	f8d8 3000 	ldr.w	r3, [r8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d038      	beq.n	80093b2 <_malloc_r+0xf6>
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	42a2      	cmp	r2, r4
 8009344:	d12b      	bne.n	800939e <_malloc_r+0xe2>
 8009346:	2200      	movs	r2, #0
 8009348:	605a      	str	r2, [r3, #4]
 800934a:	e00f      	b.n	800936c <_malloc_r+0xb0>
 800934c:	6822      	ldr	r2, [r4, #0]
 800934e:	1b52      	subs	r2, r2, r5
 8009350:	d41f      	bmi.n	8009392 <_malloc_r+0xd6>
 8009352:	2a0b      	cmp	r2, #11
 8009354:	d917      	bls.n	8009386 <_malloc_r+0xca>
 8009356:	1961      	adds	r1, r4, r5
 8009358:	42a3      	cmp	r3, r4
 800935a:	6025      	str	r5, [r4, #0]
 800935c:	bf18      	it	ne
 800935e:	6059      	strne	r1, [r3, #4]
 8009360:	6863      	ldr	r3, [r4, #4]
 8009362:	bf08      	it	eq
 8009364:	f8c8 1000 	streq.w	r1, [r8]
 8009368:	5162      	str	r2, [r4, r5]
 800936a:	604b      	str	r3, [r1, #4]
 800936c:	4638      	mov	r0, r7
 800936e:	f104 060b 	add.w	r6, r4, #11
 8009372:	f000 f829 	bl	80093c8 <__malloc_unlock>
 8009376:	f026 0607 	bic.w	r6, r6, #7
 800937a:	1d23      	adds	r3, r4, #4
 800937c:	1af2      	subs	r2, r6, r3
 800937e:	d0ae      	beq.n	80092de <_malloc_r+0x22>
 8009380:	1b9b      	subs	r3, r3, r6
 8009382:	50a3      	str	r3, [r4, r2]
 8009384:	e7ab      	b.n	80092de <_malloc_r+0x22>
 8009386:	42a3      	cmp	r3, r4
 8009388:	6862      	ldr	r2, [r4, #4]
 800938a:	d1dd      	bne.n	8009348 <_malloc_r+0x8c>
 800938c:	f8c8 2000 	str.w	r2, [r8]
 8009390:	e7ec      	b.n	800936c <_malloc_r+0xb0>
 8009392:	4623      	mov	r3, r4
 8009394:	6864      	ldr	r4, [r4, #4]
 8009396:	e7ac      	b.n	80092f2 <_malloc_r+0x36>
 8009398:	4634      	mov	r4, r6
 800939a:	6876      	ldr	r6, [r6, #4]
 800939c:	e7b4      	b.n	8009308 <_malloc_r+0x4c>
 800939e:	4613      	mov	r3, r2
 80093a0:	e7cc      	b.n	800933c <_malloc_r+0x80>
 80093a2:	230c      	movs	r3, #12
 80093a4:	603b      	str	r3, [r7, #0]
 80093a6:	4638      	mov	r0, r7
 80093a8:	f000 f80e 	bl	80093c8 <__malloc_unlock>
 80093ac:	e797      	b.n	80092de <_malloc_r+0x22>
 80093ae:	6025      	str	r5, [r4, #0]
 80093b0:	e7dc      	b.n	800936c <_malloc_r+0xb0>
 80093b2:	605b      	str	r3, [r3, #4]
 80093b4:	deff      	udf	#255	; 0xff
 80093b6:	bf00      	nop
 80093b8:	20000908 	.word	0x20000908

080093bc <__malloc_lock>:
 80093bc:	4801      	ldr	r0, [pc, #4]	; (80093c4 <__malloc_lock+0x8>)
 80093be:	f000 b84b 	b.w	8009458 <__retarget_lock_acquire_recursive>
 80093c2:	bf00      	nop
 80093c4:	20000a4c 	.word	0x20000a4c

080093c8 <__malloc_unlock>:
 80093c8:	4801      	ldr	r0, [pc, #4]	; (80093d0 <__malloc_unlock+0x8>)
 80093ca:	f000 b846 	b.w	800945a <__retarget_lock_release_recursive>
 80093ce:	bf00      	nop
 80093d0:	20000a4c 	.word	0x20000a4c

080093d4 <memset>:
 80093d4:	4402      	add	r2, r0
 80093d6:	4603      	mov	r3, r0
 80093d8:	4293      	cmp	r3, r2
 80093da:	d100      	bne.n	80093de <memset+0xa>
 80093dc:	4770      	bx	lr
 80093de:	f803 1b01 	strb.w	r1, [r3], #1
 80093e2:	e7f9      	b.n	80093d8 <memset+0x4>

080093e4 <_sbrk_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4d06      	ldr	r5, [pc, #24]	; (8009400 <_sbrk_r+0x1c>)
 80093e8:	2300      	movs	r3, #0
 80093ea:	4604      	mov	r4, r0
 80093ec:	4608      	mov	r0, r1
 80093ee:	602b      	str	r3, [r5, #0]
 80093f0:	f7f7 fd80 	bl	8000ef4 <_sbrk>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d102      	bne.n	80093fe <_sbrk_r+0x1a>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	b103      	cbz	r3, 80093fe <_sbrk_r+0x1a>
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	20000a48 	.word	0x20000a48

08009404 <__errno>:
 8009404:	4b01      	ldr	r3, [pc, #4]	; (800940c <__errno+0x8>)
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	2000007c 	.word	0x2000007c

08009410 <__libc_init_array>:
 8009410:	b570      	push	{r4, r5, r6, lr}
 8009412:	4d0d      	ldr	r5, [pc, #52]	; (8009448 <__libc_init_array+0x38>)
 8009414:	4c0d      	ldr	r4, [pc, #52]	; (800944c <__libc_init_array+0x3c>)
 8009416:	1b64      	subs	r4, r4, r5
 8009418:	10a4      	asrs	r4, r4, #2
 800941a:	2600      	movs	r6, #0
 800941c:	42a6      	cmp	r6, r4
 800941e:	d109      	bne.n	8009434 <__libc_init_array+0x24>
 8009420:	4d0b      	ldr	r5, [pc, #44]	; (8009450 <__libc_init_array+0x40>)
 8009422:	4c0c      	ldr	r4, [pc, #48]	; (8009454 <__libc_init_array+0x44>)
 8009424:	f000 f866 	bl	80094f4 <_init>
 8009428:	1b64      	subs	r4, r4, r5
 800942a:	10a4      	asrs	r4, r4, #2
 800942c:	2600      	movs	r6, #0
 800942e:	42a6      	cmp	r6, r4
 8009430:	d105      	bne.n	800943e <__libc_init_array+0x2e>
 8009432:	bd70      	pop	{r4, r5, r6, pc}
 8009434:	f855 3b04 	ldr.w	r3, [r5], #4
 8009438:	4798      	blx	r3
 800943a:	3601      	adds	r6, #1
 800943c:	e7ee      	b.n	800941c <__libc_init_array+0xc>
 800943e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009442:	4798      	blx	r3
 8009444:	3601      	adds	r6, #1
 8009446:	e7f2      	b.n	800942e <__libc_init_array+0x1e>
 8009448:	08009530 	.word	0x08009530
 800944c:	08009530 	.word	0x08009530
 8009450:	08009530 	.word	0x08009530
 8009454:	08009534 	.word	0x08009534

08009458 <__retarget_lock_acquire_recursive>:
 8009458:	4770      	bx	lr

0800945a <__retarget_lock_release_recursive>:
 800945a:	4770      	bx	lr

0800945c <_free_r>:
 800945c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800945e:	2900      	cmp	r1, #0
 8009460:	d044      	beq.n	80094ec <_free_r+0x90>
 8009462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009466:	9001      	str	r0, [sp, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	f1a1 0404 	sub.w	r4, r1, #4
 800946e:	bfb8      	it	lt
 8009470:	18e4      	addlt	r4, r4, r3
 8009472:	f7ff ffa3 	bl	80093bc <__malloc_lock>
 8009476:	4a1e      	ldr	r2, [pc, #120]	; (80094f0 <_free_r+0x94>)
 8009478:	9801      	ldr	r0, [sp, #4]
 800947a:	6813      	ldr	r3, [r2, #0]
 800947c:	b933      	cbnz	r3, 800948c <_free_r+0x30>
 800947e:	6063      	str	r3, [r4, #4]
 8009480:	6014      	str	r4, [r2, #0]
 8009482:	b003      	add	sp, #12
 8009484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009488:	f7ff bf9e 	b.w	80093c8 <__malloc_unlock>
 800948c:	42a3      	cmp	r3, r4
 800948e:	d908      	bls.n	80094a2 <_free_r+0x46>
 8009490:	6825      	ldr	r5, [r4, #0]
 8009492:	1961      	adds	r1, r4, r5
 8009494:	428b      	cmp	r3, r1
 8009496:	bf01      	itttt	eq
 8009498:	6819      	ldreq	r1, [r3, #0]
 800949a:	685b      	ldreq	r3, [r3, #4]
 800949c:	1949      	addeq	r1, r1, r5
 800949e:	6021      	streq	r1, [r4, #0]
 80094a0:	e7ed      	b.n	800947e <_free_r+0x22>
 80094a2:	461a      	mov	r2, r3
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	b10b      	cbz	r3, 80094ac <_free_r+0x50>
 80094a8:	42a3      	cmp	r3, r4
 80094aa:	d9fa      	bls.n	80094a2 <_free_r+0x46>
 80094ac:	6811      	ldr	r1, [r2, #0]
 80094ae:	1855      	adds	r5, r2, r1
 80094b0:	42a5      	cmp	r5, r4
 80094b2:	d10b      	bne.n	80094cc <_free_r+0x70>
 80094b4:	6824      	ldr	r4, [r4, #0]
 80094b6:	4421      	add	r1, r4
 80094b8:	1854      	adds	r4, r2, r1
 80094ba:	42a3      	cmp	r3, r4
 80094bc:	6011      	str	r1, [r2, #0]
 80094be:	d1e0      	bne.n	8009482 <_free_r+0x26>
 80094c0:	681c      	ldr	r4, [r3, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	6053      	str	r3, [r2, #4]
 80094c6:	440c      	add	r4, r1
 80094c8:	6014      	str	r4, [r2, #0]
 80094ca:	e7da      	b.n	8009482 <_free_r+0x26>
 80094cc:	d902      	bls.n	80094d4 <_free_r+0x78>
 80094ce:	230c      	movs	r3, #12
 80094d0:	6003      	str	r3, [r0, #0]
 80094d2:	e7d6      	b.n	8009482 <_free_r+0x26>
 80094d4:	6825      	ldr	r5, [r4, #0]
 80094d6:	1961      	adds	r1, r4, r5
 80094d8:	428b      	cmp	r3, r1
 80094da:	bf04      	itt	eq
 80094dc:	6819      	ldreq	r1, [r3, #0]
 80094de:	685b      	ldreq	r3, [r3, #4]
 80094e0:	6063      	str	r3, [r4, #4]
 80094e2:	bf04      	itt	eq
 80094e4:	1949      	addeq	r1, r1, r5
 80094e6:	6021      	streq	r1, [r4, #0]
 80094e8:	6054      	str	r4, [r2, #4]
 80094ea:	e7ca      	b.n	8009482 <_free_r+0x26>
 80094ec:	b003      	add	sp, #12
 80094ee:	bd30      	pop	{r4, r5, pc}
 80094f0:	20000908 	.word	0x20000908

080094f4 <_init>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr

08009500 <_fini>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr
