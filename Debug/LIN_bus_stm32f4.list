
LIN_bus_stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009938  08009938  00019938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009954  08009954  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800995c  0800995c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800995c  0800995c  0001995c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          000009e0  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a64  20000a64  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ca26  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043f5  00000000  00000000  0003cb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017b8  00000000  00000000  00040f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001273  00000000  00000000  000426d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024813  00000000  00000000  00043943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fc76  00000000  00000000  00068156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d479a  00000000  00000000  00087dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000067bc  00000000  00000000  0015c568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00162d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009920 	.word	0x08009920

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08009920 	.word	0x08009920

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <UB_LIN_SendData>:
// return_value:
// LIN_OK = Frame has been sent
// LIN_WRONG_LEN = wrong number of data
// --------------------------------------------------------------
LIN_ERR_t UB_LIN_SendData(LIN_FRAME_t *frame, UART_HandleTypeDef *huart)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  uint8_t checksum = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	73bb      	strb	r3, [r7, #14]
  uint8_t n = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73fb      	strb	r3, [r7, #15]
  uint8_t frame_id = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	737b      	strb	r3, [r7, #13]
  uint8_t tx_data = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	733b      	strb	r3, [r7, #12]

  // check the length
  if((frame->data_len < 1) || (frame->data_len > LIN_MAX_DATA)) {
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	785b      	ldrb	r3, [r3, #1]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d003      	beq.n	80004ee <UB_LIN_SendData+0x2a>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	785b      	ldrb	r3, [r3, #1]
 80004ea:	2b08      	cmp	r3, #8
 80004ec:	d901      	bls.n	80004f2 <UB_LIN_SendData+0x2e>
    return(LIN_WRONG_LEN);
 80004ee:	2301      	movs	r3, #1
 80004f0:	e04e      	b.n	8000590 <UB_LIN_SendData+0xcc>
  }

  // calculate checksum
  checksum = p_LIN_makeChecksum(frame);
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f000 f858 	bl	80005a8 <p_LIN_makeChecksum>
 80004f8:	4603      	mov	r3, r0
 80004fa:	73bb      	strb	r3, [r7, #14]
  //--------------------------------------------------------------------
  // Break-Field
  //--------------------------------------------------------------------
//  flag_read_pin = 1; //active timer for reading pin
//  uint8_t test_data = 0xB7;
    flag_read_pin = 1; //active timer for reading pin
 80004fc:	4b26      	ldr	r3, [pc, #152]	; (8000598 <UB_LIN_SendData+0xd4>)
 80004fe:	2201      	movs	r2, #1
 8000500:	701a      	strb	r2, [r3, #0]

  HAL_LIN_SendBreak(huart);
 8000502:	6838      	ldr	r0, [r7, #0]
 8000504:	f005 f8ec 	bl	80056e0 <HAL_LIN_SendBreak>
  // wait until BreakField has been sent
//  while (USART_GetFlagStatus(LIN_UART, USART_FLAG_TC) == RESET);
//  while (__HAL_UART_GET_FLAG(huart, UART_FLAG_TC) == RESET);

  // small pause
  checker_1++;
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <UB_LIN_SendData+0xd8>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	b2da      	uxtb	r2, r3
 8000510:	4b22      	ldr	r3, [pc, #136]	; (800059c <UB_LIN_SendData+0xd8>)
 8000512:	701a      	strb	r2, [r3, #0]
//  p_LIN_wait_us(LIN_BREAKFIELD_DELAY);
  checker_2++;
 8000514:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <UB_LIN_SendData+0xdc>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <UB_LIN_SendData+0xdc>)
 800051e:	701a      	strb	r2, [r3, #0]
  //--------------------------------------------------------------------
  // Sync-Field
  //--------------------------------------------------------------------
//  USART_SendData(huart, LIN_SYNC_DATA);
  uint8_t sync_byte = LIN_SYNC_DATA;
 8000520:	2355      	movs	r3, #85	; 0x55
 8000522:	72fb      	strb	r3, [r7, #11]
  HAL_UART_Transmit(huart, &sync_byte, 1, 100);
 8000524:	f107 010b 	add.w	r1, r7, #11
 8000528:	2364      	movs	r3, #100	; 0x64
 800052a:	2201      	movs	r2, #1
 800052c:	6838      	ldr	r0, [r7, #0]
 800052e:	f004 fd67 	bl	8005000 <HAL_UART_Transmit>

  //--------------------------------------------------------------------
  // ID-Field
  //--------------------------------------------------------------------
//  USART_SendData(huart, frame->frame_id);
  frame_id = frame->frame_id;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	737b      	strb	r3, [r7, #13]
  HAL_UART_Transmit(huart, &frame_id, 1, 100);
 8000538:	f107 010d 	add.w	r1, r7, #13
 800053c:	2364      	movs	r3, #100	; 0x64
 800053e:	2201      	movs	r2, #1
 8000540:	6838      	ldr	r0, [r7, #0]
 8000542:	f004 fd5d 	bl	8005000 <HAL_UART_Transmit>
//  p_LIN_wait_us(LIN_FRAME_RESPONSE_DELAY);

  //--------------------------------------------------------------------
  // Data-Field [1...n]
  //--------------------------------------------------------------------
  for(n=0; n < frame->data_len; n++) {
 8000546:	2300      	movs	r3, #0
 8000548:	73fb      	strb	r3, [r7, #15]
 800054a:	e014      	b.n	8000576 <UB_LIN_SendData+0xb2>
//    USART_SendData(huart, frame->data[n]);
	  tx_data = frame->data[n];
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	789b      	ldrb	r3, [r3, #2]
 8000554:	733b      	strb	r3, [r7, #12]
	  HAL_UART_Transmit(huart, &tx_data, 1, 100);
 8000556:	f107 010c 	add.w	r1, r7, #12
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	2201      	movs	r2, #1
 800055e:	6838      	ldr	r0, [r7, #0]
 8000560:	f004 fd4e 	bl	8005000 <HAL_UART_Transmit>
	  checker_3++;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <UB_LIN_SendData+0xe0>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <UB_LIN_SendData+0xe0>)
 800056e:	701a      	strb	r2, [r3, #0]
  for(n=0; n < frame->data_len; n++) {
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	3301      	adds	r3, #1
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	785b      	ldrb	r3, [r3, #1]
 800057a:	7bfa      	ldrb	r2, [r7, #15]
 800057c:	429a      	cmp	r2, r3
 800057e:	d3e5      	bcc.n	800054c <UB_LIN_SendData+0x88>

  //--------------------------------------------------------------------
  // CRC-Field
  //--------------------------------------------------------------------
//  USART_SendData(huart, checksum);
  HAL_UART_Transmit(huart, &checksum, sizeof(checksum), 100);
 8000580:	f107 010e 	add.w	r1, r7, #14
 8000584:	2364      	movs	r3, #100	; 0x64
 8000586:	2201      	movs	r2, #1
 8000588:	6838      	ldr	r0, [r7, #0]
 800058a:	f004 fd39 	bl	8005000 <HAL_UART_Transmit>
	  checker_1 = 0;
	  checker_2 = 0;
	  checker_3 = 0;
  }

  return(LIN_OK);
 800058e:	2300      	movs	r3, #0
}
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000224 	.word	0x20000224
 800059c:	200000a0 	.word	0x200000a0
 80005a0:	200000a1 	.word	0x200000a1
 80005a4:	200000a2 	.word	0x200000a2

080005a8 <p_LIN_makeChecksum>:
// (classic-mode = inverted modulo256 sum)
//
// ret_value = checksum
//--------------------------------------------------------------
uint8_t p_LIN_makeChecksum(LIN_FRAME_t *frame)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint8_t ret_wert = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	72fb      	strb	r3, [r7, #11]
  uint8_t n = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
  uint16_t dummy = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	81bb      	strh	r3, [r7, #12]

  // calculate checksum
  dummy=0;
 80005bc:	2300      	movs	r3, #0
 80005be:	81bb      	strh	r3, [r7, #12]
  for(n=0;n<frame->data_len;n++) {
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	e010      	b.n	80005e8 <p_LIN_makeChecksum+0x40>
    dummy+=frame->data[n];
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	789b      	ldrb	r3, [r3, #2]
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	89bb      	ldrh	r3, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	81bb      	strh	r3, [r7, #12]
    if(dummy>0xFF) {
 80005d6:	89bb      	ldrh	r3, [r7, #12]
 80005d8:	2bff      	cmp	r3, #255	; 0xff
 80005da:	d902      	bls.n	80005e2 <p_LIN_makeChecksum+0x3a>
      dummy-=0xFF;
 80005dc:	89bb      	ldrh	r3, [r7, #12]
 80005de:	3bff      	subs	r3, #255	; 0xff
 80005e0:	81bb      	strh	r3, [r7, #12]
  for(n=0;n<frame->data_len;n++) {
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	3301      	adds	r3, #1
 80005e6:	73fb      	strb	r3, [r7, #15]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	785b      	ldrb	r3, [r3, #1]
 80005ec:	7bfa      	ldrb	r2, [r7, #15]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d3e9      	bcc.n	80005c6 <p_LIN_makeChecksum+0x1e>
    }
  }
  ret_wert=(uint8_t)(dummy);
 80005f2:	89bb      	ldrh	r3, [r7, #12]
 80005f4:	72fb      	strb	r3, [r7, #11]
  ret_wert^=0xFF;
 80005f6:	7afb      	ldrb	r3, [r7, #11]
 80005f8:	43db      	mvns	r3, r3
 80005fa:	72fb      	strb	r3, [r7, #11]

  return(ret_wert);
 80005fc:	7afb      	ldrb	r3, [r7, #11]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fe1e 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f866 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f9a2 	bl	8000960 <MX_GPIO_Init>
  MX_I2C1_Init();
 800061c:	f000 f8cc 	bl	80007b8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000620:	f000 f8f8 	bl	8000814 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8000624:	f008 fd28 	bl	8009078 <MX_USB_HOST_Init>
  MX_TIM14_Init();
 8000628:	f000 f924 	bl	8000874 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f944 	bl	80008b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000630:	f000 f96c 	bl	800090c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /*start timer*/
  HAL_TIM_Base_Start_IT(&htim14);
 8000634:	4821      	ldr	r0, [pc, #132]	; (80006bc <main+0xb0>)
 8000636:	f004 fa29 	bl	8004a8c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart3, rx_buff, 20);
 800063a:	2214      	movs	r2, #20
 800063c:	4920      	ldr	r1, [pc, #128]	; (80006c0 <main+0xb4>)
 800063e:	4821      	ldr	r0, [pc, #132]	; (80006c4 <main+0xb8>)
 8000640:	f004 fd70 	bl	8005124 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT (&huart2, &uart2_rx_data, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	4920      	ldr	r1, [pc, #128]	; (80006c8 <main+0xbc>)
 8000648:	4820      	ldr	r0, [pc, #128]	; (80006cc <main+0xc0>)
 800064a:	f004 fd6b 	bl	8005124 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800064e:	f008 fd39 	bl	80090c4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if (tx_data == 10) {
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <main+0xc4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b0a      	cmp	r3, #10
 8000658:	d109      	bne.n	800066e <main+0x62>
    	UB_LIN_SendData(&myFrame, &huart2);
 800065a:	491c      	ldr	r1, [pc, #112]	; (80006cc <main+0xc0>)
 800065c:	481d      	ldr	r0, [pc, #116]	; (80006d4 <main+0xc8>)
 800065e:	f7ff ff31 	bl	80004c4 <UB_LIN_SendData>
    	HAL_Delay(100);
 8000662:	2064      	movs	r0, #100	; 0x64
 8000664:	f000 fe66 	bl	8001334 <HAL_Delay>
    	tx_data = 20;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <main+0xc4>)
 800066a:	2214      	movs	r2, #20
 800066c:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
//	}
//
//    led_testing();
	alive_sw++;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <main+0xcc>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	3301      	adds	r3, #1
 8000674:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <main+0xcc>)
 8000676:	6013      	str	r3, [r2, #0]
//	} else {
//	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
//	  counter_2++;
//	  if(counter_2 == 1000) counter_2 = 1;
//	}
	if(alive_sw == 1000) alive_sw = 0;
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <main+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000680:	d102      	bne.n	8000688 <main+0x7c>
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <main+0xcc>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]

	  if (rx_data == 10) {
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <main+0xd0>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b0a      	cmp	r3, #10
 800068e:	d10a      	bne.n	80006a6 <main+0x9a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2140      	movs	r1, #64	; 0x40
 8000694:	4812      	ldr	r0, [pc, #72]	; (80006e0 <main+0xd4>)
 8000696:	f001 f9b1 	bl	80019fc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	4810      	ldr	r0, [pc, #64]	; (80006e0 <main+0xd4>)
 80006a0:	f001 f9ac 	bl	80019fc <HAL_GPIO_WritePin>
 80006a4:	e7d3      	b.n	800064e <main+0x42>
	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <main+0xd4>)
 80006ac:	f001 f9a6 	bl	80019fc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <main+0xd4>)
 80006b6:	f001 f9a1 	bl	80019fc <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 80006ba:	e7c8      	b.n	800064e <main+0x42>
 80006bc:	20000140 	.word	0x20000140
 80006c0:	20000210 	.word	0x20000210
 80006c4:	200001cc 	.word	0x200001cc
 80006c8:	20000232 	.word	0x20000232
 80006cc:	20000188 	.word	0x20000188
 80006d0:	20000225 	.word	0x20000225
 80006d4:	20000228 	.word	0x20000228
 80006d8:	20000004 	.word	0x20000004
 80006dc:	20000226 	.word	0x20000226
 80006e0:	40020000 	.word	0x40020000

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f009 f884 	bl	8009800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <SystemClock_Config+0xcc>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <SystemClock_Config+0xd0>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000740:	2301      	movs	r3, #1
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000758:	23a8      	movs	r3, #168	; 0xa8
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000760:	2307      	movs	r3, #7
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4618      	mov	r0, r3
 800076a:	f003 fb67 	bl	8003e3c <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 fac0 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2105      	movs	r1, #5
 8000796:	4618      	mov	r0, r3
 8000798:	f003 fdc8 	bl	800432c <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007a2:	f000 faa9 	bl	8000cf8 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	; 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2C1_Init+0x50>)
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <MX_I2C1_Init+0x54>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_I2C1_Init+0x50>)
 80007c4:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_I2C1_Init+0x58>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_I2C1_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_I2C1_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_I2C1_Init+0x50>)
 80007d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_I2C1_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_I2C1_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_I2C1_Init+0x50>)
 80007f6:	f002 fd3d 	bl	8003274 <HAL_I2C_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000800:	f000 fa7a 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000a4 	.word	0x200000a4
 800080c:	40005400 	.word	0x40005400
 8000810:	000186a0 	.word	0x000186a0

08000814 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_I2S3_Init+0x54>)
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <MX_I2S3_Init+0x58>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2S3_Init+0x54>)
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_I2S3_Init+0x54>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2S3_Init+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_I2S3_Init+0x54>)
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_I2S3_Init+0x54>)
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <MX_I2S3_Init+0x5c>)
 800083e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2S3_Init+0x54>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_I2S3_Init+0x54>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_I2S3_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_I2S3_Init+0x54>)
 8000854:	f002 fe52 	bl	80034fc <HAL_I2S_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800085e:	f000 fa4b 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000f8 	.word	0x200000f8
 800086c:	40003c00 	.word	0x40003c00
 8000870:	00017700 	.word	0x00017700

08000874 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_TIM14_Init+0x3c>)
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <MX_TIM14_Init+0x40>)
 800087c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1-1;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_TIM14_Init+0x3c>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_TIM14_Init+0x3c>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 84-1;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_TIM14_Init+0x3c>)
 800088c:	2253      	movs	r2, #83	; 0x53
 800088e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_TIM14_Init+0x3c>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_TIM14_Init+0x3c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_TIM14_Init+0x3c>)
 800089e:	f004 f8a5 	bl	80049ec <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80008a8:	f000 fa26 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000140 	.word	0x20000140
 80008b4:	40002000 	.word	0x40002000

080008b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART2_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80008c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 80008ee:	2120      	movs	r1, #32
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008f2:	f004 fb1f 	bl	8004f34 <HAL_LIN_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80008fc:	f000 f9fc 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000188 	.word	0x20000188
 8000908:	40004400 	.word	0x40004400

0800090c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART3_UART_Init+0x4c>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_USART3_UART_Init+0x50>)
 8000914:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_USART3_UART_Init+0x4c>)
 8000918:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800091c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART3_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART3_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART3_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART3_UART_Init+0x4c>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART3_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART3_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart3, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 8000942:	2120      	movs	r1, #32
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_USART3_UART_Init+0x4c>)
 8000946:	f004 faf5 	bl	8004f34 <HAL_LIN_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8000950:	f000 f9d2 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200001cc 	.word	0x200001cc
 800095c:	40004800 	.word	0x40004800

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	4b9b      	ldr	r3, [pc, #620]	; (8000be8 <MX_GPIO_Init+0x288>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a9a      	ldr	r2, [pc, #616]	; (8000be8 <MX_GPIO_Init+0x288>)
 8000980:	f043 0310 	orr.w	r3, r3, #16
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b98      	ldr	r3, [pc, #608]	; (8000be8 <MX_GPIO_Init+0x288>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0310 	and.w	r3, r3, #16
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	4b94      	ldr	r3, [pc, #592]	; (8000be8 <MX_GPIO_Init+0x288>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a93      	ldr	r2, [pc, #588]	; (8000be8 <MX_GPIO_Init+0x288>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b91      	ldr	r3, [pc, #580]	; (8000be8 <MX_GPIO_Init+0x288>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b8d      	ldr	r3, [pc, #564]	; (8000be8 <MX_GPIO_Init+0x288>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a8c      	ldr	r2, [pc, #560]	; (8000be8 <MX_GPIO_Init+0x288>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b8a      	ldr	r3, [pc, #552]	; (8000be8 <MX_GPIO_Init+0x288>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b86      	ldr	r3, [pc, #536]	; (8000be8 <MX_GPIO_Init+0x288>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a85      	ldr	r2, [pc, #532]	; (8000be8 <MX_GPIO_Init+0x288>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b83      	ldr	r3, [pc, #524]	; (8000be8 <MX_GPIO_Init+0x288>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b7f      	ldr	r3, [pc, #508]	; (8000be8 <MX_GPIO_Init+0x288>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a7e      	ldr	r2, [pc, #504]	; (8000be8 <MX_GPIO_Init+0x288>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b7c      	ldr	r3, [pc, #496]	; (8000be8 <MX_GPIO_Init+0x288>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b78      	ldr	r3, [pc, #480]	; (8000be8 <MX_GPIO_Init+0x288>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a77      	ldr	r2, [pc, #476]	; (8000be8 <MX_GPIO_Init+0x288>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b75      	ldr	r3, [pc, #468]	; (8000be8 <MX_GPIO_Init+0x288>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2101      	movs	r1, #1
 8000a22:	4872      	ldr	r0, [pc, #456]	; (8000bec <MX_GPIO_Init+0x28c>)
 8000a24:	f000 ffea 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D2_Pin|LED_D3_Pin, GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	21c0      	movs	r1, #192	; 0xc0
 8000a2c:	4870      	ldr	r0, [pc, #448]	; (8000bf0 <MX_GPIO_Init+0x290>)
 8000a2e:	f000 ffe5 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a32:	2200      	movs	r2, #0
 8000a34:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a38:	486e      	ldr	r0, [pc, #440]	; (8000bf4 <MX_GPIO_Init+0x294>)
 8000a3a:	f000 ffdf 	bl	80019fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8000a3e:	2318      	movs	r3, #24
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4869      	ldr	r0, [pc, #420]	; (8000bf8 <MX_GPIO_Init+0x298>)
 8000a54:	f000 fe36 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	485f      	ldr	r0, [pc, #380]	; (8000bec <MX_GPIO_Init+0x28c>)
 8000a70:	f000 fe28 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a74:	2308      	movs	r3, #8
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a84:	2305      	movs	r3, #5
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4857      	ldr	r0, [pc, #348]	; (8000bec <MX_GPIO_Init+0x28c>)
 8000a90:	f000 fe18 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a98:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4851      	ldr	r0, [pc, #324]	; (8000bf0 <MX_GPIO_Init+0x290>)
 8000aaa:	f000 fe0b 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SCK_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8000aae:	2320      	movs	r3, #32
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000abe:	2305      	movs	r3, #5
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4849      	ldr	r0, [pc, #292]	; (8000bf0 <MX_GPIO_Init+0x290>)
 8000aca:	f000 fdfb 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin|LED_D3_Pin;
 8000ace:	23c0      	movs	r3, #192	; 0xc0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4842      	ldr	r0, [pc, #264]	; (8000bf0 <MX_GPIO_Init+0x290>)
 8000ae6:	f000 fded 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000aea:	2304      	movs	r3, #4
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	483f      	ldr	r0, [pc, #252]	; (8000bfc <MX_GPIO_Init+0x29c>)
 8000afe:	f000 fde1 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b14:	2305      	movs	r3, #5
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4837      	ldr	r0, [pc, #220]	; (8000bfc <MX_GPIO_Init+0x29c>)
 8000b20:	f000 fdd0 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4830      	ldr	r0, [pc, #192]	; (8000bfc <MX_GPIO_Init+0x29c>)
 8000b3a:	f000 fdc3 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b44:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4829      	ldr	r0, [pc, #164]	; (8000bfc <MX_GPIO_Init+0x29c>)
 8000b56:	f000 fdb5 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b60:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4820      	ldr	r0, [pc, #128]	; (8000bf4 <MX_GPIO_Init+0x294>)
 8000b72:	f000 fda7 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|OTG_FS_OverCurrent_Pin;
 8000b76:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	481a      	ldr	r0, [pc, #104]	; (8000bf4 <MX_GPIO_Init+0x294>)
 8000b8c:	f000 fd9a 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b90:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b94:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <MX_GPIO_Init+0x294>)
 8000baa:	f000 fd8b 	bl	80016c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2009      	movs	r0, #9
 8000bb4:	f000 fcbd 	bl	8001532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000bb8:	2009      	movs	r0, #9
 8000bba:	f000 fcd6 	bl	800156a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	200a      	movs	r0, #10
 8000bc4:	f000 fcb5 	bl	8001532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000bc8:	200a      	movs	r0, #10
 8000bca:	f000 fcce 	bl	800156a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2028      	movs	r0, #40	; 0x28
 8000bd4:	f000 fcad 	bl	8001532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd8:	2028      	movs	r0, #40	; 0x28
 8000bda:	f000 fcc6 	bl	800156a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bde:	bf00      	nop
 8000be0:	3730      	adds	r7, #48	; 0x30
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020800 	.word	0x40020800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020c00 	.word	0x40020c00
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40020400 	.word	0x40020400

08000c00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
//			  //do nothing
//		  }
//
//	  }
//  }
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <HAL_UART_RxCpltCallback>:
	__HAL_TIM_SET_COUNTER(&htim14, 0);  // set the counter value a 0
	while (__HAL_TIM_GET_COUNTER(&htim14) < us);  // wait for the counter to reach the us input in the parameter
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	counter_2++;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_UART_RxCpltCallback+0x68>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <HAL_UART_RxCpltCallback+0x68>)
 8000c24:	6013      	str	r3, [r2, #0]
	if (counter_2 >= 1000) counter_2 = 0;
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_UART_RxCpltCallback+0x68>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c2e:	d302      	bcc.n	8000c36 <HAL_UART_RxCpltCallback+0x22>
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_UART_RxCpltCallback+0x68>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
	if(huart->Instance == huart3.Instance) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_RxCpltCallback+0x6c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d10d      	bne.n	8000c5e <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Receive_IT(&huart3, rx_buff, 10); //You need to toggle a breakpoint on this line!
 8000c42:	220a      	movs	r2, #10
 8000c44:	490f      	ldr	r1, [pc, #60]	; (8000c84 <HAL_UART_RxCpltCallback+0x70>)
 8000c46:	480e      	ldr	r0, [pc, #56]	; (8000c80 <HAL_UART_RxCpltCallback+0x6c>)
 8000c48:	f004 fa6c 	bl	8005124 <HAL_UART_Receive_IT>
		uint8_t feedback_data = 10;
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart3, &feedback_data, 1, 100);
 8000c50:	f107 010f 	add.w	r1, r7, #15
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	2201      	movs	r2, #1
 8000c58:	4809      	ldr	r0, [pc, #36]	; (8000c80 <HAL_UART_RxCpltCallback+0x6c>)
 8000c5a:	f004 f9d1 	bl	8005000 <HAL_UART_Transmit>
	}
	if(huart->Instance == huart2.Instance) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_UART_RxCpltCallback+0x74>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d104      	bne.n	8000c74 <HAL_UART_RxCpltCallback+0x60>
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <HAL_UART_RxCpltCallback+0x78>)
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <HAL_UART_RxCpltCallback+0x74>)
 8000c70:	f004 fa58 	bl	8005124 <HAL_UART_Receive_IT>
	}

}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	200001cc 	.word	0x200001cc
 8000c84:	20000210 	.word	0x20000210
 8000c88:	20000188 	.word	0x20000188
 8000c8c:	20000232 	.word	0x20000232

08000c90 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
 if (GPIO_Pin == GPIO_PIN_3) //key 1
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d10f      	bne.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x30>
 {
	 tx_data = 10;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ca2:	220a      	movs	r2, #10
 8000ca4:	701a      	strb	r2, [r3, #0]
//	 HAL_UART_Transmit(&huart2, &tx_data, 1, 100);
	 myFrame.frame_id=0x01;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
	 myFrame.data_len=2;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000cae:	2202      	movs	r2, #2
 8000cb0:	705a      	strb	r2, [r3, #1]
	 myFrame.data[0]=0xA1;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000cb4:	22a1      	movs	r2, #161	; 0xa1
 8000cb6:	709a      	strb	r2, [r3, #2]
	 myFrame.data[1]=0xB2;
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000cba:	22b2      	movs	r2, #178	; 0xb2
 8000cbc:	70da      	strb	r2, [r3, #3]
//	 UB_LIN_SendData(&myFrame, &huart2);
//	 HAL_UART_Transmit(&huart2, &tx_data, 1, 100);
//	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
//	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 }
}
 8000cbe:	e011      	b.n	8000ce4 <HAL_GPIO_EXTI_Callback+0x54>
 else if (GPIO_Pin == GPIO_PIN_4) //key 0
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	2b10      	cmp	r3, #16
 8000cc4:	d10e      	bne.n	8000ce4 <HAL_GPIO_EXTI_Callback+0x54>
	 tx_data = 10;
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_GPIO_EXTI_Callback+0x60>)
 8000cc8:	220a      	movs	r2, #10
 8000cca:	701a      	strb	r2, [r3, #0]
	 myFrame.frame_id=0x05;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000cce:	2205      	movs	r2, #5
 8000cd0:	701a      	strb	r2, [r3, #0]
	 myFrame.data_len=2;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	705a      	strb	r2, [r3, #1]
	 myFrame.data[0]=0x01;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	709a      	strb	r2, [r3, #2]
	 myFrame.data[1]=0x02;
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	70da      	strb	r2, [r3, #3]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	20000225 	.word	0x20000225
 8000cf4:	20000228 	.word	0x20000228

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d42:	2007      	movs	r0, #7
 8000d44:	f000 fbea 	bl	800151c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <HAL_I2C_MspInit+0x84>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12c      	bne.n	8000dd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d98:	2312      	movs	r3, #18
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da4:	2304      	movs	r3, #4
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <HAL_I2C_MspInit+0x8c>)
 8000db0:	f000 fc88 	bl	80016c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020400 	.word	0x40020400

08000de4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a31      	ldr	r2, [pc, #196]	; (8000ed4 <HAL_I2S_MspInit+0xf0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d15a      	bne.n	8000eca <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e18:	23c0      	movs	r3, #192	; 0xc0
 8000e1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 fca1 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e30:	f7ff ff62 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	4a26      	ldr	r2, [pc, #152]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e42:	6413      	str	r3, [r2, #64]	; 0x40
 8000e44:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	4a1f      	ldr	r2, [pc, #124]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e88:	2310      	movs	r3, #16
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e98:	2306      	movs	r3, #6
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480e      	ldr	r0, [pc, #56]	; (8000edc <HAL_I2S_MspInit+0xf8>)
 8000ea4:	f000 fc0e 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ea8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <HAL_I2S_MspInit+0xfc>)
 8000ec6:	f000 fbfd 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3738      	adds	r7, #56	; 0x38
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40003c00 	.word	0x40003c00
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020800 	.word	0x40020800

08000ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_TIM_Base_MspInit+0x48>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d115      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_TIM_Base_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <HAL_TIM_Base_MspInit+0x4c>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_TIM_Base_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	202d      	movs	r0, #45	; 0x2d
 8000f18:	f000 fb0b 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000f1c:	202d      	movs	r0, #45	; 0x2d
 8000f1e:	f000 fb24 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40002000 	.word	0x40002000
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	; 0x30
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a4b      	ldr	r2, [pc, #300]	; (8001080 <HAL_UART_MspInit+0x14c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d144      	bne.n	8000fe0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
 8000f5a:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <HAL_UART_MspInit+0x150>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a49      	ldr	r2, [pc, #292]	; (8001084 <HAL_UART_MspInit+0x150>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b47      	ldr	r3, [pc, #284]	; (8001084 <HAL_UART_MspInit+0x150>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	4b43      	ldr	r3, [pc, #268]	; (8001084 <HAL_UART_MspInit+0x150>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a42      	ldr	r2, [pc, #264]	; (8001084 <HAL_UART_MspInit+0x150>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b40      	ldr	r3, [pc, #256]	; (8001084 <HAL_UART_MspInit+0x150>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4837      	ldr	r0, [pc, #220]	; (8001088 <HAL_UART_MspInit+0x154>)
 8000faa:	f000 fb8b 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	482f      	ldr	r0, [pc, #188]	; (8001088 <HAL_UART_MspInit+0x154>)
 8000fca:	f000 fb7b 	bl	80016c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2026      	movs	r0, #38	; 0x26
 8000fd4:	f000 faad 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fd8:	2026      	movs	r0, #38	; 0x26
 8000fda:	f000 fac6 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fde:	e04a      	b.n	8001076 <HAL_UART_MspInit+0x142>
  else if(huart->Instance==USART3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a29      	ldr	r2, [pc, #164]	; (800108c <HAL_UART_MspInit+0x158>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d145      	bne.n	8001076 <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <HAL_UART_MspInit+0x150>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a24      	ldr	r2, [pc, #144]	; (8001084 <HAL_UART_MspInit+0x150>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <HAL_UART_MspInit+0x150>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <HAL_UART_MspInit+0x150>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <HAL_UART_MspInit+0x150>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_UART_MspInit+0x150>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102c:	2301      	movs	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001034:	2307      	movs	r3, #7
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	4814      	ldr	r0, [pc, #80]	; (8001090 <HAL_UART_MspInit+0x15c>)
 8001040:	f000 fb40 	bl	80016c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001056:	2307      	movs	r3, #7
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <HAL_UART_MspInit+0x15c>)
 8001062:	f000 fb2f 	bl	80016c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2027      	movs	r0, #39	; 0x27
 800106c:	f000 fa61 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001070:	2027      	movs	r0, #39	; 0x27
 8001072:	f000 fa7a 	bl	800156a <HAL_NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	; 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40004400 	.word	0x40004400
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000
 800108c:	40004800 	.word	0x40004800
 8001090:	40020c00 	.word	0x40020c00

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f908 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80010ec:	2008      	movs	r0, #8
 80010ee:	f000 fc9f 	bl	8001a30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 80010fa:	2010      	movs	r0, #16
 80010fc:	f000 fc98 	bl	8001a30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <USART2_IRQHandler+0x10>)
 800110a:	f004 f83b 	bl	8005184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000188 	.word	0x20000188

08001118 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <USART3_IRQHandler+0x10>)
 800111e:	f004 f831 	bl	8005184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200001cc 	.word	0x200001cc

0800112c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001130:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001134:	f000 fc7c 	bl	8001a30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001138:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800113c:	f000 fc78 	bl	8001a30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800114a:	f003 fd0f 	bl	8004b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000140 	.word	0x20000140

08001158 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <OTG_FS_IRQHandler+0x10>)
 800115e:	f000 fee9 	bl	8001f34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000618 	.word	0x20000618

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f008 fb48 	bl	8009830 <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20020000 	.word	0x20020000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	20000234 	.word	0x20000234
 80011d4:	20000a68 	.word	0x20000a68

080011d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001202:	490e      	ldr	r1, [pc, #56]	; (800123c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001218:	4c0b      	ldr	r4, [pc, #44]	; (8001248 <LoopFillZerobss+0x26>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001226:	f7ff ffd7 	bl	80011d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f008 fb07 	bl	800983c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff f9ed 	bl	800060c <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001240:	08009964 	.word	0x08009964
  ldr r2, =_sbss
 8001244:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001248:	20000a64 	.word	0x20000a64

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <HAL_Init+0x40>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_Init+0x40>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_Init+0x40>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f94f 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	2000      	movs	r0, #0
 8001280:	f000 f808 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fd3e 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x54>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x58>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f967 	bl	8001586 <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f000 f92f 	bl	8001532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <HAL_InitTick+0x5c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000010 	.word	0x20000010
 80012f0:	2000000c 	.word	0x2000000c

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000010 	.word	0x20000010
 8001318:	20000238 	.word	0x20000238

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000238 	.word	0x20000238

08001334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff ffee 	bl	800131c <HAL_GetTick>
 8001340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134c:	d005      	beq.n	800135a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_Delay+0x44>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800135a:	bf00      	nop
 800135c:	f7ff ffde 	bl	800131c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	429a      	cmp	r2, r3
 800136a:	d8f7      	bhi.n	800135c <HAL_Delay+0x28>
  {
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000010 	.word	0x20000010

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4907      	ldr	r1, [pc, #28]	; (8001418 <__NVIC_EnableIRQ+0x38>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f7ff ff8e 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff29 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff3e 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff8e 	bl	8001470 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff31 	bl	80013e0 <__NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffa2 	bl	80014d8 <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff feb6 	bl	800131c <HAL_GetTick>
 80015b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d008      	beq.n	80015d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e052      	b.n	8001676 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0216 	bic.w	r2, r2, #22
 80015de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d103      	bne.n	8001600 <HAL_DMA_Abort+0x62>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0208 	bic.w	r2, r2, #8
 800160e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0201 	bic.w	r2, r2, #1
 800161e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001620:	e013      	b.n	800164a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001622:	f7ff fe7b 	bl	800131c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b05      	cmp	r3, #5
 800162e:	d90c      	bls.n	800164a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2220      	movs	r2, #32
 8001634:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2203      	movs	r2, #3
 800163a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e015      	b.n	8001676 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e4      	bne.n	8001622 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165c:	223f      	movs	r2, #63	; 0x3f
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d004      	beq.n	800169c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e00c      	b.n	80016b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2205      	movs	r2, #5
 80016a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	e16b      	b.n	80019b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e0:	2201      	movs	r2, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 815a 	bne.w	80019b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d005      	beq.n	8001716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001712:	2b02      	cmp	r3, #2
 8001714:	d130      	bne.n	8001778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800174c:	2201      	movs	r2, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 0201 	and.w	r2, r3, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b03      	cmp	r3, #3
 8001782:	d017      	beq.n	80017b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d123      	bne.n	8001808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	69b9      	ldr	r1, [r7, #24]
 8001804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0203 	and.w	r2, r3, #3
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80b4 	beq.w	80019b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b60      	ldr	r3, [pc, #384]	; (80019d0 <HAL_GPIO_Init+0x30c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a5f      	ldr	r2, [pc, #380]	; (80019d0 <HAL_GPIO_Init+0x30c>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b5d      	ldr	r3, [pc, #372]	; (80019d0 <HAL_GPIO_Init+0x30c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001866:	4a5b      	ldr	r2, [pc, #364]	; (80019d4 <HAL_GPIO_Init+0x310>)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_GPIO_Init+0x314>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d02b      	beq.n	80018ea <HAL_GPIO_Init+0x226>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a51      	ldr	r2, [pc, #324]	; (80019dc <HAL_GPIO_Init+0x318>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d025      	beq.n	80018e6 <HAL_GPIO_Init+0x222>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a50      	ldr	r2, [pc, #320]	; (80019e0 <HAL_GPIO_Init+0x31c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d01f      	beq.n	80018e2 <HAL_GPIO_Init+0x21e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4f      	ldr	r2, [pc, #316]	; (80019e4 <HAL_GPIO_Init+0x320>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d019      	beq.n	80018de <HAL_GPIO_Init+0x21a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4e      	ldr	r2, [pc, #312]	; (80019e8 <HAL_GPIO_Init+0x324>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_GPIO_Init+0x216>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4d      	ldr	r2, [pc, #308]	; (80019ec <HAL_GPIO_Init+0x328>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00d      	beq.n	80018d6 <HAL_GPIO_Init+0x212>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4c      	ldr	r2, [pc, #304]	; (80019f0 <HAL_GPIO_Init+0x32c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d007      	beq.n	80018d2 <HAL_GPIO_Init+0x20e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4b      	ldr	r2, [pc, #300]	; (80019f4 <HAL_GPIO_Init+0x330>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d101      	bne.n	80018ce <HAL_GPIO_Init+0x20a>
 80018ca:	2307      	movs	r3, #7
 80018cc:	e00e      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018ce:	2308      	movs	r3, #8
 80018d0:	e00c      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018d2:	2306      	movs	r3, #6
 80018d4:	e00a      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018d6:	2305      	movs	r3, #5
 80018d8:	e008      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018da:	2304      	movs	r3, #4
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018de:	2303      	movs	r3, #3
 80018e0:	e004      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e002      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x228>
 80018ea:	2300      	movs	r3, #0
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	f002 0203 	and.w	r2, r2, #3
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	4093      	lsls	r3, r2
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018fc:	4935      	ldr	r1, [pc, #212]	; (80019d4 <HAL_GPIO_Init+0x310>)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800190a:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_GPIO_Init+0x334>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800192e:	4a32      	ldr	r2, [pc, #200]	; (80019f8 <HAL_GPIO_Init+0x334>)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001934:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <HAL_GPIO_Init+0x334>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001958:	4a27      	ldr	r2, [pc, #156]	; (80019f8 <HAL_GPIO_Init+0x334>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_GPIO_Init+0x334>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001982:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <HAL_GPIO_Init+0x334>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_GPIO_Init+0x334>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ac:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <HAL_GPIO_Init+0x334>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b0f      	cmp	r3, #15
 80019bc:	f67f ae90 	bls.w	80016e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40013800 	.word	0x40013800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020c00 	.word	0x40020c00
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40021400 	.word	0x40021400
 80019f0:	40021800 	.word	0x40021800
 80019f4:	40021c00 	.word	0x40021c00
 80019f8:	40013c00 	.word	0x40013c00

080019fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a0c:	787b      	ldrb	r3, [r7, #1]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a18:	e003      	b.n	8001a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	041a      	lsls	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	619a      	str	r2, [r3, #24]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f91e 	bl	8000c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40013c00 	.word	0x40013c00

08001a60 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a62:	b08f      	sub	sp, #60	; 0x3c
 8001a64:	af0a      	add	r7, sp, #40	; 0x28
 8001a66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e054      	b.n	8001b1c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d106      	bne.n	8001a92 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f007 fb51 	bl	8009134 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2203      	movs	r2, #3
 8001a96:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f004 fb7d 	bl	80061b0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	687e      	ldr	r6, [r7, #4]
 8001abe:	466d      	mov	r5, sp
 8001ac0:	f106 0410 	add.w	r4, r6, #16
 8001ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001acc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ad0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ad4:	1d33      	adds	r3, r6, #4
 8001ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad8:	6838      	ldr	r0, [r7, #0]
 8001ada:	f004 faf7 	bl	80060cc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f004 fb74 	bl	80061d2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	687e      	ldr	r6, [r7, #4]
 8001af2:	466d      	mov	r5, sp
 8001af4:	f106 0410 	add.w	r4, r6, #16
 8001af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b04:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b08:	1d33      	adds	r3, r6, #4
 8001b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b0c:	6838      	ldr	r0, [r7, #0]
 8001b0e:	f004 fcfd 	bl	800650c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b24 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af04      	add	r7, sp, #16
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	70fb      	strb	r3, [r7, #3]
 8001b36:	460b      	mov	r3, r1
 8001b38:	70bb      	strb	r3, [r7, #2]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_HCD_HC_Init+0x28>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e076      	b.n	8001c3a <HAL_HCD_HC_Init+0x116>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	212c      	movs	r1, #44	; 0x2c
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	333d      	adds	r3, #61	; 0x3d
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3338      	adds	r3, #56	; 0x38
 8001b74:	787a      	ldrb	r2, [r7, #1]
 8001b76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3340      	adds	r3, #64	; 0x40
 8001b86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b88:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	212c      	movs	r1, #44	; 0x2c
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	3339      	adds	r3, #57	; 0x39
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	212c      	movs	r1, #44	; 0x2c
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	333f      	adds	r3, #63	; 0x3f
 8001baa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001bae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	78ba      	ldrb	r2, [r7, #2]
 8001bb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bb8:	b2d0      	uxtb	r0, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	333a      	adds	r3, #58	; 0x3a
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001bca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	da09      	bge.n	8001be6 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	333b      	adds	r3, #59	; 0x3b
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
 8001be4:	e008      	b.n	8001bf8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	333b      	adds	r3, #59	; 0x3b
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	333c      	adds	r3, #60	; 0x3c
 8001c06:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c0a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	787c      	ldrb	r4, [r7, #1]
 8001c12:	78ba      	ldrb	r2, [r7, #2]
 8001c14:	78f9      	ldrb	r1, [r7, #3]
 8001c16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	4623      	mov	r3, r4
 8001c28:	f004 fdf6 	bl	8006818 <USB_HC_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd90      	pop	{r4, r7, pc}

08001c42 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_HCD_HC_Halt+0x1e>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e00f      	b.n	8001c80 <HAL_HCD_HC_Halt+0x3e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	78fa      	ldrb	r2, [r7, #3]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f005 f846 	bl	8006d02 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	4608      	mov	r0, r1
 8001c92:	4611      	mov	r1, r2
 8001c94:	461a      	mov	r2, r3
 8001c96:	4603      	mov	r3, r0
 8001c98:	70fb      	strb	r3, [r7, #3]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	70bb      	strb	r3, [r7, #2]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	212c      	movs	r1, #44	; 0x2c
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	333b      	adds	r3, #59	; 0x3b
 8001cb0:	78ba      	ldrb	r2, [r7, #2]
 8001cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	333f      	adds	r3, #63	; 0x3f
 8001cc2:	787a      	ldrb	r2, [r7, #1]
 8001cc4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001cc6:	7c3b      	ldrb	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d112      	bne.n	8001cf2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	212c      	movs	r1, #44	; 0x2c
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3342      	adds	r3, #66	; 0x42
 8001cda:	2203      	movs	r2, #3
 8001cdc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	212c      	movs	r1, #44	; 0x2c
 8001ce4:	fb01 f303 	mul.w	r3, r1, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	333d      	adds	r3, #61	; 0x3d
 8001cec:	7f3a      	ldrb	r2, [r7, #28]
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e008      	b.n	8001d04 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	212c      	movs	r1, #44	; 0x2c
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3342      	adds	r3, #66	; 0x42
 8001d00:	2202      	movs	r2, #2
 8001d02:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d04:	787b      	ldrb	r3, [r7, #1]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	f200 80c6 	bhi.w	8001e98 <HAL_HCD_HC_SubmitRequest+0x210>
 8001d0c:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d12:	bf00      	nop
 8001d14:	08001d25 	.word	0x08001d25
 8001d18:	08001e85 	.word	0x08001e85
 8001d1c:	08001d89 	.word	0x08001d89
 8001d20:	08001e07 	.word	0x08001e07
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001d24:	7c3b      	ldrb	r3, [r7, #16]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	f040 80b8 	bne.w	8001e9c <HAL_HCD_HC_SubmitRequest+0x214>
 8001d2c:	78bb      	ldrb	r3, [r7, #2]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 80b4 	bne.w	8001e9c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001d34:	8b3b      	ldrh	r3, [r7, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	212c      	movs	r1, #44	; 0x2c
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	3355      	adds	r3, #85	; 0x55
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3355      	adds	r3, #85	; 0x55
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	212c      	movs	r1, #44	; 0x2c
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3342      	adds	r3, #66	; 0x42
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d72:	e093      	b.n	8001e9c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	212c      	movs	r1, #44	; 0x2c
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	3342      	adds	r3, #66	; 0x42
 8001d82:	2202      	movs	r2, #2
 8001d84:	701a      	strb	r2, [r3, #0]
      break;
 8001d86:	e089      	b.n	8001e9c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d88:	78bb      	ldrb	r3, [r7, #2]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d11d      	bne.n	8001dca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	212c      	movs	r1, #44	; 0x2c
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	3355      	adds	r3, #85	; 0x55
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	3342      	adds	r3, #66	; 0x42
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001db4:	e073      	b.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3342      	adds	r3, #66	; 0x42
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	701a      	strb	r2, [r3, #0]
      break;
 8001dc8:	e069      	b.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3354      	adds	r3, #84	; 0x54
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	3342      	adds	r3, #66	; 0x42
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
      break;
 8001df0:	e055      	b.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3342      	adds	r3, #66	; 0x42
 8001e00:	2202      	movs	r2, #2
 8001e02:	701a      	strb	r2, [r3, #0]
      break;
 8001e04:	e04b      	b.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e06:	78bb      	ldrb	r3, [r7, #2]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d11d      	bne.n	8001e48 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	212c      	movs	r1, #44	; 0x2c
 8001e12:	fb01 f303 	mul.w	r3, r1, r3
 8001e16:	4413      	add	r3, r2
 8001e18:	3355      	adds	r3, #85	; 0x55
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	212c      	movs	r1, #44	; 0x2c
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3342      	adds	r3, #66	; 0x42
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e32:	e034      	b.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	212c      	movs	r1, #44	; 0x2c
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	3342      	adds	r3, #66	; 0x42
 8001e42:	2202      	movs	r2, #2
 8001e44:	701a      	strb	r2, [r3, #0]
      break;
 8001e46:	e02a      	b.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	212c      	movs	r1, #44	; 0x2c
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	3354      	adds	r3, #84	; 0x54
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	212c      	movs	r1, #44	; 0x2c
 8001e62:	fb01 f303 	mul.w	r3, r1, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	3342      	adds	r3, #66	; 0x42
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
      break;
 8001e6e:	e016      	b.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	212c      	movs	r1, #44	; 0x2c
 8001e76:	fb01 f303 	mul.w	r3, r1, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3342      	adds	r3, #66	; 0x42
 8001e7e:	2202      	movs	r2, #2
 8001e80:	701a      	strb	r2, [r3, #0]
      break;
 8001e82:	e00c      	b.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	3342      	adds	r3, #66	; 0x42
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
      break;
 8001e96:	e002      	b.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001e98:	bf00      	nop
 8001e9a:	e000      	b.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001e9c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	212c      	movs	r1, #44	; 0x2c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3344      	adds	r3, #68	; 0x44
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	8b3a      	ldrh	r2, [r7, #24]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	202c      	movs	r0, #44	; 0x2c
 8001eb8:	fb00 f303 	mul.w	r3, r0, r3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	334c      	adds	r3, #76	; 0x4c
 8001ec0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	212c      	movs	r1, #44	; 0x2c
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	3360      	adds	r3, #96	; 0x60
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	3350      	adds	r3, #80	; 0x50
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3339      	adds	r3, #57	; 0x39
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	212c      	movs	r1, #44	; 0x2c
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	3361      	adds	r3, #97	; 0x61
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	222c      	movs	r2, #44	; 0x2c
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	3338      	adds	r3, #56	; 0x38
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	18d1      	adds	r1, r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	f004 fd9a 	bl	8006a5c <USB_HC_StartXfer>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop

08001f34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f004 fa9b 	bl	8006486 <USB_GetMode>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	f040 80f6 	bne.w	8002144 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 fa7f 	bl	8006460 <USB_ReadInterrupts>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80ec 	beq.w	8002142 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 fa76 	bl	8006460 <USB_ReadInterrupts>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f7e:	d104      	bne.n	8001f8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f004 fa66 	bl	8006460 <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f9e:	d104      	bne.n	8001faa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fa56 	bl	8006460 <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fbe:	d104      	bne.n	8001fca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f004 fa46 	bl	8006460 <USB_ReadInterrupts>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d103      	bne.n	8001fe6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f004 fa38 	bl	8006460 <USB_ReadInterrupts>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ffa:	d11c      	bne.n	8002036 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002004:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10f      	bne.n	8002036 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002016:	2110      	movs	r1, #16
 8002018:	6938      	ldr	r0, [r7, #16]
 800201a:	f004 f927 	bl	800626c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800201e:	6938      	ldr	r0, [r7, #16]
 8002020:	f004 f958 	bl	80062d4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	4618      	mov	r0, r3
 800202c:	f004 fb2e 	bl	800668c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f007 f8fd 	bl	8009230 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f004 fa10 	bl	8006460 <USB_ReadInterrupts>
 8002040:	4603      	mov	r3, r0
 8002042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002046:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800204a:	d102      	bne.n	8002052 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f001 f89e 	bl	800318e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f004 fa02 	bl	8006460 <USB_ReadInterrupts>
 800205c:	4603      	mov	r3, r0
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b08      	cmp	r3, #8
 8002064:	d106      	bne.n	8002074 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f007 f8c6 	bl	80091f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2208      	movs	r2, #8
 8002072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f004 f9f1 	bl	8006460 <USB_ReadInterrupts>
 800207e:	4603      	mov	r3, r0
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b10      	cmp	r3, #16
 8002086:	d101      	bne.n	800208c <HAL_HCD_IRQHandler+0x158>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_HCD_IRQHandler+0x15a>
 800208c:	2300      	movs	r3, #0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d012      	beq.n	80020b8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0210 	bic.w	r2, r2, #16
 80020a0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 ffa1 	bl	8002fea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0210 	orr.w	r2, r2, #16
 80020b6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 f9cf 	bl	8006460 <USB_ReadInterrupts>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020cc:	d13a      	bne.n	8002144 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fe04 	bl	8006ce0 <USB_HC_ReadInterrupt>
 80020d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e025      	b.n	800212c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d018      	beq.n	8002126 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800210a:	d106      	bne.n	800211a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8ab 	bl	800226e <HCD_HC_IN_IRQHandler>
 8002118:	e005      	b.n	8002126 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4619      	mov	r1, r3
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 fbf9 	bl	8002918 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	429a      	cmp	r2, r3
 8002134:	d3d4      	bcc.n	80020e0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800213e:	615a      	str	r2, [r3, #20]
 8002140:	e000      	b.n	8002144 <HAL_HCD_IRQHandler+0x210>
      return;
 8002142:	bf00      	nop
    }
  }
}
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_HCD_Start+0x16>
 800215c:	2302      	movs	r3, #2
 800215e:	e013      	b.n	8002188 <HAL_HCD_Start+0x3e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	4618      	mov	r0, r3
 8002170:	f004 faf0 	bl	8006754 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f004 f808 	bl	800618e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_HCD_Stop+0x16>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e00d      	b.n	80021c2 <HAL_HCD_Stop+0x32>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 fede 	bl	8006f74 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 fa92 	bl	8006700 <USB_ResetPort>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	3360      	adds	r3, #96	; 0x60
 8002200:	781b      	ldrb	r3, [r3, #0]
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	3350      	adds	r3, #80	; 0x50
 8002228:	681b      	ldr	r3, [r3, #0]
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f004 fad6 	bl	80067f4 <USB_GetCurrentFrame>
 8002248:	4603      	mov	r3, r0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f004 fab1 	bl	80067c6 <USB_GetHostSpeed>
 8002264:	4603      	mov	r3, r0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b04      	cmp	r3, #4
 800229c:	d11a      	bne.n	80022d4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	2304      	movs	r3, #4
 80022ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3361      	adds	r3, #97	; 0x61
 80022be:	2206      	movs	r2, #6
 80022c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f004 fd18 	bl	8006d02 <USB_HC_Halt>
 80022d2:	e0af      	b.n	8002434 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ea:	d11b      	bne.n	8002324 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f8:	461a      	mov	r2, r3
 80022fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	3361      	adds	r3, #97	; 0x61
 800230e:	2207      	movs	r2, #7
 8002310:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f004 fcf0 	bl	8006d02 <USB_HC_Halt>
 8002322:	e087      	b.n	8002434 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4413      	add	r3, r2
 800232c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b20      	cmp	r3, #32
 8002338:	d109      	bne.n	800234e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	461a      	mov	r2, r3
 8002348:	2320      	movs	r3, #32
 800234a:	6093      	str	r3, [r2, #8]
 800234c:	e072      	b.n	8002434 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b08      	cmp	r3, #8
 8002362:	d11a      	bne.n	800239a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002370:	461a      	mov	r2, r3
 8002372:	2308      	movs	r3, #8
 8002374:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	3361      	adds	r3, #97	; 0x61
 8002384:	2205      	movs	r2, #5
 8002386:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f004 fcb5 	bl	8006d02 <USB_HC_Halt>
 8002398:	e04c      	b.n	8002434 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b0:	d11b      	bne.n	80023ea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	461a      	mov	r2, r3
 80023c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3361      	adds	r3, #97	; 0x61
 80023d4:	2208      	movs	r2, #8
 80023d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f004 fc8d 	bl	8006d02 <USB_HC_Halt>
 80023e8:	e024      	b.n	8002434 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d119      	bne.n	8002434 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	461a      	mov	r2, r3
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3361      	adds	r3, #97	; 0x61
 8002420:	2206      	movs	r2, #6
 8002422:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f004 fc67 	bl	8006d02 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800244a:	d112      	bne.n	8002472 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f004 fc53 	bl	8006d02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	461a      	mov	r2, r3
 800246a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002470:	e24e      	b.n	8002910 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	f040 80df 	bne.w	8002648 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d019      	beq.n	80024c6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3348      	adds	r3, #72	; 0x48
 80024a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	0159      	lsls	r1, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	440b      	add	r3, r1
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80024b4:	1ad2      	subs	r2, r2, r3
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	202c      	movs	r0, #44	; 0x2c
 80024bc:	fb00 f303 	mul.w	r3, r0, r3
 80024c0:	440b      	add	r3, r1
 80024c2:	3350      	adds	r3, #80	; 0x50
 80024c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3361      	adds	r3, #97	; 0x61
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	335c      	adds	r3, #92	; 0x5c
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	461a      	mov	r2, r3
 80024f8:	2301      	movs	r3, #1
 80024fa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	333f      	adds	r3, #63	; 0x3f
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	333f      	adds	r3, #63	; 0x3f
 800251e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002520:	2b02      	cmp	r3, #2
 8002522:	d111      	bne.n	8002548 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f004 fbe7 	bl	8006d02 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	461a      	mov	r2, r3
 8002542:	2310      	movs	r3, #16
 8002544:	6093      	str	r3, [r2, #8]
 8002546:	e03a      	b.n	80025be <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	333f      	adds	r3, #63	; 0x3f
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d009      	beq.n	8002570 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	333f      	adds	r3, #63	; 0x3f
 800256a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800256c:	2b01      	cmp	r3, #1
 800256e:	d126      	bne.n	80025be <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	0151      	lsls	r1, r2, #5
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	440a      	add	r2, r1
 8002586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800258a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800258e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3360      	adds	r3, #96	; 0x60
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	b2d9      	uxtb	r1, r3
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	202c      	movs	r0, #44	; 0x2c
 80025ac:	fb00 f303 	mul.w	r3, r0, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3360      	adds	r3, #96	; 0x60
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f006 fe47 	bl	800924c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d12b      	bne.n	800261e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3348      	adds	r3, #72	; 0x48
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	202c      	movs	r0, #44	; 0x2c
 80025dc:	fb00 f202 	mul.w	r2, r0, r2
 80025e0:	440a      	add	r2, r1
 80025e2:	3240      	adds	r2, #64	; 0x40
 80025e4:	8812      	ldrh	r2, [r2, #0]
 80025e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 818e 	beq.w	8002910 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	3354      	adds	r3, #84	; 0x54
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	f083 0301 	eor.w	r3, r3, #1
 8002608:	b2d8      	uxtb	r0, r3
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	3354      	adds	r3, #84	; 0x54
 8002618:	4602      	mov	r2, r0
 800261a:	701a      	strb	r2, [r3, #0]
}
 800261c:	e178      	b.n	8002910 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	3354      	adds	r3, #84	; 0x54
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	f083 0301 	eor.w	r3, r3, #1
 8002632:	b2d8      	uxtb	r0, r3
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	212c      	movs	r1, #44	; 0x2c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	3354      	adds	r3, #84	; 0x54
 8002642:	4602      	mov	r2, r0
 8002644:	701a      	strb	r2, [r3, #0]
}
 8002646:	e163      	b.n	8002910 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	f040 80f6 	bne.w	800284c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	3361      	adds	r3, #97	; 0x61
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d109      	bne.n	8002688 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	3360      	adds	r3, #96	; 0x60
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e0c9      	b.n	800281c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3361      	adds	r3, #97	; 0x61
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d109      	bne.n	80026b0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3360      	adds	r3, #96	; 0x60
 80026aa:	2205      	movs	r2, #5
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	e0b5      	b.n	800281c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	3361      	adds	r3, #97	; 0x61
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b06      	cmp	r3, #6
 80026c2:	d009      	beq.n	80026d8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	3361      	adds	r3, #97	; 0x61
 80026d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d150      	bne.n	800277a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	335c      	adds	r3, #92	; 0x5c
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	202c      	movs	r0, #44	; 0x2c
 80026f0:	fb00 f303 	mul.w	r3, r0, r3
 80026f4:	440b      	add	r3, r1
 80026f6:	335c      	adds	r3, #92	; 0x5c
 80026f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	335c      	adds	r3, #92	; 0x5c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d912      	bls.n	8002734 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	335c      	adds	r3, #92	; 0x5c
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3360      	adds	r3, #96	; 0x60
 800272e:	2204      	movs	r2, #4
 8002730:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002732:	e073      	b.n	800281c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3360      	adds	r3, #96	; 0x60
 8002742:	2202      	movs	r2, #2
 8002744:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800275c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002764:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	461a      	mov	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002778:	e050      	b.n	800281c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	3361      	adds	r3, #97	; 0x61
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d122      	bne.n	80027d4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3360      	adds	r3, #96	; 0x60
 800279c:	2202      	movs	r2, #2
 800279e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e023      	b.n	800281c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3361      	adds	r3, #97	; 0x61
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b07      	cmp	r3, #7
 80027e6:	d119      	bne.n	800281c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	335c      	adds	r3, #92	; 0x5c
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	202c      	movs	r0, #44	; 0x2c
 8002800:	fb00 f303 	mul.w	r3, r0, r3
 8002804:	440b      	add	r3, r1
 8002806:	335c      	adds	r3, #92	; 0x5c
 8002808:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	3360      	adds	r3, #96	; 0x60
 8002818:	2204      	movs	r2, #4
 800281a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	461a      	mov	r2, r3
 800282a:	2302      	movs	r3, #2
 800282c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	b2d9      	uxtb	r1, r3
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	202c      	movs	r0, #44	; 0x2c
 8002838:	fb00 f303 	mul.w	r3, r0, r3
 800283c:	4413      	add	r3, r2
 800283e:	3360      	adds	r3, #96	; 0x60
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f006 fd01 	bl	800924c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800284a:	e061      	b.n	8002910 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b10      	cmp	r3, #16
 8002860:	d156      	bne.n	8002910 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	333f      	adds	r3, #63	; 0x3f
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b03      	cmp	r3, #3
 8002874:	d111      	bne.n	800289a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	335c      	adds	r3, #92	; 0x5c
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f004 fa35 	bl	8006d02 <USB_HC_Halt>
 8002898:	e031      	b.n	80028fe <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	333f      	adds	r3, #63	; 0x3f
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	333f      	adds	r3, #63	; 0x3f
 80028bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d11d      	bne.n	80028fe <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	335c      	adds	r3, #92	; 0x5c
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d110      	bne.n	80028fe <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3361      	adds	r3, #97	; 0x61
 80028ea:	2203      	movs	r2, #3
 80028ec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 fa02 	bl	8006d02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	461a      	mov	r2, r3
 800290c:	2310      	movs	r3, #16
 800290e:	6093      	str	r3, [r2, #8]
}
 8002910:	bf00      	nop
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4413      	add	r3, r2
 800293a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b04      	cmp	r3, #4
 8002946:	d11a      	bne.n	800297e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	461a      	mov	r2, r3
 8002956:	2304      	movs	r3, #4
 8002958:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	3361      	adds	r3, #97	; 0x61
 8002968:	2206      	movs	r2, #6
 800296a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f004 f9c3 	bl	8006d02 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800297c:	e331      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b20      	cmp	r3, #32
 8002992:	d12e      	bne.n	80029f2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	461a      	mov	r2, r3
 80029a2:	2320      	movs	r3, #32
 80029a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	333d      	adds	r3, #61	; 0x3d
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	f040 8313 	bne.w	8002fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	333d      	adds	r3, #61	; 0x3d
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3360      	adds	r3, #96	; 0x60
 80029dc:	2202      	movs	r2, #2
 80029de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 f989 	bl	8006d02 <USB_HC_Halt>
}
 80029f0:	e2f7      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a08:	d112      	bne.n	8002a30 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	461a      	mov	r2, r3
 8002a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a1c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f004 f96a 	bl	8006d02 <USB_HC_Halt>
}
 8002a2e:	e2d8      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d140      	bne.n	8002ac8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	335c      	adds	r3, #92	; 0x5c
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	2b40      	cmp	r3, #64	; 0x40
 8002a6c:	d111      	bne.n	8002a92 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	333d      	adds	r3, #61	; 0x3d
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2340      	movs	r3, #64	; 0x40
 8002a90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f004 f91e 	bl	8006d02 <USB_HC_Halt>
}
 8002ac6:	e28c      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d12c      	bne.n	8002b38 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3361      	adds	r3, #97	; 0x61
 8002aec:	2204      	movs	r2, #4
 8002aee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	333d      	adds	r3, #61	; 0x3d
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	335c      	adds	r3, #92	; 0x5c
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 f8ef 	bl	8006d02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b30:	461a      	mov	r2, r3
 8002b32:	2340      	movs	r3, #64	; 0x40
 8002b34:	6093      	str	r3, [r2, #8]
}
 8002b36:	e254      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d11a      	bne.n	8002b84 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3361      	adds	r3, #97	; 0x61
 8002b6e:	2205      	movs	r2, #5
 8002b70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f004 f8c0 	bl	8006d02 <USB_HC_Halt>
}
 8002b82:	e22e      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d140      	bne.n	8002c1c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	335c      	adds	r3, #92	; 0x5c
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3361      	adds	r3, #97	; 0x61
 8002bba:	2203      	movs	r2, #3
 8002bbc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	333d      	adds	r3, #61	; 0x3d
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d112      	bne.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	333c      	adds	r3, #60	; 0x3c
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d108      	bne.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	333d      	adds	r3, #61	; 0x3d
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f004 f87d 	bl	8006d02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	461a      	mov	r2, r3
 8002c16:	2310      	movs	r3, #16
 8002c18:	6093      	str	r3, [r2, #8]
}
 8002c1a:	e1e2      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b80      	cmp	r3, #128	; 0x80
 8002c30:	d164      	bne.n	8002cfc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d111      	bne.n	8002c5e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3361      	adds	r3, #97	; 0x61
 8002c48:	2206      	movs	r2, #6
 8002c4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f004 f853 	bl	8006d02 <USB_HC_Halt>
 8002c5c:	e044      	b.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	335c      	adds	r3, #92	; 0x5c
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	202c      	movs	r0, #44	; 0x2c
 8002c76:	fb00 f303 	mul.w	r3, r0, r3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	335c      	adds	r3, #92	; 0x5c
 8002c7e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	335c      	adds	r3, #92	; 0x5c
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d920      	bls.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	335c      	adds	r3, #92	; 0x5c
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3360      	adds	r3, #96	; 0x60
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	b2d9      	uxtb	r1, r3
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	202c      	movs	r0, #44	; 0x2c
 8002cc2:	fb00 f303 	mul.w	r3, r0, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3360      	adds	r3, #96	; 0x60
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f006 fabc 	bl	800924c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cd4:	e008      	b.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3360      	adds	r3, #96	; 0x60
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	6093      	str	r3, [r2, #8]
}
 8002cfa:	e172      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d12:	d11b      	bne.n	8002d4c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3361      	adds	r3, #97	; 0x61
 8002d22:	2208      	movs	r2, #8
 8002d24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 ffe6 	bl	8006d02 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d42:	461a      	mov	r2, r3
 8002d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d48:	6093      	str	r3, [r2, #8]
}
 8002d4a:	e14a      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	f040 813f 	bne.w	8002fe2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3361      	adds	r3, #97	; 0x61
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d17d      	bne.n	8002e74 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3360      	adds	r3, #96	; 0x60
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	333f      	adds	r3, #63	; 0x3f
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d00a      	beq.n	8002db4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	333f      	adds	r3, #63	; 0x3f
 8002dac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	f040 8100 	bne.w	8002fb4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d113      	bne.n	8002de4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3355      	adds	r3, #85	; 0x55
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	f083 0301 	eor.w	r3, r3, #1
 8002dd0:	b2d8      	uxtb	r0, r3
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	3355      	adds	r3, #85	; 0x55
 8002de0:	4602      	mov	r2, r0
 8002de2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	f040 80e3 	bne.w	8002fb4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	334c      	adds	r3, #76	; 0x4c
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80d8 	beq.w	8002fb4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	334c      	adds	r3, #76	; 0x4c
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	202c      	movs	r0, #44	; 0x2c
 8002e1a:	fb00 f202 	mul.w	r2, r0, r2
 8002e1e:	440a      	add	r2, r1
 8002e20:	3240      	adds	r2, #64	; 0x40
 8002e22:	8812      	ldrh	r2, [r2, #0]
 8002e24:	4413      	add	r3, r2
 8002e26:	3b01      	subs	r3, #1
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	202c      	movs	r0, #44	; 0x2c
 8002e2e:	fb00 f202 	mul.w	r2, r0, r2
 8002e32:	440a      	add	r2, r1
 8002e34:	3240      	adds	r2, #64	; 0x40
 8002e36:	8812      	ldrh	r2, [r2, #0]
 8002e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80b5 	beq.w	8002fb4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3355      	adds	r3, #85	; 0x55
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	f083 0301 	eor.w	r3, r3, #1
 8002e5e:	b2d8      	uxtb	r0, r3
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3355      	adds	r3, #85	; 0x55
 8002e6e:	4602      	mov	r2, r0
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e09f      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3361      	adds	r3, #97	; 0x61
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d109      	bne.n	8002e9c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	3360      	adds	r3, #96	; 0x60
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e08b      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	212c      	movs	r1, #44	; 0x2c
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3361      	adds	r3, #97	; 0x61
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d109      	bne.n	8002ec4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	212c      	movs	r1, #44	; 0x2c
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	3360      	adds	r3, #96	; 0x60
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	701a      	strb	r2, [r3, #0]
 8002ec2:	e077      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3361      	adds	r3, #97	; 0x61
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d109      	bne.n	8002eec <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3360      	adds	r3, #96	; 0x60
 8002ee6:	2205      	movs	r2, #5
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e063      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3361      	adds	r3, #97	; 0x61
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b06      	cmp	r3, #6
 8002efe:	d009      	beq.n	8002f14 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	212c      	movs	r1, #44	; 0x2c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3361      	adds	r3, #97	; 0x61
 8002f0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d14f      	bne.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	335c      	adds	r3, #92	; 0x5c
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	202c      	movs	r0, #44	; 0x2c
 8002f2c:	fb00 f303 	mul.w	r3, r0, r3
 8002f30:	440b      	add	r3, r1
 8002f32:	335c      	adds	r3, #92	; 0x5c
 8002f34:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	212c      	movs	r1, #44	; 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	335c      	adds	r3, #92	; 0x5c
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d912      	bls.n	8002f70 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	335c      	adds	r3, #92	; 0x5c
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3360      	adds	r3, #96	; 0x60
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e021      	b.n	8002fb4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	212c      	movs	r1, #44	; 0x2c
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3360      	adds	r3, #96	; 0x60
 8002f7e:	2202      	movs	r2, #2
 8002f80:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f98:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fa0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fae:	461a      	mov	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	b2d9      	uxtb	r1, r3
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	202c      	movs	r0, #44	; 0x2c
 8002fd0:	fb00 f303 	mul.w	r3, r0, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3360      	adds	r3, #96	; 0x60
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f006 f935 	bl	800924c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002fe2:	bf00      	nop
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b08a      	sub	sp, #40	; 0x28
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	0c5b      	lsrs	r3, r3, #17
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800301e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d004      	beq.n	8003030 <HCD_RXQLVL_IRQHandler+0x46>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b05      	cmp	r3, #5
 800302a:	f000 80a9 	beq.w	8003180 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800302e:	e0aa      	b.n	8003186 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80a6 	beq.w	8003184 <HCD_RXQLVL_IRQHandler+0x19a>
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	4413      	add	r3, r2
 8003044:	3344      	adds	r3, #68	; 0x44
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 809b 	beq.w	8003184 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3350      	adds	r3, #80	; 0x50
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	441a      	add	r2, r3
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	202c      	movs	r0, #44	; 0x2c
 8003068:	fb00 f303 	mul.w	r3, r0, r3
 800306c:	440b      	add	r3, r1
 800306e:	334c      	adds	r3, #76	; 0x4c
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d87a      	bhi.n	800316c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	3344      	adds	r3, #68	; 0x44
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	b292      	uxth	r2, r2
 800308e:	4619      	mov	r1, r3
 8003090:	f003 f98e 	bl	80063b0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	212c      	movs	r1, #44	; 0x2c
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	4413      	add	r3, r2
 80030a0:	3344      	adds	r3, #68	; 0x44
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	441a      	add	r2, r3
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	202c      	movs	r0, #44	; 0x2c
 80030ae:	fb00 f303 	mul.w	r3, r0, r3
 80030b2:	440b      	add	r3, r1
 80030b4:	3344      	adds	r3, #68	; 0x44
 80030b6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	3350      	adds	r3, #80	; 0x50
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	441a      	add	r2, r3
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	202c      	movs	r0, #44	; 0x2c
 80030d2:	fb00 f303 	mul.w	r3, r0, r3
 80030d6:	440b      	add	r3, r1
 80030d8:	3350      	adds	r3, #80	; 0x50
 80030da:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	0cdb      	lsrs	r3, r3, #19
 80030ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3340      	adds	r3, #64	; 0x40
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4293      	cmp	r3, r2
 8003108:	d13c      	bne.n	8003184 <HCD_RXQLVL_IRQHandler+0x19a>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d039      	beq.n	8003184 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003126:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800312e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	461a      	mov	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	3354      	adds	r3, #84	; 0x54
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	f083 0301 	eor.w	r3, r3, #1
 8003156:	b2d8      	uxtb	r0, r3
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3354      	adds	r3, #84	; 0x54
 8003166:	4602      	mov	r2, r0
 8003168:	701a      	strb	r2, [r3, #0]
      break;
 800316a:	e00b      	b.n	8003184 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3360      	adds	r3, #96	; 0x60
 800317a:	2204      	movs	r2, #4
 800317c:	701a      	strb	r2, [r3, #0]
      break;
 800317e:	e001      	b.n	8003184 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003180:	bf00      	nop
 8003182:	e000      	b.n	8003186 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003184:	bf00      	nop
  }
}
 8003186:	bf00      	nop
 8003188:	3728      	adds	r7, #40	; 0x28
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80031ba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d10b      	bne.n	80031de <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f006 f81f 	bl	8009214 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d132      	bne.n	800324e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f043 0308 	orr.w	r3, r3, #8
 80031ee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d126      	bne.n	8003248 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d113      	bne.n	800322a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003208:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800320c:	d106      	bne.n	800321c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2102      	movs	r1, #2
 8003214:	4618      	mov	r0, r3
 8003216:	f003 fa39 	bl	800668c <USB_InitFSLSPClkSel>
 800321a:	e011      	b.n	8003240 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2101      	movs	r1, #1
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fa32 	bl	800668c <USB_InitFSLSPClkSel>
 8003228:	e00a      	b.n	8003240 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d106      	bne.n	8003240 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003238:	461a      	mov	r2, r3
 800323a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800323e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f006 f811 	bl	8009268 <HAL_HCD_PortEnabled_Callback>
 8003246:	e002      	b.n	800324e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f006 f81b 	bl	8009284 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b20      	cmp	r3, #32
 8003256:	d103      	bne.n	8003260 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f043 0320 	orr.w	r3, r3, #32
 800325e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003266:	461a      	mov	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	6013      	str	r3, [r2, #0]
}
 800326c:	bf00      	nop
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e12b      	b.n	80034de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fd5a 	bl	8000d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	; 0x24
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032d8:	f001 fa20 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 80032dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4a81      	ldr	r2, [pc, #516]	; (80034e8 <HAL_I2C_Init+0x274>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d807      	bhi.n	80032f8 <HAL_I2C_Init+0x84>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a80      	ldr	r2, [pc, #512]	; (80034ec <HAL_I2C_Init+0x278>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e006      	b.n	8003306 <HAL_I2C_Init+0x92>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a7d      	ldr	r2, [pc, #500]	; (80034f0 <HAL_I2C_Init+0x27c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	bf94      	ite	ls
 8003300:	2301      	movls	r3, #1
 8003302:	2300      	movhi	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0e7      	b.n	80034de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a78      	ldr	r2, [pc, #480]	; (80034f4 <HAL_I2C_Init+0x280>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	0c9b      	lsrs	r3, r3, #18
 8003318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a6a      	ldr	r2, [pc, #424]	; (80034e8 <HAL_I2C_Init+0x274>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d802      	bhi.n	8003348 <HAL_I2C_Init+0xd4>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3301      	adds	r3, #1
 8003346:	e009      	b.n	800335c <HAL_I2C_Init+0xe8>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	4a69      	ldr	r2, [pc, #420]	; (80034f8 <HAL_I2C_Init+0x284>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	099b      	lsrs	r3, r3, #6
 800335a:	3301      	adds	r3, #1
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	430b      	orrs	r3, r1
 8003362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800336e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	495c      	ldr	r1, [pc, #368]	; (80034e8 <HAL_I2C_Init+0x274>)
 8003378:	428b      	cmp	r3, r1
 800337a:	d819      	bhi.n	80033b0 <HAL_I2C_Init+0x13c>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1e59      	subs	r1, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fbb1 f3f3 	udiv	r3, r1, r3
 800338a:	1c59      	adds	r1, r3, #1
 800338c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003390:	400b      	ands	r3, r1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_I2C_Init+0x138>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1e59      	subs	r1, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033aa:	e051      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 80033ac:	2304      	movs	r3, #4
 80033ae:	e04f      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d111      	bne.n	80033dc <HAL_I2C_Init+0x168>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1e58      	subs	r0, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6859      	ldr	r1, [r3, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	440b      	add	r3, r1
 80033c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	e012      	b.n	8003402 <HAL_I2C_Init+0x18e>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1e58      	subs	r0, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	0099      	lsls	r1, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Init+0x196>
 8003406:	2301      	movs	r3, #1
 8003408:	e022      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10e      	bne.n	8003430 <HAL_I2C_Init+0x1bc>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1e58      	subs	r0, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	440b      	add	r3, r1
 8003420:	fbb0 f3f3 	udiv	r3, r0, r3
 8003424:	3301      	adds	r3, #1
 8003426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342e:	e00f      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1e58      	subs	r0, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	0099      	lsls	r1, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	fbb0 f3f3 	udiv	r3, r0, r3
 8003446:	3301      	adds	r3, #1
 8003448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	6809      	ldr	r1, [r1, #0]
 8003454:	4313      	orrs	r3, r2
 8003456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800347e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6911      	ldr	r1, [r2, #16]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68d2      	ldr	r2, [r2, #12]
 800348a:	4311      	orrs	r1, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	430b      	orrs	r3, r1
 8003492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	000186a0 	.word	0x000186a0
 80034ec:	001e847f 	.word	0x001e847f
 80034f0:	003d08ff 	.word	0x003d08ff
 80034f4:	431bde83 	.word	0x431bde83
 80034f8:	10624dd3 	.word	0x10624dd3

080034fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e128      	b.n	8003760 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a90      	ldr	r2, [pc, #576]	; (8003768 <HAL_I2S_Init+0x26c>)
 8003526:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd fc5b 	bl	8000de4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003544:	f023 030f 	bic.w	r3, r3, #15
 8003548:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2202      	movs	r2, #2
 8003550:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d060      	beq.n	800361c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d102      	bne.n	8003568 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003562:	2310      	movs	r3, #16
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e001      	b.n	800356c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003568:	2320      	movs	r3, #32
 800356a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b20      	cmp	r3, #32
 8003572:	d802      	bhi.n	800357a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800357a:	2001      	movs	r0, #1
 800357c:	f001 f9d8 	bl	8004930 <HAL_RCCEx_GetPeriphCLKFreq>
 8003580:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800358a:	d125      	bne.n	80035d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d010      	beq.n	80035b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	fbb2 f2f3 	udiv	r2, r2, r3
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	3305      	adds	r3, #5
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	e01f      	b.n	80035f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	461a      	mov	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	3305      	adds	r3, #5
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e00e      	b.n	80035f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	3305      	adds	r3, #5
 80035f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4a5c      	ldr	r2, [pc, #368]	; (800376c <HAL_I2S_Init+0x270>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	08db      	lsrs	r3, r3, #3
 8003600:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	085b      	lsrs	r3, r3, #1
 8003612:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	e003      	b.n	8003624 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800361c:	2302      	movs	r3, #2
 800361e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d902      	bls.n	8003630 <HAL_I2S_Init+0x134>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2bff      	cmp	r3, #255	; 0xff
 800362e:	d907      	bls.n	8003640 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	f043 0210 	orr.w	r2, r3, #16
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e08f      	b.n	8003760 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	ea42 0103 	orr.w	r1, r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	430a      	orrs	r2, r1
 8003652:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800365e:	f023 030f 	bic.w	r3, r3, #15
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6851      	ldr	r1, [r2, #4]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6892      	ldr	r2, [r2, #8]
 800366a:	4311      	orrs	r1, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68d2      	ldr	r2, [r2, #12]
 8003670:	4311      	orrs	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6992      	ldr	r2, [r2, #24]
 8003676:	430a      	orrs	r2, r1
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003682:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d161      	bne.n	8003750 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a38      	ldr	r2, [pc, #224]	; (8003770 <HAL_I2S_Init+0x274>)
 8003690:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a37      	ldr	r2, [pc, #220]	; (8003774 <HAL_I2S_Init+0x278>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d101      	bne.n	80036a0 <HAL_I2S_Init+0x1a4>
 800369c:	4b36      	ldr	r3, [pc, #216]	; (8003778 <HAL_I2S_Init+0x27c>)
 800369e:	e001      	b.n	80036a4 <HAL_I2S_Init+0x1a8>
 80036a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	4932      	ldr	r1, [pc, #200]	; (8003774 <HAL_I2S_Init+0x278>)
 80036ac:	428a      	cmp	r2, r1
 80036ae:	d101      	bne.n	80036b4 <HAL_I2S_Init+0x1b8>
 80036b0:	4a31      	ldr	r2, [pc, #196]	; (8003778 <HAL_I2S_Init+0x27c>)
 80036b2:	e001      	b.n	80036b8 <HAL_I2S_Init+0x1bc>
 80036b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80036b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036bc:	f023 030f 	bic.w	r3, r3, #15
 80036c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <HAL_I2S_Init+0x278>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_I2S_Init+0x1d4>
 80036cc:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <HAL_I2S_Init+0x27c>)
 80036ce:	e001      	b.n	80036d4 <HAL_I2S_Init+0x1d8>
 80036d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d4:	2202      	movs	r2, #2
 80036d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a25      	ldr	r2, [pc, #148]	; (8003774 <HAL_I2S_Init+0x278>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_I2S_Init+0x1ea>
 80036e2:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_I2S_Init+0x27c>)
 80036e4:	e001      	b.n	80036ea <HAL_I2S_Init+0x1ee>
 80036e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f6:	d003      	beq.n	8003700 <HAL_I2S_Init+0x204>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	e001      	b.n	800370c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003716:	4313      	orrs	r3, r2
 8003718:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003720:	4313      	orrs	r3, r2
 8003722:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800372a:	4313      	orrs	r3, r2
 800372c:	b29a      	uxth	r2, r3
 800372e:	897b      	ldrh	r3, [r7, #10]
 8003730:	4313      	orrs	r3, r2
 8003732:	b29b      	uxth	r3, r3
 8003734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003738:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <HAL_I2S_Init+0x278>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_I2S_Init+0x24c>
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <HAL_I2S_Init+0x27c>)
 8003746:	e001      	b.n	800374c <HAL_I2S_Init+0x250>
 8003748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374c:	897a      	ldrh	r2, [r7, #10]
 800374e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	08003873 	.word	0x08003873
 800376c:	cccccccd 	.word	0xcccccccd
 8003770:	08003989 	.word	0x08003989
 8003774:	40003800 	.word	0x40003800
 8003778:	40003400 	.word	0x40003400

0800377c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10e      	bne.n	800380c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffb8 	bl	800377c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	b292      	uxth	r2, r2
 8003828:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	1c9a      	adds	r2, r3, #2
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10e      	bne.n	800386a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800385a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ff93 	bl	8003790 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b086      	sub	sp, #24
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b04      	cmp	r3, #4
 800388c:	d13a      	bne.n	8003904 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d109      	bne.n	80038ac <I2S_IRQHandler+0x3a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b40      	cmp	r3, #64	; 0x40
 80038a4:	d102      	bne.n	80038ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ffb4 	bl	8003814 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d126      	bne.n	8003904 <I2S_IRQHandler+0x92>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d11f      	bne.n	8003904 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f043 0202 	orr.w	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ff50 	bl	80037a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b03      	cmp	r3, #3
 800390e:	d136      	bne.n	800397e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d109      	bne.n	800392e <I2S_IRQHandler+0xbc>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d102      	bne.n	800392e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff45 	bl	80037b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b08      	cmp	r3, #8
 8003936:	d122      	bne.n	800397e <I2S_IRQHandler+0x10c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b20      	cmp	r3, #32
 8003944:	d11b      	bne.n	800397e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003954:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	f043 0204 	orr.w	r2, r3, #4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff13 	bl	80037a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800397e:	bf00      	nop
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a92      	ldr	r2, [pc, #584]	; (8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80039a2:	4b92      	ldr	r3, [pc, #584]	; (8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039a4:	e001      	b.n	80039aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80039a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a8b      	ldr	r2, [pc, #556]	; (8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80039c0:	4b8a      	ldr	r3, [pc, #552]	; (8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039c2:	e001      	b.n	80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80039c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d4:	d004      	beq.n	80039e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 8099 	bne.w	8003b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d107      	bne.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f925 	bl	8003c44 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d107      	bne.n	8003a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f9c8 	bl	8003da4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d13a      	bne.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d035      	beq.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	; (8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d101      	bne.n	8003a36 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a32:	4b6e      	ldr	r3, [pc, #440]	; (8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a34:	e001      	b.n	8003a3a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4969      	ldr	r1, [pc, #420]	; (8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a42:	428b      	cmp	r3, r1
 8003a44:	d101      	bne.n	8003a4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a46:	4b69      	ldr	r3, [pc, #420]	; (8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a48:	e001      	b.n	8003a4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a52:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f043 0202 	orr.w	r2, r3, #2
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff fe88 	bl	80037a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	f040 80c3 	bne.w	8003c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80bd 	beq.w	8003c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a49      	ldr	r2, [pc, #292]	; (8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ac6:	4b49      	ldr	r3, [pc, #292]	; (8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ac8:	e001      	b.n	8003ace <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003aca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4944      	ldr	r1, [pc, #272]	; (8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ad6:	428b      	cmp	r3, r1
 8003ad8:	d101      	bne.n	8003ade <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ada:	4b44      	ldr	r3, [pc, #272]	; (8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003adc:	e001      	b.n	8003ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ae6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f043 0204 	orr.w	r2, r3, #4
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fe4a 	bl	80037a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b10:	e089      	b.n	8003c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d107      	bne.n	8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8be 	bl	8003ca8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d107      	bne.n	8003b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f8fd 	bl	8003d40 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d12f      	bne.n	8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d02a      	beq.n	8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b68:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d101      	bne.n	8003b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b76:	e001      	b.n	8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4919      	ldr	r1, [pc, #100]	; (8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b84:	428b      	cmp	r3, r1
 8003b86:	d101      	bne.n	8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b88:	4b18      	ldr	r3, [pc, #96]	; (8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b8a:	e001      	b.n	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	f043 0202 	orr.w	r2, r3, #2
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff fdfa 	bl	80037a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d136      	bne.n	8003c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d031      	beq.n	8003c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a07      	ldr	r2, [pc, #28]	; (8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d101      	bne.n	8003bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003bce:	4b07      	ldr	r3, [pc, #28]	; (8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bd0:	e001      	b.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4902      	ldr	r1, [pc, #8]	; (8003be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bde:	428b      	cmp	r3, r1
 8003be0:	d106      	bne.n	8003bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003be2:	4b02      	ldr	r3, [pc, #8]	; (8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003be4:	e006      	b.n	8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003be6:	bf00      	nop
 8003be8:	40003800 	.word	0x40003800
 8003bec:	40003400 	.word	0x40003400
 8003bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bf8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	f043 0204 	orr.w	r2, r3, #4
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fdc0 	bl	80037a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c24:	e000      	b.n	8003c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c26:	bf00      	nop
}
 8003c28:	bf00      	nop
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	1c99      	adds	r1, r3, #2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6251      	str	r1, [r2, #36]	; 0x24
 8003c56:	881a      	ldrh	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d113      	bne.n	8003c9e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d106      	bne.n	8003c9e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ffc9 	bl	8003c30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	1c99      	adds	r1, r3, #2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6251      	str	r1, [r2, #36]	; 0x24
 8003cba:	8819      	ldrh	r1, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <I2SEx_TxISR_I2SExt+0x90>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <I2SEx_TxISR_I2SExt+0x22>
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <I2SEx_TxISR_I2SExt+0x94>)
 8003cc8:	e001      	b.n	8003cce <I2SEx_TxISR_I2SExt+0x26>
 8003cca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cce:	460a      	mov	r2, r1
 8003cd0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d121      	bne.n	8003d2e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <I2SEx_TxISR_I2SExt+0x90>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d101      	bne.n	8003cf8 <I2SEx_TxISR_I2SExt+0x50>
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <I2SEx_TxISR_I2SExt+0x94>)
 8003cf6:	e001      	b.n	8003cfc <I2SEx_TxISR_I2SExt+0x54>
 8003cf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	490d      	ldr	r1, [pc, #52]	; (8003d38 <I2SEx_TxISR_I2SExt+0x90>)
 8003d04:	428b      	cmp	r3, r1
 8003d06:	d101      	bne.n	8003d0c <I2SEx_TxISR_I2SExt+0x64>
 8003d08:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <I2SEx_TxISR_I2SExt+0x94>)
 8003d0a:	e001      	b.n	8003d10 <I2SEx_TxISR_I2SExt+0x68>
 8003d0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ff81 	bl	8003c30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40003800 	.word	0x40003800
 8003d3c:	40003400 	.word	0x40003400

08003d40 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68d8      	ldr	r0, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	1c99      	adds	r1, r3, #2
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d58:	b282      	uxth	r2, r0
 8003d5a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d113      	bne.n	8003d9c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d82:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ff4a 	bl	8003c30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a20      	ldr	r2, [pc, #128]	; (8003e34 <I2SEx_RxISR_I2SExt+0x90>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d101      	bne.n	8003dba <I2SEx_RxISR_I2SExt+0x16>
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <I2SEx_RxISR_I2SExt+0x94>)
 8003db8:	e001      	b.n	8003dbe <I2SEx_RxISR_I2SExt+0x1a>
 8003dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dbe:	68d8      	ldr	r0, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	1c99      	adds	r1, r3, #2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003dca:	b282      	uxth	r2, r0
 8003dcc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d121      	bne.n	8003e2a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a12      	ldr	r2, [pc, #72]	; (8003e34 <I2SEx_RxISR_I2SExt+0x90>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <I2SEx_RxISR_I2SExt+0x50>
 8003df0:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <I2SEx_RxISR_I2SExt+0x94>)
 8003df2:	e001      	b.n	8003df8 <I2SEx_RxISR_I2SExt+0x54>
 8003df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	490d      	ldr	r1, [pc, #52]	; (8003e34 <I2SEx_RxISR_I2SExt+0x90>)
 8003e00:	428b      	cmp	r3, r1
 8003e02:	d101      	bne.n	8003e08 <I2SEx_RxISR_I2SExt+0x64>
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <I2SEx_RxISR_I2SExt+0x94>)
 8003e06:	e001      	b.n	8003e0c <I2SEx_RxISR_I2SExt+0x68>
 8003e08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e10:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d106      	bne.n	8003e2a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff ff03 	bl	8003c30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40003800 	.word	0x40003800
 8003e38:	40003400 	.word	0x40003400

08003e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e267      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d075      	beq.n	8003f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e5a:	4b88      	ldr	r3, [pc, #544]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d00c      	beq.n	8003e80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e66:	4b85      	ldr	r3, [pc, #532]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d112      	bne.n	8003e98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e72:	4b82      	ldr	r3, [pc, #520]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e7e:	d10b      	bne.n	8003e98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e80:	4b7e      	ldr	r3, [pc, #504]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d05b      	beq.n	8003f44 <HAL_RCC_OscConfig+0x108>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d157      	bne.n	8003f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e242      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea0:	d106      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x74>
 8003ea2:	4b76      	ldr	r3, [pc, #472]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a75      	ldr	r2, [pc, #468]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e01d      	b.n	8003eec <HAL_RCC_OscConfig+0xb0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x98>
 8003eba:	4b70      	ldr	r3, [pc, #448]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a6f      	ldr	r2, [pc, #444]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	4b6d      	ldr	r3, [pc, #436]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a6c      	ldr	r2, [pc, #432]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e00b      	b.n	8003eec <HAL_RCC_OscConfig+0xb0>
 8003ed4:	4b69      	ldr	r3, [pc, #420]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a68      	ldr	r2, [pc, #416]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	4b66      	ldr	r3, [pc, #408]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a65      	ldr	r2, [pc, #404]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d013      	beq.n	8003f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fa12 	bl	800131c <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003efc:	f7fd fa0e 	bl	800131c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	; 0x64
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e207      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	4b5b      	ldr	r3, [pc, #364]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0xc0>
 8003f1a:	e014      	b.n	8003f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7fd f9fe 	bl	800131c <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f24:	f7fd f9fa 	bl	800131c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b64      	cmp	r3, #100	; 0x64
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e1f3      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	4b51      	ldr	r3, [pc, #324]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0xe8>
 8003f42:	e000      	b.n	8003f46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d063      	beq.n	800401a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f52:	4b4a      	ldr	r3, [pc, #296]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d11c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f6a:	4b44      	ldr	r3, [pc, #272]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d116      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f76:	4b41      	ldr	r3, [pc, #260]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_RCC_OscConfig+0x152>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d001      	beq.n	8003f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e1c7      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8e:	4b3b      	ldr	r3, [pc, #236]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4937      	ldr	r1, [pc, #220]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa2:	e03a      	b.n	800401a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d020      	beq.n	8003fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fac:	4b34      	ldr	r3, [pc, #208]	; (8004080 <HAL_RCC_OscConfig+0x244>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7fd f9b3 	bl	800131c <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fba:	f7fd f9af 	bl	800131c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e1a8      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd8:	4b28      	ldr	r3, [pc, #160]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4925      	ldr	r1, [pc, #148]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]
 8003fec:	e015      	b.n	800401a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fee:	4b24      	ldr	r3, [pc, #144]	; (8004080 <HAL_RCC_OscConfig+0x244>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fd f992 	bl	800131c <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ffc:	f7fd f98e 	bl	800131c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e187      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400e:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d036      	beq.n	8004094 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800402e:	4b15      	ldr	r3, [pc, #84]	; (8004084 <HAL_RCC_OscConfig+0x248>)
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fd f972 	bl	800131c <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800403c:	f7fd f96e 	bl	800131c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e167      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCC_OscConfig+0x240>)
 8004050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x200>
 800405a:	e01b      	b.n	8004094 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800405c:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_RCC_OscConfig+0x248>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004062:	f7fd f95b 	bl	800131c <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004068:	e00e      	b.n	8004088 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800406a:	f7fd f957 	bl	800131c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d907      	bls.n	8004088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e150      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
 800407c:	40023800 	.word	0x40023800
 8004080:	42470000 	.word	0x42470000
 8004084:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004088:	4b88      	ldr	r3, [pc, #544]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 800408a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ea      	bne.n	800406a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8097 	beq.w	80041d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a2:	2300      	movs	r3, #0
 80040a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a6:	4b81      	ldr	r3, [pc, #516]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10f      	bne.n	80040d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	4b7d      	ldr	r3, [pc, #500]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	4a7c      	ldr	r2, [pc, #496]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 80040bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c0:	6413      	str	r3, [r2, #64]	; 0x40
 80040c2:	4b7a      	ldr	r3, [pc, #488]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ce:	2301      	movs	r3, #1
 80040d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d2:	4b77      	ldr	r3, [pc, #476]	; (80042b0 <HAL_RCC_OscConfig+0x474>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d118      	bne.n	8004110 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040de:	4b74      	ldr	r3, [pc, #464]	; (80042b0 <HAL_RCC_OscConfig+0x474>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a73      	ldr	r2, [pc, #460]	; (80042b0 <HAL_RCC_OscConfig+0x474>)
 80040e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ea:	f7fd f917 	bl	800131c <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f2:	f7fd f913 	bl	800131c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e10c      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	4b6a      	ldr	r3, [pc, #424]	; (80042b0 <HAL_RCC_OscConfig+0x474>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d106      	bne.n	8004126 <HAL_RCC_OscConfig+0x2ea>
 8004118:	4b64      	ldr	r3, [pc, #400]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	4a63      	ldr	r2, [pc, #396]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	6713      	str	r3, [r2, #112]	; 0x70
 8004124:	e01c      	b.n	8004160 <HAL_RCC_OscConfig+0x324>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b05      	cmp	r3, #5
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0x30c>
 800412e:	4b5f      	ldr	r3, [pc, #380]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	4a5e      	ldr	r2, [pc, #376]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 8004134:	f043 0304 	orr.w	r3, r3, #4
 8004138:	6713      	str	r3, [r2, #112]	; 0x70
 800413a:	4b5c      	ldr	r3, [pc, #368]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	4a5b      	ldr	r2, [pc, #364]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	6713      	str	r3, [r2, #112]	; 0x70
 8004146:	e00b      	b.n	8004160 <HAL_RCC_OscConfig+0x324>
 8004148:	4b58      	ldr	r3, [pc, #352]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a57      	ldr	r2, [pc, #348]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
 8004154:	4b55      	ldr	r3, [pc, #340]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	4a54      	ldr	r2, [pc, #336]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 800415a:	f023 0304 	bic.w	r3, r3, #4
 800415e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d015      	beq.n	8004194 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004168:	f7fd f8d8 	bl	800131c <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416e:	e00a      	b.n	8004186 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004170:	f7fd f8d4 	bl	800131c <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	; 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e0cb      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004186:	4b49      	ldr	r3, [pc, #292]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0ee      	beq.n	8004170 <HAL_RCC_OscConfig+0x334>
 8004192:	e014      	b.n	80041be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004194:	f7fd f8c2 	bl	800131c <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800419c:	f7fd f8be 	bl	800131c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e0b5      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b2:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1ee      	bne.n	800419c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d105      	bne.n	80041d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c4:	4b39      	ldr	r3, [pc, #228]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	4a38      	ldr	r2, [pc, #224]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 80041ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80a1 	beq.w	800431c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041da:	4b34      	ldr	r3, [pc, #208]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d05c      	beq.n	80042a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d141      	bne.n	8004272 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <HAL_RCC_OscConfig+0x478>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fd f892 	bl	800131c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fd f88e 	bl	800131c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e087      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	4b27      	ldr	r3, [pc, #156]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	019b      	lsls	r3, r3, #6
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	3b01      	subs	r3, #1
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	061b      	lsls	r3, r3, #24
 800423e:	491b      	ldr	r1, [pc, #108]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 8004240:	4313      	orrs	r3, r2
 8004242:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004244:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <HAL_RCC_OscConfig+0x478>)
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424a:	f7fd f867 	bl	800131c <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004252:	f7fd f863 	bl	800131c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e05c      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004264:	4b11      	ldr	r3, [pc, #68]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x416>
 8004270:	e054      	b.n	800431c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <HAL_RCC_OscConfig+0x478>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fd f850 	bl	800131c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004280:	f7fd f84c 	bl	800131c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e045      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <HAL_RCC_OscConfig+0x470>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x444>
 800429e:	e03d      	b.n	800431c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d107      	bne.n	80042b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e038      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40007000 	.word	0x40007000
 80042b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042b8:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <HAL_RCC_OscConfig+0x4ec>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d028      	beq.n	8004318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d121      	bne.n	8004318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042de:	429a      	cmp	r2, r3
 80042e0:	d11a      	bne.n	8004318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042e8:	4013      	ands	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d111      	bne.n	8004318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	3b01      	subs	r3, #1
 8004302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004304:	429a      	cmp	r2, r3
 8004306:	d107      	bne.n	8004318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004314:	429a      	cmp	r2, r3
 8004316:	d001      	beq.n	800431c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800

0800432c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0cc      	b.n	80044da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004340:	4b68      	ldr	r3, [pc, #416]	; (80044e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d90c      	bls.n	8004368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b65      	ldr	r3, [pc, #404]	; (80044e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004356:	4b63      	ldr	r3, [pc, #396]	; (80044e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0b8      	b.n	80044da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d020      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004380:	4b59      	ldr	r3, [pc, #356]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4a58      	ldr	r2, [pc, #352]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800438a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004398:	4b53      	ldr	r3, [pc, #332]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4a52      	ldr	r2, [pc, #328]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a4:	4b50      	ldr	r3, [pc, #320]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	494d      	ldr	r1, [pc, #308]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d044      	beq.n	800444c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d107      	bne.n	80043da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ca:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d119      	bne.n	800440a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e07f      	b.n	80044da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d003      	beq.n	80043ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d107      	bne.n	80043fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ea:	4b3f      	ldr	r3, [pc, #252]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e06f      	b.n	80044da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fa:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e067      	b.n	80044da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800440a:	4b37      	ldr	r3, [pc, #220]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f023 0203 	bic.w	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	4934      	ldr	r1, [pc, #208]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	4313      	orrs	r3, r2
 800441a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800441c:	f7fc ff7e 	bl	800131c <HAL_GetTick>
 8004420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004422:	e00a      	b.n	800443a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004424:	f7fc ff7a 	bl	800131c <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e04f      	b.n	80044da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443a:	4b2b      	ldr	r3, [pc, #172]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 020c 	and.w	r2, r3, #12
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	429a      	cmp	r2, r3
 800444a:	d1eb      	bne.n	8004424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800444c:	4b25      	ldr	r3, [pc, #148]	; (80044e4 <HAL_RCC_ClockConfig+0x1b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d20c      	bcs.n	8004474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445a:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <HAL_RCC_ClockConfig+0x1b8>)
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e032      	b.n	80044da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004480:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	4916      	ldr	r1, [pc, #88]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800449e:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	490e      	ldr	r1, [pc, #56]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044b2:	f000 f821 	bl	80044f8 <HAL_RCC_GetSysClockFreq>
 80044b6:	4602      	mov	r2, r0
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	490a      	ldr	r1, [pc, #40]	; (80044ec <HAL_RCC_ClockConfig+0x1c0>)
 80044c4:	5ccb      	ldrb	r3, [r1, r3]
 80044c6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ca:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 80044cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044ce:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <HAL_RCC_ClockConfig+0x1c8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fc fede 	bl	8001294 <HAL_InitTick>

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40023c00 	.word	0x40023c00
 80044e8:	40023800 	.word	0x40023800
 80044ec:	0800993c 	.word	0x0800993c
 80044f0:	20000008 	.word	0x20000008
 80044f4:	2000000c 	.word	0x2000000c

080044f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044fc:	b094      	sub	sp, #80	; 0x50
 80044fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	647b      	str	r3, [r7, #68]	; 0x44
 8004504:	2300      	movs	r3, #0
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004508:	2300      	movs	r3, #0
 800450a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004510:	4b79      	ldr	r3, [pc, #484]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 030c 	and.w	r3, r3, #12
 8004518:	2b08      	cmp	r3, #8
 800451a:	d00d      	beq.n	8004538 <HAL_RCC_GetSysClockFreq+0x40>
 800451c:	2b08      	cmp	r3, #8
 800451e:	f200 80e1 	bhi.w	80046e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0x34>
 8004526:	2b04      	cmp	r3, #4
 8004528:	d003      	beq.n	8004532 <HAL_RCC_GetSysClockFreq+0x3a>
 800452a:	e0db      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800452c:	4b73      	ldr	r3, [pc, #460]	; (80046fc <HAL_RCC_GetSysClockFreq+0x204>)
 800452e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004530:	e0db      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004532:	4b73      	ldr	r3, [pc, #460]	; (8004700 <HAL_RCC_GetSysClockFreq+0x208>)
 8004534:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004536:	e0d8      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004538:	4b6f      	ldr	r3, [pc, #444]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004540:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004542:	4b6d      	ldr	r3, [pc, #436]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d063      	beq.n	8004616 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454e:	4b6a      	ldr	r3, [pc, #424]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	099b      	lsrs	r3, r3, #6
 8004554:	2200      	movs	r2, #0
 8004556:	63bb      	str	r3, [r7, #56]	; 0x38
 8004558:	63fa      	str	r2, [r7, #60]	; 0x3c
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004560:	633b      	str	r3, [r7, #48]	; 0x30
 8004562:	2300      	movs	r3, #0
 8004564:	637b      	str	r3, [r7, #52]	; 0x34
 8004566:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800456a:	4622      	mov	r2, r4
 800456c:	462b      	mov	r3, r5
 800456e:	f04f 0000 	mov.w	r0, #0
 8004572:	f04f 0100 	mov.w	r1, #0
 8004576:	0159      	lsls	r1, r3, #5
 8004578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800457c:	0150      	lsls	r0, r2, #5
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4621      	mov	r1, r4
 8004584:	1a51      	subs	r1, r2, r1
 8004586:	6139      	str	r1, [r7, #16]
 8004588:	4629      	mov	r1, r5
 800458a:	eb63 0301 	sbc.w	r3, r3, r1
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800459c:	4659      	mov	r1, fp
 800459e:	018b      	lsls	r3, r1, #6
 80045a0:	4651      	mov	r1, sl
 80045a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045a6:	4651      	mov	r1, sl
 80045a8:	018a      	lsls	r2, r1, #6
 80045aa:	4651      	mov	r1, sl
 80045ac:	ebb2 0801 	subs.w	r8, r2, r1
 80045b0:	4659      	mov	r1, fp
 80045b2:	eb63 0901 	sbc.w	r9, r3, r1
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ca:	4690      	mov	r8, r2
 80045cc:	4699      	mov	r9, r3
 80045ce:	4623      	mov	r3, r4
 80045d0:	eb18 0303 	adds.w	r3, r8, r3
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	462b      	mov	r3, r5
 80045d8:	eb49 0303 	adc.w	r3, r9, r3
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045ea:	4629      	mov	r1, r5
 80045ec:	024b      	lsls	r3, r1, #9
 80045ee:	4621      	mov	r1, r4
 80045f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045f4:	4621      	mov	r1, r4
 80045f6:	024a      	lsls	r2, r1, #9
 80045f8:	4610      	mov	r0, r2
 80045fa:	4619      	mov	r1, r3
 80045fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fe:	2200      	movs	r2, #0
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
 8004602:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004604:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004608:	f7fb fdde 	bl	80001c8 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4613      	mov	r3, r2
 8004612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004614:	e058      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004616:	4b38      	ldr	r3, [pc, #224]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	099b      	lsrs	r3, r3, #6
 800461c:	2200      	movs	r2, #0
 800461e:	4618      	mov	r0, r3
 8004620:	4611      	mov	r1, r2
 8004622:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004626:	623b      	str	r3, [r7, #32]
 8004628:	2300      	movs	r3, #0
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
 800462c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	f04f 0000 	mov.w	r0, #0
 8004638:	f04f 0100 	mov.w	r1, #0
 800463c:	0159      	lsls	r1, r3, #5
 800463e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004642:	0150      	lsls	r0, r2, #5
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4641      	mov	r1, r8
 800464a:	ebb2 0a01 	subs.w	sl, r2, r1
 800464e:	4649      	mov	r1, r9
 8004650:	eb63 0b01 	sbc.w	fp, r3, r1
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004660:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004664:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004668:	ebb2 040a 	subs.w	r4, r2, sl
 800466c:	eb63 050b 	sbc.w	r5, r3, fp
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	00eb      	lsls	r3, r5, #3
 800467a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800467e:	00e2      	lsls	r2, r4, #3
 8004680:	4614      	mov	r4, r2
 8004682:	461d      	mov	r5, r3
 8004684:	4643      	mov	r3, r8
 8004686:	18e3      	adds	r3, r4, r3
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	464b      	mov	r3, r9
 800468c:	eb45 0303 	adc.w	r3, r5, r3
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800469e:	4629      	mov	r1, r5
 80046a0:	028b      	lsls	r3, r1, #10
 80046a2:	4621      	mov	r1, r4
 80046a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046a8:	4621      	mov	r1, r4
 80046aa:	028a      	lsls	r2, r1, #10
 80046ac:	4610      	mov	r0, r2
 80046ae:	4619      	mov	r1, r3
 80046b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b2:	2200      	movs	r2, #0
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	61fa      	str	r2, [r7, #28]
 80046b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046bc:	f7fb fd84 	bl	80001c8 <__aeabi_uldivmod>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4613      	mov	r3, r2
 80046c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	0c1b      	lsrs	r3, r3, #16
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	3301      	adds	r3, #1
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80046d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046e2:	e002      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_GetSysClockFreq+0x204>)
 80046e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3750      	adds	r7, #80	; 0x50
 80046f0:	46bd      	mov	sp, r7
 80046f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800
 80046fc:	00f42400 	.word	0x00f42400
 8004700:	007a1200 	.word	0x007a1200

08004704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_RCC_GetHCLKFreq+0x14>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000008 	.word	0x20000008

0800471c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004720:	f7ff fff0 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	0a9b      	lsrs	r3, r3, #10
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4903      	ldr	r1, [pc, #12]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40023800 	.word	0x40023800
 8004740:	0800994c 	.word	0x0800994c

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004748:	f7ff ffdc 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	0b5b      	lsrs	r3, r3, #13
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4903      	ldr	r1, [pc, #12]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40023800 	.word	0x40023800
 8004768:	0800994c 	.word	0x0800994c

0800476c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004790:	2b00      	cmp	r3, #0
 8004792:	d035      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004794:	4b62      	ldr	r3, [pc, #392]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800479a:	f7fc fdbf 	bl	800131c <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047a2:	f7fc fdbb 	bl	800131c <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e0b0      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047b4:	4b5b      	ldr	r3, [pc, #364]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f0      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	019a      	lsls	r2, r3, #6
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	071b      	lsls	r3, r3, #28
 80047cc:	4955      	ldr	r1, [pc, #340]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047d4:	4b52      	ldr	r3, [pc, #328]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047da:	f7fc fd9f 	bl	800131c <HAL_GetTick>
 80047de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047e2:	f7fc fd9b 	bl	800131c <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e090      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047f4:	4b4b      	ldr	r3, [pc, #300]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 8083 	beq.w	8004914 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	4b44      	ldr	r3, [pc, #272]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	4a43      	ldr	r2, [pc, #268]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481c:	6413      	str	r3, [r2, #64]	; 0x40
 800481e:	4b41      	ldr	r3, [pc, #260]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800482a:	4b3f      	ldr	r3, [pc, #252]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a3e      	ldr	r2, [pc, #248]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004834:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004836:	f7fc fd71 	bl	800131c <HAL_GetTick>
 800483a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800483c:	e008      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800483e:	f7fc fd6d 	bl	800131c <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e062      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004850:	4b35      	ldr	r3, [pc, #212]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800485c:	4b31      	ldr	r3, [pc, #196]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004864:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d02f      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	429a      	cmp	r2, r3
 8004878:	d028      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800487a:	4b2a      	ldr	r3, [pc, #168]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004882:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004884:	4b29      	ldr	r3, [pc, #164]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800488a:	4b28      	ldr	r3, [pc, #160]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004890:	4a24      	ldr	r2, [pc, #144]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004896:	4b23      	ldr	r3, [pc, #140]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d114      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80048a2:	f7fc fd3b 	bl	800131c <HAL_GetTick>
 80048a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fc fd37 	bl	800131c <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e02a      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c0:	4b18      	ldr	r3, [pc, #96]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0ee      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048d8:	d10d      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80048da:	4b12      	ldr	r3, [pc, #72]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80048ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ee:	490d      	ldr	r1, [pc, #52]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	608b      	str	r3, [r1, #8]
 80048f4:	e005      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	4a0a      	ldr	r2, [pc, #40]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004900:	6093      	str	r3, [r2, #8]
 8004902:	4b08      	ldr	r3, [pc, #32]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004904:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490e:	4905      	ldr	r1, [pc, #20]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004910:	4313      	orrs	r3, r2
 8004912:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	42470068 	.word	0x42470068
 8004924:	40023800 	.word	0x40023800
 8004928:	40007000 	.word	0x40007000
 800492c:	42470e40 	.word	0x42470e40

08004930 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d13e      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800494e:	4b23      	ldr	r3, [pc, #140]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d12f      	bne.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004964:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004966:	617b      	str	r3, [r7, #20]
          break;
 8004968:	e02f      	b.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800496a:	4b1c      	ldr	r3, [pc, #112]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004976:	d108      	bne.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004978:	4b18      	ldr	r3, [pc, #96]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004980:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	e007      	b.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800498a:	4b14      	ldr	r3, [pc, #80]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004992:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800499c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a0:	099b      	lsrs	r3, r3, #6
 80049a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	fb02 f303 	mul.w	r3, r2, r3
 80049ac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b4:	0f1b      	lsrs	r3, r3, #28
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	617b      	str	r3, [r7, #20]
          break;
 80049c2:	e002      	b.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
          break;
 80049c8:	bf00      	nop
        }
      }
      break;
 80049ca:	bf00      	nop
    }
  }
  return frequency;
 80049cc:	697b      	ldr	r3, [r7, #20]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
 80049e0:	00bb8000 	.word	0x00bb8000
 80049e4:	007a1200 	.word	0x007a1200
 80049e8:	00f42400 	.word	0x00f42400

080049ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e041      	b.n	8004a82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fc fa66 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f000 f9ce 	bl	8004dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e04e      	b.n	8004b42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a23      	ldr	r2, [pc, #140]	; (8004b50 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d022      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ace:	d01d      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1f      	ldr	r2, [pc, #124]	; (8004b54 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d018      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d009      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a19      	ldr	r2, [pc, #100]	; (8004b64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d111      	bne.n	8004b30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d010      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2e:	e007      	b.n	8004b40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40010400 	.word	0x40010400
 8004b64:	40014000 	.word	0x40014000
 8004b68:	40001800 	.word	0x40001800

08004b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d122      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0202 	mvn.w	r2, #2
 8004b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8ee 	bl	8004d90 <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8e0 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f8f1 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d122      	bne.n	8004c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d11b      	bne.n	8004c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0204 	mvn.w	r2, #4
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f8c4 	bl	8004d90 <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8b6 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f8c7 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d122      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d11b      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0208 	mvn.w	r2, #8
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2204      	movs	r2, #4
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f89a 	bl	8004d90 <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f88c 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f89d 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b10      	cmp	r3, #16
 8004c7c:	d122      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d11b      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0210 	mvn.w	r2, #16
 8004c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f870 	bl	8004d90 <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f862 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f873 	bl	8004da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d107      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0201 	mvn.w	r2, #1
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fb ff88 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d10e      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	d107      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f902 	bl	8004f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d10e      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d107      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f838 	bl	8004db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d10e      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d107      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0220 	mvn.w	r2, #32
 8004d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f8cc 	bl	8004f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a40      	ldr	r2, [pc, #256]	; (8004ee0 <TIM_Base_SetConfig+0x114>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d013      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dea:	d00f      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a3d      	ldr	r2, [pc, #244]	; (8004ee4 <TIM_Base_SetConfig+0x118>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a3c      	ldr	r2, [pc, #240]	; (8004ee8 <TIM_Base_SetConfig+0x11c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a3b      	ldr	r2, [pc, #236]	; (8004eec <TIM_Base_SetConfig+0x120>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a3a      	ldr	r2, [pc, #232]	; (8004ef0 <TIM_Base_SetConfig+0x124>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d108      	bne.n	8004e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2f      	ldr	r2, [pc, #188]	; (8004ee0 <TIM_Base_SetConfig+0x114>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d02b      	beq.n	8004e7e <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2c:	d027      	beq.n	8004e7e <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2c      	ldr	r2, [pc, #176]	; (8004ee4 <TIM_Base_SetConfig+0x118>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d023      	beq.n	8004e7e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2b      	ldr	r2, [pc, #172]	; (8004ee8 <TIM_Base_SetConfig+0x11c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01f      	beq.n	8004e7e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2a      	ldr	r2, [pc, #168]	; (8004eec <TIM_Base_SetConfig+0x120>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01b      	beq.n	8004e7e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a29      	ldr	r2, [pc, #164]	; (8004ef0 <TIM_Base_SetConfig+0x124>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d017      	beq.n	8004e7e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a28      	ldr	r2, [pc, #160]	; (8004ef4 <TIM_Base_SetConfig+0x128>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a27      	ldr	r2, [pc, #156]	; (8004ef8 <TIM_Base_SetConfig+0x12c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00f      	beq.n	8004e7e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a26      	ldr	r2, [pc, #152]	; (8004efc <TIM_Base_SetConfig+0x130>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00b      	beq.n	8004e7e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a25      	ldr	r2, [pc, #148]	; (8004f00 <TIM_Base_SetConfig+0x134>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d007      	beq.n	8004e7e <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a24      	ldr	r2, [pc, #144]	; (8004f04 <TIM_Base_SetConfig+0x138>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d003      	beq.n	8004e7e <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a23      	ldr	r2, [pc, #140]	; (8004f08 <TIM_Base_SetConfig+0x13c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d108      	bne.n	8004e90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	; (8004ee0 <TIM_Base_SetConfig+0x114>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <TIM_Base_SetConfig+0xf8>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a0c      	ldr	r2, [pc, #48]	; (8004ef0 <TIM_Base_SetConfig+0x124>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d103      	bne.n	8004ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	615a      	str	r2, [r3, #20]
}
 8004ed2:	bf00      	nop
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	40000400 	.word	0x40000400
 8004ee8:	40000800 	.word	0x40000800
 8004eec:	40000c00 	.word	0x40000c00
 8004ef0:	40010400 	.word	0x40010400
 8004ef4:	40014000 	.word	0x40014000
 8004ef8:	40014400 	.word	0x40014400
 8004efc:	40014800 	.word	0x40014800
 8004f00:	40001800 	.word	0x40001800
 8004f04:	40001c00 	.word	0x40001c00
 8004f08:	40002000 	.word	0x40002000

08004f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e057      	b.n	8004ff8 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7fb ffe9 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2224      	movs	r2, #36	; 0x24
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f78:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fe32 	bl	8005be4 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f9e:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fae:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0220 	bic.w	r2, r2, #32
 8004fbe:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6919      	ldr	r1, [r3, #16]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fde:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b20      	cmp	r3, #32
 800501e:	d17c      	bne.n	800511a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_UART_Transmit+0x2c>
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e075      	b.n	800511c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_UART_Transmit+0x3e>
 800503a:	2302      	movs	r3, #2
 800503c:	e06e      	b.n	800511c <HAL_UART_Transmit+0x11c>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2221      	movs	r2, #33	; 0x21
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005054:	f7fc f962 	bl	800131c <HAL_GetTick>
 8005058:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	88fa      	ldrh	r2, [r7, #6]
 800505e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506e:	d108      	bne.n	8005082 <HAL_UART_Transmit+0x82>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005078:	2300      	movs	r3, #0
 800507a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	e003      	b.n	800508a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005092:	e02a      	b.n	80050ea <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2200      	movs	r2, #0
 800509c:	2180      	movs	r1, #128	; 0x80
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fb5a 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e036      	b.n	800511c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	3302      	adds	r3, #2
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	e007      	b.n	80050dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	781a      	ldrb	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	3301      	adds	r3, #1
 80050da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1cf      	bne.n	8005094 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2140      	movs	r1, #64	; 0x40
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fb2a 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e006      	b.n	800511c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	e000      	b.n	800511c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800511a:	2302      	movs	r3, #2
  }
}
 800511c:	4618      	mov	r0, r3
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	4613      	mov	r3, r2
 8005130:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b20      	cmp	r3, #32
 800513c:	d11d      	bne.n	800517a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_UART_Receive_IT+0x26>
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e016      	b.n	800517c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <HAL_UART_Receive_IT+0x38>
 8005158:	2302      	movs	r3, #2
 800515a:	e00f      	b.n	800517c <HAL_UART_Receive_IT+0x58>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	461a      	mov	r2, r3
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fb5f 	bl	8005834 <UART_Start_Receive_IT>
 8005176:	4603      	mov	r3, r0
 8005178:	e000      	b.n	800517c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800517a:	2302      	movs	r3, #2
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b0ba      	sub	sp, #232	; 0xe8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10f      	bne.n	80051ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_UART_IRQHandler+0x66>
 80051d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fc43 	bl	8005a6e <UART_Receive_IT>
      return;
 80051e8:	e256      	b.n	8005698 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 80de 	beq.w	80053b0 <HAL_UART_IRQHandler+0x22c>
 80051f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d106      	bne.n	800520e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005204:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80d1 	beq.w	80053b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800520e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <HAL_UART_IRQHandler+0xae>
 800521a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f043 0201 	orr.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00b      	beq.n	8005256 <HAL_UART_IRQHandler+0xd2>
 800523e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d005      	beq.n	8005256 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	f043 0202 	orr.w	r2, r3, #2
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <HAL_UART_IRQHandler+0xf6>
 8005262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f043 0204 	orr.w	r2, r3, #4
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800527a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d011      	beq.n	80052aa <HAL_UART_IRQHandler+0x126>
 8005286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d105      	bne.n	800529e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f043 0208 	orr.w	r2, r3, #8
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 81ed 	beq.w	800568e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_UART_IRQHandler+0x14e>
 80052c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fbce 	bl	8005a6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052dc:	2b40      	cmp	r3, #64	; 0x40
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <HAL_UART_IRQHandler+0x17a>
 80052f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d04f      	beq.n	800539e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fad6 	bl	80058b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530e:	2b40      	cmp	r3, #64	; 0x40
 8005310:	d141      	bne.n	8005396 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3314      	adds	r3, #20
 8005318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800532c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3314      	adds	r3, #20
 800533a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800533e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800534a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1d9      	bne.n	8005312 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	2b00      	cmp	r3, #0
 8005364:	d013      	beq.n	800538e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	4a7d      	ldr	r2, [pc, #500]	; (8005560 <HAL_UART_IRQHandler+0x3dc>)
 800536c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	4618      	mov	r0, r3
 8005374:	f7fc f983 	bl	800167e <HAL_DMA_Abort_IT>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005388:	4610      	mov	r0, r2
 800538a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800538c:	e00e      	b.n	80053ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f990 	bl	80056b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005394:	e00a      	b.n	80053ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f98c 	bl	80056b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539c:	e006      	b.n	80053ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f988 	bl	80056b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053aa:	e170      	b.n	800568e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	bf00      	nop
    return;
 80053ae:	e16e      	b.n	800568e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	f040 814a 	bne.w	800564e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8143 	beq.w	800564e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 813c 	beq.w	800564e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053d6:	2300      	movs	r3, #0
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	f040 80b4 	bne.w	8005564 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005408:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8140 	beq.w	8005692 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800541a:	429a      	cmp	r2, r3
 800541c:	f080 8139 	bcs.w	8005692 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005426:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005432:	f000 8088 	beq.w	8005546 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	330c      	adds	r3, #12
 800543c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800544c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005462:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800546e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800547a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1d9      	bne.n	8005436 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3314      	adds	r3, #20
 8005488:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005494:	f023 0301 	bic.w	r3, r3, #1
 8005498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3314      	adds	r3, #20
 80054a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e1      	bne.n	8005482 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3314      	adds	r3, #20
 80054c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3314      	adds	r3, #20
 80054de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e3      	bne.n	80054be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	330c      	adds	r3, #12
 800550a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005516:	f023 0310 	bic.w	r3, r3, #16
 800551a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	330c      	adds	r3, #12
 8005524:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005528:	65ba      	str	r2, [r7, #88]	; 0x58
 800552a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800552e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e3      	bne.n	8005504 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	4618      	mov	r0, r3
 8005542:	f7fc f82c 	bl	800159e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800554e:	b29b      	uxth	r3, r3
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	b29b      	uxth	r3, r3
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8b6 	bl	80056c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800555c:	e099      	b.n	8005692 <HAL_UART_IRQHandler+0x50e>
 800555e:	bf00      	nop
 8005560:	08005977 	.word	0x08005977
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800556c:	b29b      	uxth	r3, r3
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005578:	b29b      	uxth	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 808b 	beq.w	8005696 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8086 	beq.w	8005696 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800559a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	330c      	adds	r3, #12
 80055aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055ae:	647a      	str	r2, [r7, #68]	; 0x44
 80055b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e3      	bne.n	800558a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3314      	adds	r3, #20
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	623b      	str	r3, [r7, #32]
   return(result);
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3314      	adds	r3, #20
 80055e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055e6:	633a      	str	r2, [r7, #48]	; 0x30
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e3      	bne.n	80055c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	60fb      	str	r3, [r7, #12]
   return(result);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0310 	bic.w	r3, r3, #16
 800561e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	330c      	adds	r3, #12
 8005628:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800562c:	61fa      	str	r2, [r7, #28]
 800562e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	69b9      	ldr	r1, [r7, #24]
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	617b      	str	r3, [r7, #20]
   return(result);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e3      	bne.n	8005608 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f83e 	bl	80056c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800564c:	e023      	b.n	8005696 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800564e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005656:	2b00      	cmp	r3, #0
 8005658:	d009      	beq.n	800566e <HAL_UART_IRQHandler+0x4ea>
 800565a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800565e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f999 	bl	800599e <UART_Transmit_IT>
    return;
 800566c:	e014      	b.n	8005698 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800566e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00e      	beq.n	8005698 <HAL_UART_IRQHandler+0x514>
 800567a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d008      	beq.n	8005698 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9d9 	bl	8005a3e <UART_EndTransmit_IT>
    return;
 800568c:	e004      	b.n	8005698 <HAL_UART_IRQHandler+0x514>
    return;
 800568e:	bf00      	nop
 8005690:	e002      	b.n	8005698 <HAL_UART_IRQHandler+0x514>
      return;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <HAL_UART_IRQHandler+0x514>
      return;
 8005696:	bf00      	nop
  }
}
 8005698:	37e8      	adds	r7, #232	; 0xe8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop

080056a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b089      	sub	sp, #36	; 0x24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_LIN_SendBreak+0x16>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e02a      	b.n	800574c <HAL_LIN_SendBreak+0x6c>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2224      	movs	r2, #36	; 0x24
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	60bb      	str	r3, [r7, #8]
   return(result);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	61ba      	str	r2, [r7, #24]
 8005728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6979      	ldr	r1, [r7, #20]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	613b      	str	r3, [r7, #16]
   return(result);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e5      	bne.n	8005706 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3724      	adds	r7, #36	; 0x24
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b090      	sub	sp, #64	; 0x40
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005768:	e050      	b.n	800580c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d04c      	beq.n	800580c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <UART_WaitOnFlagUntilTimeout+0x30>
 8005778:	f7fb fdd0 	bl	800131c <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005784:	429a      	cmp	r2, r3
 8005786:	d241      	bcs.n	800580c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057a8:	637a      	str	r2, [r7, #52]	; 0x34
 80057aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3314      	adds	r3, #20
 80057c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	613b      	str	r3, [r7, #16]
   return(result);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3314      	adds	r3, #20
 80057da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057dc:	623a      	str	r2, [r7, #32]
 80057de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	69f9      	ldr	r1, [r7, #28]
 80057e2:	6a3a      	ldr	r2, [r7, #32]
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e5      	bne.n	80057bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e00f      	b.n	800582c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4013      	ands	r3, r2
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	429a      	cmp	r2, r3
 800581a:	bf0c      	ite	eq
 800581c:	2301      	moveq	r3, #1
 800581e:	2300      	movne	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	429a      	cmp	r2, r3
 8005828:	d09f      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3740      	adds	r7, #64	; 0x40
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	4613      	mov	r3, r2
 8005840:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	88fa      	ldrh	r2, [r7, #6]
 8005852:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2222      	movs	r2, #34	; 0x22
 800585e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d007      	beq.n	8005882 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005880:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695a      	ldr	r2, [r3, #20]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0201 	orr.w	r2, r2, #1
 8005890:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0220 	orr.w	r2, r2, #32
 80058a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b095      	sub	sp, #84	; 0x54
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058d8:	643a      	str	r2, [r7, #64]	; 0x40
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e5      	bne.n	80058b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3314      	adds	r3, #20
 80058f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	64bb      	str	r3, [r7, #72]	; 0x48
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3314      	adds	r3, #20
 800590a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800590c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800590e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e5      	bne.n	80058ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	2b01      	cmp	r3, #1
 8005926:	d119      	bne.n	800595c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	60bb      	str	r3, [r7, #8]
   return(result);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f023 0310 	bic.w	r3, r3, #16
 800593e:	647b      	str	r3, [r7, #68]	; 0x44
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005948:	61ba      	str	r2, [r7, #24]
 800594a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6979      	ldr	r1, [r7, #20]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	613b      	str	r3, [r7, #16]
   return(result);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e5      	bne.n	8005928 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2220      	movs	r2, #32
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	631a      	str	r2, [r3, #48]	; 0x30
}
 800596a:	bf00      	nop
 800596c:	3754      	adds	r7, #84	; 0x54
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff fe8f 	bl	80056b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b21      	cmp	r3, #33	; 0x21
 80059b0:	d13e      	bne.n	8005a30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ba:	d114      	bne.n	80059e6 <UART_Transmit_IT+0x48>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d110      	bne.n	80059e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	1c9a      	adds	r2, r3, #2
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	621a      	str	r2, [r3, #32]
 80059e4:	e008      	b.n	80059f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	1c59      	adds	r1, r3, #1
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6211      	str	r1, [r2, #32]
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	4619      	mov	r1, r3
 8005a06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10f      	bne.n	8005a2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e000      	b.n	8005a32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a30:	2302      	movs	r3, #2
  }
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff fe1e 	bl	80056a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b08c      	sub	sp, #48	; 0x30
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b22      	cmp	r3, #34	; 0x22
 8005a80:	f040 80ab 	bne.w	8005bda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8c:	d117      	bne.n	8005abe <UART_Receive_IT+0x50>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d113      	bne.n	8005abe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	1c9a      	adds	r2, r3, #2
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28
 8005abc:	e026      	b.n	8005b0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad0:	d007      	beq.n	8005ae2 <UART_Receive_IT+0x74>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <UART_Receive_IT+0x82>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e008      	b.n	8005b02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d15a      	bne.n	8005bd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0220 	bic.w	r2, r2, #32
 8005b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695a      	ldr	r2, [r3, #20]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d135      	bne.n	8005bcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	613b      	str	r3, [r7, #16]
   return(result);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f023 0310 	bic.w	r3, r3, #16
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	330c      	adds	r3, #12
 8005b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b86:	623a      	str	r2, [r7, #32]
 8005b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	69f9      	ldr	r1, [r7, #28]
 8005b8c:	6a3a      	ldr	r2, [r7, #32]
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e5      	bne.n	8005b66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b10      	cmp	r3, #16
 8005ba6:	d10a      	bne.n	8005bbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff fd7f 	bl	80056c8 <HAL_UARTEx_RxEventCallback>
 8005bca:	e002      	b.n	8005bd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7fb f821 	bl	8000c14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e002      	b.n	8005bdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e000      	b.n	8005bdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005bda:	2302      	movs	r3, #2
  }
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3730      	adds	r7, #48	; 0x30
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be8:	b0c0      	sub	sp, #256	; 0x100
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c00:	68d9      	ldr	r1, [r3, #12]
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	ea40 0301 	orr.w	r3, r0, r1
 8005c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c3c:	f021 010c 	bic.w	r1, r1, #12
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5e:	6999      	ldr	r1, [r3, #24]
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	ea40 0301 	orr.w	r3, r0, r1
 8005c6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b8f      	ldr	r3, [pc, #572]	; (8005eb0 <UART_SetConfig+0x2cc>)
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d005      	beq.n	8005c84 <UART_SetConfig+0xa0>
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b8d      	ldr	r3, [pc, #564]	; (8005eb4 <UART_SetConfig+0x2d0>)
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d104      	bne.n	8005c8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c84:	f7fe fd5e 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8005c88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c8c:	e003      	b.n	8005c96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c8e:	f7fe fd45 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 8005c92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca0:	f040 810c 	bne.w	8005ebc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cb6:	4622      	mov	r2, r4
 8005cb8:	462b      	mov	r3, r5
 8005cba:	1891      	adds	r1, r2, r2
 8005cbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cbe:	415b      	adcs	r3, r3
 8005cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	eb12 0801 	adds.w	r8, r2, r1
 8005ccc:	4629      	mov	r1, r5
 8005cce:	eb43 0901 	adc.w	r9, r3, r1
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ce6:	4690      	mov	r8, r2
 8005ce8:	4699      	mov	r9, r3
 8005cea:	4623      	mov	r3, r4
 8005cec:	eb18 0303 	adds.w	r3, r8, r3
 8005cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cf4:	462b      	mov	r3, r5
 8005cf6:	eb49 0303 	adc.w	r3, r9, r3
 8005cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d12:	460b      	mov	r3, r1
 8005d14:	18db      	adds	r3, r3, r3
 8005d16:	653b      	str	r3, [r7, #80]	; 0x50
 8005d18:	4613      	mov	r3, r2
 8005d1a:	eb42 0303 	adc.w	r3, r2, r3
 8005d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005d20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d28:	f7fa fa4e 	bl	80001c8 <__aeabi_uldivmod>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4b61      	ldr	r3, [pc, #388]	; (8005eb8 <UART_SetConfig+0x2d4>)
 8005d32:	fba3 2302 	umull	r2, r3, r3, r2
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	011c      	lsls	r4, r3, #4
 8005d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d4c:	4642      	mov	r2, r8
 8005d4e:	464b      	mov	r3, r9
 8005d50:	1891      	adds	r1, r2, r2
 8005d52:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d54:	415b      	adcs	r3, r3
 8005d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	eb12 0a01 	adds.w	sl, r2, r1
 8005d62:	4649      	mov	r1, r9
 8005d64:	eb43 0b01 	adc.w	fp, r3, r1
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d7c:	4692      	mov	sl, r2
 8005d7e:	469b      	mov	fp, r3
 8005d80:	4643      	mov	r3, r8
 8005d82:	eb1a 0303 	adds.w	r3, sl, r3
 8005d86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d8a:	464b      	mov	r3, r9
 8005d8c:	eb4b 0303 	adc.w	r3, fp, r3
 8005d90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005da0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005da4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005da8:	460b      	mov	r3, r1
 8005daa:	18db      	adds	r3, r3, r3
 8005dac:	643b      	str	r3, [r7, #64]	; 0x40
 8005dae:	4613      	mov	r3, r2
 8005db0:	eb42 0303 	adc.w	r3, r2, r3
 8005db4:	647b      	str	r3, [r7, #68]	; 0x44
 8005db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005dbe:	f7fa fa03 	bl	80001c8 <__aeabi_uldivmod>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4b3b      	ldr	r3, [pc, #236]	; (8005eb8 <UART_SetConfig+0x2d4>)
 8005dca:	fba3 2301 	umull	r2, r3, r3, r1
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	2264      	movs	r2, #100	; 0x64
 8005dd2:	fb02 f303 	mul.w	r3, r2, r3
 8005dd6:	1acb      	subs	r3, r1, r3
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005dde:	4b36      	ldr	r3, [pc, #216]	; (8005eb8 <UART_SetConfig+0x2d4>)
 8005de0:	fba3 2302 	umull	r2, r3, r3, r2
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dec:	441c      	add	r4, r3
 8005dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005df8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005dfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e00:	4642      	mov	r2, r8
 8005e02:	464b      	mov	r3, r9
 8005e04:	1891      	adds	r1, r2, r2
 8005e06:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e08:	415b      	adcs	r3, r3
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e10:	4641      	mov	r1, r8
 8005e12:	1851      	adds	r1, r2, r1
 8005e14:	6339      	str	r1, [r7, #48]	; 0x30
 8005e16:	4649      	mov	r1, r9
 8005e18:	414b      	adcs	r3, r1
 8005e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e28:	4659      	mov	r1, fp
 8005e2a:	00cb      	lsls	r3, r1, #3
 8005e2c:	4651      	mov	r1, sl
 8005e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e32:	4651      	mov	r1, sl
 8005e34:	00ca      	lsls	r2, r1, #3
 8005e36:	4610      	mov	r0, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	189b      	adds	r3, r3, r2
 8005e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e44:	464b      	mov	r3, r9
 8005e46:	460a      	mov	r2, r1
 8005e48:	eb42 0303 	adc.w	r3, r2, r3
 8005e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e64:	460b      	mov	r3, r1
 8005e66:	18db      	adds	r3, r3, r3
 8005e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	eb42 0303 	adc.w	r3, r2, r3
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e7a:	f7fa f9a5 	bl	80001c8 <__aeabi_uldivmod>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <UART_SetConfig+0x2d4>)
 8005e84:	fba3 1302 	umull	r1, r3, r3, r2
 8005e88:	095b      	lsrs	r3, r3, #5
 8005e8a:	2164      	movs	r1, #100	; 0x64
 8005e8c:	fb01 f303 	mul.w	r3, r1, r3
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	3332      	adds	r3, #50	; 0x32
 8005e96:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <UART_SetConfig+0x2d4>)
 8005e98:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	f003 0207 	and.w	r2, r3, #7
 8005ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4422      	add	r2, r4
 8005eaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005eac:	e106      	b.n	80060bc <UART_SetConfig+0x4d8>
 8005eae:	bf00      	nop
 8005eb0:	40011000 	.word	0x40011000
 8005eb4:	40011400 	.word	0x40011400
 8005eb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ec6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005eca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ece:	4642      	mov	r2, r8
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	1891      	adds	r1, r2, r2
 8005ed4:	6239      	str	r1, [r7, #32]
 8005ed6:	415b      	adcs	r3, r3
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ede:	4641      	mov	r1, r8
 8005ee0:	1854      	adds	r4, r2, r1
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	eb43 0501 	adc.w	r5, r3, r1
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	00eb      	lsls	r3, r5, #3
 8005ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ef6:	00e2      	lsls	r2, r4, #3
 8005ef8:	4614      	mov	r4, r2
 8005efa:	461d      	mov	r5, r3
 8005efc:	4643      	mov	r3, r8
 8005efe:	18e3      	adds	r3, r4, r3
 8005f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f04:	464b      	mov	r3, r9
 8005f06:	eb45 0303 	adc.w	r3, r5, r3
 8005f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	f04f 0300 	mov.w	r3, #0
 8005f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	008b      	lsls	r3, r1, #2
 8005f2e:	4621      	mov	r1, r4
 8005f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f34:	4621      	mov	r1, r4
 8005f36:	008a      	lsls	r2, r1, #2
 8005f38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f3c:	f7fa f944 	bl	80001c8 <__aeabi_uldivmod>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4b60      	ldr	r3, [pc, #384]	; (80060c8 <UART_SetConfig+0x4e4>)
 8005f46:	fba3 2302 	umull	r2, r3, r3, r2
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	011c      	lsls	r4, r3, #4
 8005f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f60:	4642      	mov	r2, r8
 8005f62:	464b      	mov	r3, r9
 8005f64:	1891      	adds	r1, r2, r2
 8005f66:	61b9      	str	r1, [r7, #24]
 8005f68:	415b      	adcs	r3, r3
 8005f6a:	61fb      	str	r3, [r7, #28]
 8005f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f70:	4641      	mov	r1, r8
 8005f72:	1851      	adds	r1, r2, r1
 8005f74:	6139      	str	r1, [r7, #16]
 8005f76:	4649      	mov	r1, r9
 8005f78:	414b      	adcs	r3, r1
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f88:	4659      	mov	r1, fp
 8005f8a:	00cb      	lsls	r3, r1, #3
 8005f8c:	4651      	mov	r1, sl
 8005f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f92:	4651      	mov	r1, sl
 8005f94:	00ca      	lsls	r2, r1, #3
 8005f96:	4610      	mov	r0, r2
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	4642      	mov	r2, r8
 8005f9e:	189b      	adds	r3, r3, r2
 8005fa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	460a      	mov	r2, r1
 8005fa8:	eb42 0303 	adc.w	r3, r2, r3
 8005fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fc8:	4649      	mov	r1, r9
 8005fca:	008b      	lsls	r3, r1, #2
 8005fcc:	4641      	mov	r1, r8
 8005fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	008a      	lsls	r2, r1, #2
 8005fd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005fda:	f7fa f8f5 	bl	80001c8 <__aeabi_uldivmod>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	4b38      	ldr	r3, [pc, #224]	; (80060c8 <UART_SetConfig+0x4e4>)
 8005fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	2264      	movs	r2, #100	; 0x64
 8005fee:	fb02 f303 	mul.w	r3, r2, r3
 8005ff2:	1acb      	subs	r3, r1, r3
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	3332      	adds	r3, #50	; 0x32
 8005ff8:	4a33      	ldr	r2, [pc, #204]	; (80060c8 <UART_SetConfig+0x4e4>)
 8005ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006004:	441c      	add	r4, r3
 8006006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800600a:	2200      	movs	r2, #0
 800600c:	673b      	str	r3, [r7, #112]	; 0x70
 800600e:	677a      	str	r2, [r7, #116]	; 0x74
 8006010:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006014:	4642      	mov	r2, r8
 8006016:	464b      	mov	r3, r9
 8006018:	1891      	adds	r1, r2, r2
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	415b      	adcs	r3, r3
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006024:	4641      	mov	r1, r8
 8006026:	1851      	adds	r1, r2, r1
 8006028:	6039      	str	r1, [r7, #0]
 800602a:	4649      	mov	r1, r9
 800602c:	414b      	adcs	r3, r1
 800602e:	607b      	str	r3, [r7, #4]
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800603c:	4659      	mov	r1, fp
 800603e:	00cb      	lsls	r3, r1, #3
 8006040:	4651      	mov	r1, sl
 8006042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006046:	4651      	mov	r1, sl
 8006048:	00ca      	lsls	r2, r1, #3
 800604a:	4610      	mov	r0, r2
 800604c:	4619      	mov	r1, r3
 800604e:	4603      	mov	r3, r0
 8006050:	4642      	mov	r2, r8
 8006052:	189b      	adds	r3, r3, r2
 8006054:	66bb      	str	r3, [r7, #104]	; 0x68
 8006056:	464b      	mov	r3, r9
 8006058:	460a      	mov	r2, r1
 800605a:	eb42 0303 	adc.w	r3, r2, r3
 800605e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	663b      	str	r3, [r7, #96]	; 0x60
 800606a:	667a      	str	r2, [r7, #100]	; 0x64
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006078:	4649      	mov	r1, r9
 800607a:	008b      	lsls	r3, r1, #2
 800607c:	4641      	mov	r1, r8
 800607e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006082:	4641      	mov	r1, r8
 8006084:	008a      	lsls	r2, r1, #2
 8006086:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800608a:	f7fa f89d 	bl	80001c8 <__aeabi_uldivmod>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4b0d      	ldr	r3, [pc, #52]	; (80060c8 <UART_SetConfig+0x4e4>)
 8006094:	fba3 1302 	umull	r1, r3, r3, r2
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	2164      	movs	r1, #100	; 0x64
 800609c:	fb01 f303 	mul.w	r3, r1, r3
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	3332      	adds	r3, #50	; 0x32
 80060a6:	4a08      	ldr	r2, [pc, #32]	; (80060c8 <UART_SetConfig+0x4e4>)
 80060a8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ac:	095b      	lsrs	r3, r3, #5
 80060ae:	f003 020f 	and.w	r2, r3, #15
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4422      	add	r2, r4
 80060ba:	609a      	str	r2, [r3, #8]
}
 80060bc:	bf00      	nop
 80060be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060c2:	46bd      	mov	sp, r7
 80060c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060c8:	51eb851f 	.word	0x51eb851f

080060cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060cc:	b084      	sub	sp, #16
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	f107 001c 	add.w	r0, r7, #28
 80060da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d122      	bne.n	800612a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80060f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800610c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d105      	bne.n	800611e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f9c0 	bl	80064a4 <USB_CoreReset>
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]
 8006128:	e01a      	b.n	8006160 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f9b4 	bl	80064a4 <USB_CoreReset>
 800613c:	4603      	mov	r3, r0
 800613e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	639a      	str	r2, [r3, #56]	; 0x38
 8006152:	e005      	b.n	8006160 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	2b01      	cmp	r3, #1
 8006164:	d10b      	bne.n	800617e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f043 0206 	orr.w	r2, r3, #6
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800617e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800618a:	b004      	add	sp, #16
 800618c:	4770      	bx	lr

0800618e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f043 0201 	orr.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f023 0201 	bic.w	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061ee:	78fb      	ldrb	r3, [r7, #3]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d115      	bne.n	8006220 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006200:	2001      	movs	r0, #1
 8006202:	f7fb f897 	bl	8001334 <HAL_Delay>
      ms++;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3301      	adds	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f93a 	bl	8006486 <USB_GetMode>
 8006212:	4603      	mov	r3, r0
 8006214:	2b01      	cmp	r3, #1
 8006216:	d01e      	beq.n	8006256 <USB_SetCurrentMode+0x84>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b31      	cmp	r3, #49	; 0x31
 800621c:	d9f0      	bls.n	8006200 <USB_SetCurrentMode+0x2e>
 800621e:	e01a      	b.n	8006256 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d115      	bne.n	8006252 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006232:	2001      	movs	r0, #1
 8006234:	f7fb f87e 	bl	8001334 <HAL_Delay>
      ms++;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3301      	adds	r3, #1
 800623c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f921 	bl	8006486 <USB_GetMode>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <USB_SetCurrentMode+0x84>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b31      	cmp	r3, #49	; 0x31
 800624e:	d9f0      	bls.n	8006232 <USB_SetCurrentMode+0x60>
 8006250:	e001      	b.n	8006256 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e005      	b.n	8006262 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b32      	cmp	r3, #50	; 0x32
 800625a:	d101      	bne.n	8006260 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3301      	adds	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4a13      	ldr	r2, [pc, #76]	; (80062d0 <USB_FlushTxFifo+0x64>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d901      	bls.n	800628c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e01b      	b.n	80062c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	daf2      	bge.n	800627a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	019b      	lsls	r3, r3, #6
 800629c:	f043 0220 	orr.w	r2, r3, #32
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3301      	adds	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a08      	ldr	r2, [pc, #32]	; (80062d0 <USB_FlushTxFifo+0x64>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d901      	bls.n	80062b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e006      	b.n	80062c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d0f0      	beq.n	80062a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	00030d40 	.word	0x00030d40

080062d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4a11      	ldr	r2, [pc, #68]	; (8006330 <USB_FlushRxFifo+0x5c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d901      	bls.n	80062f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e018      	b.n	8006324 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	daf2      	bge.n	80062e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2210      	movs	r2, #16
 8006302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3301      	adds	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4a08      	ldr	r2, [pc, #32]	; (8006330 <USB_FlushRxFifo+0x5c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e006      	b.n	8006324 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0310 	and.w	r3, r3, #16
 800631e:	2b10      	cmp	r3, #16
 8006320:	d0f0      	beq.n	8006304 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	00030d40 	.word	0x00030d40

08006334 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	; 0x24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	4611      	mov	r1, r2
 8006340:	461a      	mov	r2, r3
 8006342:	460b      	mov	r3, r1
 8006344:	71fb      	strb	r3, [r7, #7]
 8006346:	4613      	mov	r3, r2
 8006348:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006352:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d123      	bne.n	80063a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800635a:	88bb      	ldrh	r3, [r7, #4]
 800635c:	3303      	adds	r3, #3
 800635e:	089b      	lsrs	r3, r3, #2
 8006360:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006362:	2300      	movs	r3, #0
 8006364:	61bb      	str	r3, [r7, #24]
 8006366:	e018      	b.n	800639a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	031a      	lsls	r2, r3, #12
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006374:	461a      	mov	r2, r3
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	3301      	adds	r3, #1
 8006380:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	3301      	adds	r3, #1
 8006386:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	3301      	adds	r3, #1
 800638c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	3301      	adds	r3, #1
 8006392:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	3301      	adds	r3, #1
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d3e2      	bcc.n	8006368 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3724      	adds	r7, #36	; 0x24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b08b      	sub	sp, #44	; 0x2c
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	089b      	lsrs	r3, r3, #2
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063d6:	2300      	movs	r3, #0
 80063d8:	623b      	str	r3, [r7, #32]
 80063da:	e014      	b.n	8006406 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	3301      	adds	r3, #1
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	3301      	adds	r3, #1
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	3301      	adds	r3, #1
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	3301      	adds	r3, #1
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	3301      	adds	r3, #1
 8006404:	623b      	str	r3, [r7, #32]
 8006406:	6a3a      	ldr	r2, [r7, #32]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	429a      	cmp	r2, r3
 800640c:	d3e6      	bcc.n	80063dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800640e:	8bfb      	ldrh	r3, [r7, #30]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01e      	beq.n	8006452 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800641e:	461a      	mov	r2, r3
 8006420:	f107 0310 	add.w	r3, r7, #16
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	fa22 f303 	lsr.w	r3, r2, r3
 8006434:	b2da      	uxtb	r2, r3
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	701a      	strb	r2, [r3, #0]
      i++;
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	3301      	adds	r3, #1
 800643e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	3301      	adds	r3, #1
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006446:	8bfb      	ldrh	r3, [r7, #30]
 8006448:	3b01      	subs	r3, #1
 800644a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800644c:	8bfb      	ldrh	r3, [r7, #30]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1ea      	bne.n	8006428 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006454:	4618      	mov	r0, r3
 8006456:	372c      	adds	r7, #44	; 0x2c
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4013      	ands	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006478:	68fb      	ldr	r3, [r7, #12]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	f003 0301 	and.w	r3, r3, #1
}
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4a13      	ldr	r2, [pc, #76]	; (8006508 <USB_CoreReset+0x64>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d901      	bls.n	80064c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e01b      	b.n	80064fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	daf2      	bge.n	80064b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f043 0201 	orr.w	r2, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4a09      	ldr	r2, [pc, #36]	; (8006508 <USB_CoreReset+0x64>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d901      	bls.n	80064ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e006      	b.n	80064fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d0f0      	beq.n	80064da <USB_CoreReset+0x36>

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	00030d40 	.word	0x00030d40

0800650c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800650c:	b084      	sub	sp, #16
 800650e:	b580      	push	{r7, lr}
 8006510:	b086      	sub	sp, #24
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800651a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800652c:	461a      	mov	r2, r3
 800652e:	2300      	movs	r3, #0
 8006530:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655e:	2b00      	cmp	r3, #0
 8006560:	d018      	beq.n	8006594 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d10a      	bne.n	800657e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006576:	f043 0304 	orr.w	r3, r3, #4
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	e014      	b.n	80065a8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800658c:	f023 0304 	bic.w	r3, r3, #4
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	e009      	b.n	80065a8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065a2:	f023 0304 	bic.w	r3, r3, #4
 80065a6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065a8:	2110      	movs	r1, #16
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff fe5e 	bl	800626c <USB_FlushTxFifo>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fe8a 	bl	80062d4 <USB_FlushRxFifo>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	e015      	b.n	80065fc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065dc:	461a      	mov	r2, r3
 80065de:	f04f 33ff 	mov.w	r3, #4294967295
 80065e2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f0:	461a      	mov	r2, r3
 80065f2:	2300      	movs	r3, #0
 80065f4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	3301      	adds	r3, #1
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	429a      	cmp	r2, r3
 8006602:	d3e5      	bcc.n	80065d0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f04f 32ff 	mov.w	r2, #4294967295
 8006610:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00b      	beq.n	8006636 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006624:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a13      	ldr	r2, [pc, #76]	; (8006678 <USB_HostInit+0x16c>)
 800662a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a13      	ldr	r2, [pc, #76]	; (800667c <USB_HostInit+0x170>)
 8006630:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006634:	e009      	b.n	800664a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2280      	movs	r2, #128	; 0x80
 800663a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a10      	ldr	r2, [pc, #64]	; (8006680 <USB_HostInit+0x174>)
 8006640:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a0f      	ldr	r2, [pc, #60]	; (8006684 <USB_HostInit+0x178>)
 8006646:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	2b00      	cmp	r3, #0
 800664e:	d105      	bne.n	800665c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	f043 0210 	orr.w	r2, r3, #16
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	699a      	ldr	r2, [r3, #24]
 8006660:	4b09      	ldr	r3, [pc, #36]	; (8006688 <USB_HostInit+0x17c>)
 8006662:	4313      	orrs	r3, r2
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006668:	7dfb      	ldrb	r3, [r7, #23]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006674:	b004      	add	sp, #16
 8006676:	4770      	bx	lr
 8006678:	01000200 	.word	0x01000200
 800667c:	00e00300 	.word	0x00e00300
 8006680:	00600080 	.word	0x00600080
 8006684:	004000e0 	.word	0x004000e0
 8006688:	a3200008 	.word	0xa3200008

0800668c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	68f9      	ldr	r1, [r7, #12]
 80066c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80066c4:	4313      	orrs	r3, r2
 80066c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d107      	bne.n	80066de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d4:	461a      	mov	r2, r3
 80066d6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80066da:	6053      	str	r3, [r2, #4]
 80066dc:	e009      	b.n	80066f2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d106      	bne.n	80066f2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ea:	461a      	mov	r2, r3
 80066ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80066f0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006720:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800672a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800672e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006730:	2064      	movs	r0, #100	; 0x64
 8006732:	f7fa fdff 	bl	8001334 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800673e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006742:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006744:	200a      	movs	r0, #10
 8006746:	f7fa fdf5 	bl	8001334 <HAL_Delay>

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006778:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d109      	bne.n	8006798 <USB_DriveVbus+0x44>
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d106      	bne.n	8006798 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006792:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006796:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800679e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a2:	d109      	bne.n	80067b8 <USB_DriveVbus+0x64>
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d106      	bne.n	80067b8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067b6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	0c5b      	lsrs	r3, r3, #17
 80067e4:	f003 0303 	and.w	r3, r3, #3
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	b29b      	uxth	r3, r3
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	4608      	mov	r0, r1
 8006822:	4611      	mov	r1, r2
 8006824:	461a      	mov	r2, r3
 8006826:	4603      	mov	r3, r0
 8006828:	70fb      	strb	r3, [r7, #3]
 800682a:	460b      	mov	r3, r1
 800682c:	70bb      	strb	r3, [r7, #2]
 800682e:	4613      	mov	r3, r2
 8006830:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	4413      	add	r3, r2
 8006842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006846:	461a      	mov	r2, r3
 8006848:	f04f 33ff 	mov.w	r3, #4294967295
 800684c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800684e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006852:	2b03      	cmp	r3, #3
 8006854:	d87e      	bhi.n	8006954 <USB_HC_Init+0x13c>
 8006856:	a201      	add	r2, pc, #4	; (adr r2, 800685c <USB_HC_Init+0x44>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	0800686d 	.word	0x0800686d
 8006860:	08006917 	.word	0x08006917
 8006864:	0800686d 	.word	0x0800686d
 8006868:	080068d9 	.word	0x080068d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	4413      	add	r3, r2
 8006874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006878:	461a      	mov	r2, r3
 800687a:	f240 439d 	movw	r3, #1181	; 0x49d
 800687e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006880:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006884:	2b00      	cmp	r3, #0
 8006886:	da10      	bge.n	80068aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	4413      	add	r3, r2
 8006890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	78fa      	ldrb	r2, [r7, #3]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	440a      	add	r2, r1
 800689e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80068a8:	e057      	b.n	800695a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d051      	beq.n	800695a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80068d4:	60d3      	str	r3, [r2, #12]
      break;
 80068d6:	e040      	b.n	800695a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e4:	461a      	mov	r2, r3
 80068e6:	f240 639d 	movw	r3, #1693	; 0x69d
 80068ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	da34      	bge.n	800695e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	78fa      	ldrb	r2, [r7, #3]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	440a      	add	r2, r1
 800690a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800690e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006912:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006914:	e023      	b.n	800695e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006922:	461a      	mov	r2, r3
 8006924:	f240 2325 	movw	r3, #549	; 0x225
 8006928:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800692a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800692e:	2b00      	cmp	r3, #0
 8006930:	da17      	bge.n	8006962 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006932:	78fb      	ldrb	r3, [r7, #3]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	440a      	add	r2, r1
 8006948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006950:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006952:	e006      	b.n	8006962 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	77fb      	strb	r3, [r7, #31]
      break;
 8006958:	e004      	b.n	8006964 <USB_HC_Init+0x14c>
      break;
 800695a:	bf00      	nop
 800695c:	e002      	b.n	8006964 <USB_HC_Init+0x14c>
      break;
 800695e:	bf00      	nop
 8006960:	e000      	b.n	8006964 <USB_HC_Init+0x14c>
      break;
 8006962:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	4413      	add	r3, r2
 800696c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	78fa      	ldrb	r2, [r7, #3]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	440a      	add	r2, r1
 800697a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800697e:	f043 0302 	orr.w	r3, r3, #2
 8006982:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800698a:	699a      	ldr	r2, [r3, #24]
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	2101      	movs	r1, #1
 8006994:	fa01 f303 	lsl.w	r3, r1, r3
 8006998:	6939      	ldr	r1, [r7, #16]
 800699a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800699e:	4313      	orrs	r3, r2
 80069a0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80069ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	da03      	bge.n	80069be <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80069b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ba:	61bb      	str	r3, [r7, #24]
 80069bc:	e001      	b.n	80069c2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff feff 	bl	80067c6 <USB_GetHostSpeed>
 80069c8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80069ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d106      	bne.n	80069e0 <USB_HC_Init+0x1c8>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d003      	beq.n	80069e0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80069d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	e001      	b.n	80069e4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069e4:	787b      	ldrb	r3, [r7, #1]
 80069e6:	059b      	lsls	r3, r3, #22
 80069e8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069ec:	78bb      	ldrb	r3, [r7, #2]
 80069ee:	02db      	lsls	r3, r3, #11
 80069f0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069f4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80069fa:	049b      	lsls	r3, r3, #18
 80069fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a00:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a08:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	0159      	lsls	r1, r3, #5
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	440b      	add	r3, r1
 8006a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a20:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006a22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d003      	beq.n	8006a32 <USB_HC_Init+0x21a>
 8006a2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d10f      	bne.n	8006a52 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	78fa      	ldrb	r2, [r7, #3]
 8006a42:	0151      	lsls	r1, r2, #5
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	440a      	add	r2, r1
 8006a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a50:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a52:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3720      	adds	r7, #32
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08c      	sub	sp, #48	; 0x30
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a78:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d02d      	beq.n	8006ae2 <USB_HC_StartXfer+0x86>
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	791b      	ldrb	r3, [r3, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d129      	bne.n	8006ae2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d117      	bne.n	8006ac4 <USB_HC_StartXfer+0x68>
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	79db      	ldrb	r3, [r3, #7]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <USB_HC_StartXfer+0x48>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	79db      	ldrb	r3, [r3, #7]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d10f      	bne.n	8006ac4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	0151      	lsls	r1, r2, #5
 8006ab6:	6a3a      	ldr	r2, [r7, #32]
 8006ab8:	440a      	add	r2, r1
 8006aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10b      	bne.n	8006ae2 <USB_HC_StartXfer+0x86>
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	795b      	ldrb	r3, [r3, #5]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d107      	bne.n	8006ae2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fa0f 	bl	8006efc <USB_DoPing>
      return HAL_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e0f8      	b.n	8006cd4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d018      	beq.n	8006b1c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	8912      	ldrh	r2, [r2, #8]
 8006af2:	4413      	add	r3, r2
 8006af4:	3b01      	subs	r3, #1
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	8912      	ldrh	r2, [r2, #8]
 8006afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006afe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006b00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b02:	8b7b      	ldrh	r3, [r7, #26]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d90b      	bls.n	8006b20 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006b08:	8b7b      	ldrh	r3, [r7, #26]
 8006b0a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	8912      	ldrh	r2, [r2, #8]
 8006b12:	fb03 f202 	mul.w	r2, r3, r2
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	611a      	str	r2, [r3, #16]
 8006b1a:	e001      	b.n	8006b20 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	78db      	ldrb	r3, [r3, #3]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d007      	beq.n	8006b38 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	8912      	ldrh	r2, [r2, #8]
 8006b2e:	fb03 f202 	mul.w	r2, r3, r2
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	611a      	str	r2, [r3, #16]
 8006b36:	e003      	b.n	8006b40 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	695a      	ldr	r2, [r3, #20]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b4a:	04d9      	lsls	r1, r3, #19
 8006b4c:	4b63      	ldr	r3, [pc, #396]	; (8006cdc <USB_HC_StartXfer+0x280>)
 8006b4e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b50:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	7a9b      	ldrb	r3, [r3, #10]
 8006b56:	075b      	lsls	r3, r3, #29
 8006b58:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b5c:	69f9      	ldr	r1, [r7, #28]
 8006b5e:	0148      	lsls	r0, r1, #5
 8006b60:	6a39      	ldr	r1, [r7, #32]
 8006b62:	4401      	add	r1, r0
 8006b64:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b68:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b6a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	68d9      	ldr	r1, [r3, #12]
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b82:	460a      	mov	r2, r1
 8006b84:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bf0c      	ite	eq
 8006b96:	2301      	moveq	r3, #1
 8006b98:	2300      	movne	r3, #0
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	6a3a      	ldr	r2, [r7, #32]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bbc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	7e7b      	ldrb	r3, [r7, #25]
 8006bce:	075b      	lsls	r3, r3, #29
 8006bd0:	69f9      	ldr	r1, [r7, #28]
 8006bd2:	0148      	lsls	r0, r1, #5
 8006bd4:	6a39      	ldr	r1, [r7, #32]
 8006bd6:	4401      	add	r1, r0
 8006bd8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bf6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	78db      	ldrb	r3, [r3, #3]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d004      	beq.n	8006c0a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	e003      	b.n	8006c12 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c10:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c18:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c26:	461a      	mov	r2, r3
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e04e      	b.n	8006cd4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	78db      	ldrb	r3, [r3, #3]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d149      	bne.n	8006cd2 <USB_HC_StartXfer+0x276>
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d045      	beq.n	8006cd2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	79db      	ldrb	r3, [r3, #7]
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d830      	bhi.n	8006cb0 <USB_HC_StartXfer+0x254>
 8006c4e:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <USB_HC_StartXfer+0x1f8>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006c65 	.word	0x08006c65
 8006c58:	08006c89 	.word	0x08006c89
 8006c5c:	08006c65 	.word	0x08006c65
 8006c60:	08006c89 	.word	0x08006c89
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	3303      	adds	r3, #3
 8006c6a:	089b      	lsrs	r3, r3, #2
 8006c6c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006c6e:	8afa      	ldrh	r2, [r7, #22]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d91c      	bls.n	8006cb4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f043 0220 	orr.w	r2, r3, #32
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c86:	e015      	b.n	8006cb4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	3303      	adds	r3, #3
 8006c8e:	089b      	lsrs	r3, r3, #2
 8006c90:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006c92:	8afa      	ldrh	r2, [r7, #22]
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d90a      	bls.n	8006cb8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	619a      	str	r2, [r3, #24]
        }
        break;
 8006cae:	e003      	b.n	8006cb8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006cb0:	bf00      	nop
 8006cb2:	e002      	b.n	8006cba <USB_HC_StartXfer+0x25e>
        break;
 8006cb4:	bf00      	nop
 8006cb6:	e000      	b.n	8006cba <USB_HC_StartXfer+0x25e>
        break;
 8006cb8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	68d9      	ldr	r1, [r3, #12]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	785a      	ldrb	r2, [r3, #1]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2000      	movs	r0, #0
 8006cca:	9000      	str	r0, [sp, #0]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7ff fb31 	bl	8006334 <USB_WritePacket>
  }

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3728      	adds	r7, #40	; 0x28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	1ff80000 	.word	0x1ff80000

08006ce0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	b29b      	uxth	r3, r3
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b089      	sub	sp, #36	; 0x24
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	0c9b      	lsrs	r3, r3, #18
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	0fdb      	lsrs	r3, r3, #31
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d104      	bne.n	8006d5c <USB_HC_Halt+0x5a>
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e0c8      	b.n	8006eee <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <USB_HC_Halt+0x66>
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d163      	bne.n	8006e30 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d86:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f040 80ab 	bne.w	8006eec <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d133      	bne.n	8006e0a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dc0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	0151      	lsls	r1, r2, #5
 8006dd4:	69fa      	ldr	r2, [r7, #28]
 8006dd6:	440a      	add	r2, r1
 8006dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ddc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006de0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3301      	adds	r3, #1
 8006de6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dee:	d81d      	bhi.n	8006e2c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e06:	d0ec      	beq.n	8006de2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e08:	e070      	b.n	8006eec <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	0151      	lsls	r1, r2, #5
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	440a      	add	r2, r1
 8006e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e28:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e2a:	e05f      	b.n	8006eec <USB_HC_Halt+0x1ea>
            break;
 8006e2c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e2e:	e05d      	b.n	8006eec <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	0151      	lsls	r1, r2, #5
 8006e42:	69fa      	ldr	r2, [r7, #28]
 8006e44:	440a      	add	r2, r1
 8006e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e4e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d133      	bne.n	8006ec8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e7e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	0151      	lsls	r1, r2, #5
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	440a      	add	r2, r1
 8006e96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e9e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eac:	d81d      	bhi.n	8006eea <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ec4:	d0ec      	beq.n	8006ea0 <USB_HC_Halt+0x19e>
 8006ec6:	e011      	b.n	8006eec <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	0151      	lsls	r1, r2, #5
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	440a      	add	r2, r1
 8006ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	e000      	b.n	8006eec <USB_HC_Halt+0x1ea>
          break;
 8006eea:	bf00      	nop
    }
  }

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3724      	adds	r7, #36	; 0x24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f0c:	78fb      	ldrb	r3, [r7, #3]
 8006f0e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f10:	2301      	movs	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	04da      	lsls	r2, r3, #19
 8006f18:	4b15      	ldr	r3, [pc, #84]	; (8006f70 <USB_DoPing+0x74>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	0151      	lsls	r1, r2, #5
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	440a      	add	r2, r1
 8006f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f2c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f44:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f4c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	1ff80000 	.word	0x1ff80000

08006f74 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff f911 	bl	80061b0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f8e:	2110      	movs	r1, #16
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff f96b 	bl	800626c <USB_FlushTxFifo>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff f997 	bl	80062d4 <USB_FlushRxFifo>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	61bb      	str	r3, [r7, #24]
 8006fb4:	e01f      	b.n	8006ff6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fcc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fd4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fdc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	461a      	mov	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b0f      	cmp	r3, #15
 8006ffa:	d9dc      	bls.n	8006fb6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61bb      	str	r3, [r7, #24]
 8007000:	e034      	b.n	800706c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	4413      	add	r3, r2
 800700a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007018:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007020:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007028:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	4413      	add	r3, r2
 8007032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007036:	461a      	mov	r2, r3
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3301      	adds	r3, #1
 8007040:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007048:	d80c      	bhi.n	8007064 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	4413      	add	r3, r2
 8007052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800705c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007060:	d0ec      	beq.n	800703c <USB_StopHost+0xc8>
 8007062:	e000      	b.n	8007066 <USB_StopHost+0xf2>
        break;
 8007064:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	3301      	adds	r3, #1
 800706a:	61bb      	str	r3, [r7, #24]
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b0f      	cmp	r3, #15
 8007070:	d9c7      	bls.n	8007002 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007078:	461a      	mov	r2, r3
 800707a:	f04f 33ff 	mov.w	r3, #4294967295
 800707e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f04f 32ff 	mov.w	r2, #4294967295
 8007086:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff f880 	bl	800618e <USB_EnableGlobalInt>

  return ret;
 800708e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3720      	adds	r7, #32
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007098:	b590      	push	{r4, r7, lr}
 800709a:	b089      	sub	sp, #36	; 0x24
 800709c:	af04      	add	r7, sp, #16
 800709e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80070a0:	2301      	movs	r3, #1
 80070a2:	2202      	movs	r2, #2
 80070a4:	2102      	movs	r1, #2
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fc66 	bl	8007978 <USBH_FindInterface>
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	2bff      	cmp	r3, #255	; 0xff
 80070b4:	d002      	beq.n	80070bc <USBH_CDC_InterfaceInit+0x24>
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d901      	bls.n	80070c0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80070bc:	2302      	movs	r3, #2
 80070be:	e13d      	b.n	800733c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fc3b 	bl	8007940 <USBH_SelectInterface>
 80070ca:	4603      	mov	r3, r0
 80070cc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80070ce:	7bbb      	ldrb	r3, [r7, #14]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80070d4:	2302      	movs	r3, #2
 80070d6:	e131      	b.n	800733c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80070de:	2050      	movs	r0, #80	; 0x50
 80070e0:	f002 fad2 	bl	8009688 <malloc>
 80070e4:	4603      	mov	r3, r0
 80070e6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80070f8:	2302      	movs	r3, #2
 80070fa:	e11f      	b.n	800733c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80070fc:	2250      	movs	r2, #80	; 0x50
 80070fe:	2100      	movs	r1, #0
 8007100:	68b8      	ldr	r0, [r7, #8]
 8007102:	f002 fb7d 	bl	8009800 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	211a      	movs	r1, #26
 800710c:	fb01 f303 	mul.w	r3, r1, r3
 8007110:	4413      	add	r3, r2
 8007112:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	b25b      	sxtb	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	da15      	bge.n	800714a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	211a      	movs	r1, #26
 8007124:	fb01 f303 	mul.w	r3, r1, r3
 8007128:	4413      	add	r3, r2
 800712a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800712e:	781a      	ldrb	r2, [r3, #0]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	211a      	movs	r1, #26
 800713a:	fb01 f303 	mul.w	r3, r1, r3
 800713e:	4413      	add	r3, r2
 8007140:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007144:	881a      	ldrh	r2, [r3, #0]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 ff2e 	bl	8008fb2 <USBH_AllocPipe>
 8007156:	4603      	mov	r3, r0
 8007158:	461a      	mov	r2, r3
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	7819      	ldrb	r1, [r3, #0]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	7858      	ldrb	r0, [r3, #1]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	8952      	ldrh	r2, [r2, #10]
 8007176:	9202      	str	r2, [sp, #8]
 8007178:	2203      	movs	r2, #3
 800717a:	9201      	str	r2, [sp, #4]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	4623      	mov	r3, r4
 8007180:	4602      	mov	r2, r0
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 fee6 	bl	8008f54 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2200      	movs	r2, #0
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f002 f9f5 	bl	8009580 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007196:	2300      	movs	r3, #0
 8007198:	2200      	movs	r2, #0
 800719a:	210a      	movs	r1, #10
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fbeb 	bl	8007978 <USBH_FindInterface>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	2bff      	cmp	r3, #255	; 0xff
 80071aa:	d002      	beq.n	80071b2 <USBH_CDC_InterfaceInit+0x11a>
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d901      	bls.n	80071b6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80071b2:	2302      	movs	r3, #2
 80071b4:	e0c2      	b.n	800733c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	211a      	movs	r1, #26
 80071bc:	fb01 f303 	mul.w	r3, r1, r3
 80071c0:	4413      	add	r3, r2
 80071c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	b25b      	sxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	da16      	bge.n	80071fc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	211a      	movs	r1, #26
 80071d4:	fb01 f303 	mul.w	r3, r1, r3
 80071d8:	4413      	add	r3, r2
 80071da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071de:	781a      	ldrb	r2, [r3, #0]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	211a      	movs	r1, #26
 80071ea:	fb01 f303 	mul.w	r3, r1, r3
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071f4:	881a      	ldrh	r2, [r3, #0]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	835a      	strh	r2, [r3, #26]
 80071fa:	e015      	b.n	8007228 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	211a      	movs	r1, #26
 8007202:	fb01 f303 	mul.w	r3, r1, r3
 8007206:	4413      	add	r3, r2
 8007208:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800720c:	781a      	ldrb	r2, [r3, #0]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	211a      	movs	r1, #26
 8007218:	fb01 f303 	mul.w	r3, r1, r3
 800721c:	4413      	add	r3, r2
 800721e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007222:	881a      	ldrh	r2, [r3, #0]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	211a      	movs	r1, #26
 800722e:	fb01 f303 	mul.w	r3, r1, r3
 8007232:	4413      	add	r3, r2
 8007234:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	b25b      	sxtb	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	da16      	bge.n	800726e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	211a      	movs	r1, #26
 8007246:	fb01 f303 	mul.w	r3, r1, r3
 800724a:	4413      	add	r3, r2
 800724c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007250:	781a      	ldrb	r2, [r3, #0]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	211a      	movs	r1, #26
 800725c:	fb01 f303 	mul.w	r3, r1, r3
 8007260:	4413      	add	r3, r2
 8007262:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007266:	881a      	ldrh	r2, [r3, #0]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	835a      	strh	r2, [r3, #26]
 800726c:	e015      	b.n	800729a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	211a      	movs	r1, #26
 8007274:	fb01 f303 	mul.w	r3, r1, r3
 8007278:	4413      	add	r3, r2
 800727a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800727e:	781a      	ldrb	r2, [r3, #0]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	211a      	movs	r1, #26
 800728a:	fb01 f303 	mul.w	r3, r1, r3
 800728e:	4413      	add	r3, r2
 8007290:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007294:	881a      	ldrh	r2, [r3, #0]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	7b9b      	ldrb	r3, [r3, #14]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 fe86 	bl	8008fb2 <USBH_AllocPipe>
 80072a6:	4603      	mov	r3, r0
 80072a8:	461a      	mov	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	7bdb      	ldrb	r3, [r3, #15]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f001 fe7c 	bl	8008fb2 <USBH_AllocPipe>
 80072ba:	4603      	mov	r3, r0
 80072bc:	461a      	mov	r2, r3
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	7b59      	ldrb	r1, [r3, #13]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	7b98      	ldrb	r0, [r3, #14]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	8b12      	ldrh	r2, [r2, #24]
 80072da:	9202      	str	r2, [sp, #8]
 80072dc:	2202      	movs	r2, #2
 80072de:	9201      	str	r2, [sp, #4]
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	4623      	mov	r3, r4
 80072e4:	4602      	mov	r2, r0
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 fe34 	bl	8008f54 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	7b19      	ldrb	r1, [r3, #12]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	7bd8      	ldrb	r0, [r3, #15]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	8b52      	ldrh	r2, [r2, #26]
 8007304:	9202      	str	r2, [sp, #8]
 8007306:	2202      	movs	r2, #2
 8007308:	9201      	str	r2, [sp, #4]
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	4623      	mov	r3, r4
 800730e:	4602      	mov	r2, r0
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 fe1f 	bl	8008f54 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	7b5b      	ldrb	r3, [r3, #13]
 8007322:	2200      	movs	r2, #0
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f002 f92a 	bl	8009580 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	7b1b      	ldrb	r3, [r3, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f002 f923 	bl	8009580 <USBH_LL_SetToggle>

  return USBH_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	bd90      	pop	{r4, r7, pc}

08007344 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 fe14 	bl	8008f92 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 fe3f 	bl	8008ff4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	7b1b      	ldrb	r3, [r3, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00e      	beq.n	80073a2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	7b1b      	ldrb	r3, [r3, #12]
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fe01 	bl	8008f92 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	7b1b      	ldrb	r3, [r3, #12]
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 fe2c 	bl	8008ff4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	7b5b      	ldrb	r3, [r3, #13]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00e      	beq.n	80073c8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	7b5b      	ldrb	r3, [r3, #13]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 fdee 	bl	8008f92 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	7b5b      	ldrb	r3, [r3, #13]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 fe19 	bl	8008ff4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ce:	69db      	ldr	r3, [r3, #28]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	4618      	mov	r0, r3
 80073de:	f002 f95b 	bl	8009698 <free>
    phost->pActiveClass->pData = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073e8:	2200      	movs	r2, #0
 80073ea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3340      	adds	r3, #64	; 0x40
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f8b1 	bl	8007576 <GetLineCoding>
 8007414:	4603      	mov	r3, r0
 8007416:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d105      	bne.n	800742a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007424:	2102      	movs	r1, #2
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800742a:	7afb      	ldrb	r3, [r7, #11]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800743c:	2301      	movs	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007454:	2b04      	cmp	r3, #4
 8007456:	d877      	bhi.n	8007548 <USBH_CDC_Process+0x114>
 8007458:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <USBH_CDC_Process+0x2c>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	08007475 	.word	0x08007475
 8007464:	0800747b 	.word	0x0800747b
 8007468:	080074ab 	.word	0x080074ab
 800746c:	0800751f 	.word	0x0800751f
 8007470:	0800752d 	.word	0x0800752d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	73fb      	strb	r3, [r7, #15]
      break;
 8007478:	e06d      	b.n	8007556 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f897 	bl	80075b4 <SetLineCoding>
 8007486:	4603      	mov	r3, r0
 8007488:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800748a:	7bbb      	ldrb	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d104      	bne.n	800749a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007498:	e058      	b.n	800754c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d055      	beq.n	800754c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2204      	movs	r2, #4
 80074a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80074a8:	e050      	b.n	800754c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	3340      	adds	r3, #64	; 0x40
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f860 	bl	8007576 <GetLineCoding>
 80074b6:	4603      	mov	r3, r0
 80074b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d126      	bne.n	800750e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d2:	791b      	ldrb	r3, [r3, #4]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d13b      	bne.n	8007550 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d133      	bne.n	8007550 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d12b      	bne.n	8007550 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007500:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007502:	429a      	cmp	r2, r3
 8007504:	d124      	bne.n	8007550 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f958 	bl	80077bc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800750c:	e020      	b.n	8007550 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d01d      	beq.n	8007550 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2204      	movs	r2, #4
 8007518:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800751c:	e018      	b.n	8007550 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f867 	bl	80075f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f8da 	bl	80076de <CDC_ProcessReception>
      break;
 800752a:	e014      	b.n	8007556 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800752c:	2100      	movs	r1, #0
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 ffef 	bl	8008512 <USBH_ClrFeature>
 8007534:	4603      	mov	r3, r0
 8007536:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007546:	e005      	b.n	8007554 <USBH_CDC_Process+0x120>

    default:
      break;
 8007548:	bf00      	nop
 800754a:	e004      	b.n	8007556 <USBH_CDC_Process+0x122>
      break;
 800754c:	bf00      	nop
 800754e:	e002      	b.n	8007556 <USBH_CDC_Process+0x122>
      break;
 8007550:	bf00      	nop
 8007552:	e000      	b.n	8007556 <USBH_CDC_Process+0x122>
      break;
 8007554:	bf00      	nop

  }

  return status;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	22a1      	movs	r2, #161	; 0xa1
 8007584:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2221      	movs	r2, #33	; 0x21
 800758a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2207      	movs	r2, #7
 800759c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2207      	movs	r2, #7
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 fa83 	bl	8008ab0 <USBH_CtlReq>
 80075aa:	4603      	mov	r3, r0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2221      	movs	r2, #33	; 0x21
 80075c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2207      	movs	r2, #7
 80075da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2207      	movs	r2, #7
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 fa64 	bl	8008ab0 <USBH_CtlReq>
 80075e8:	4603      	mov	r3, r0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b086      	sub	sp, #24
 80075f6:	af02      	add	r7, sp, #8
 80075f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007604:	2300      	movs	r3, #0
 8007606:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800760e:	2b01      	cmp	r3, #1
 8007610:	d002      	beq.n	8007618 <CDC_ProcessTransmission+0x26>
 8007612:	2b02      	cmp	r3, #2
 8007614:	d023      	beq.n	800765e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007616:	e05e      	b.n	80076d6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	8b12      	ldrh	r2, [r2, #24]
 8007620:	4293      	cmp	r3, r2
 8007622:	d90b      	bls.n	800763c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	69d9      	ldr	r1, [r3, #28]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8b1a      	ldrh	r2, [r3, #24]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	7b5b      	ldrb	r3, [r3, #13]
 8007630:	2001      	movs	r0, #1
 8007632:	9000      	str	r0, [sp, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fc4a 	bl	8008ece <USBH_BulkSendData>
 800763a:	e00b      	b.n	8007654 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	7b5b      	ldrb	r3, [r3, #13]
 800764a:	2001      	movs	r0, #1
 800764c:	9000      	str	r0, [sp, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 fc3d 	bl	8008ece <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800765c:	e03b      	b.n	80076d6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	7b5b      	ldrb	r3, [r3, #13]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 ff61 	bl	800952c <USBH_LL_GetURBState>
 800766a:	4603      	mov	r3, r0
 800766c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800766e:	7afb      	ldrb	r3, [r7, #11]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d128      	bne.n	80076c6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	8b12      	ldrh	r2, [r2, #24]
 800767c:	4293      	cmp	r3, r2
 800767e:	d90e      	bls.n	800769e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	8b12      	ldrh	r2, [r2, #24]
 8007688:	1a9a      	subs	r2, r3, r2
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	8b12      	ldrh	r2, [r2, #24]
 8007696:	441a      	add	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	61da      	str	r2, [r3, #28]
 800769c:	e002      	b.n	80076a4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076b4:	e00e      	b.n	80076d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f868 	bl	8007794 <USBH_CDC_TransmitCallback>
      break;
 80076c4:	e006      	b.n	80076d4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80076c6:	7afb      	ldrb	r3, [r7, #11]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d103      	bne.n	80076d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076d4:	bf00      	nop
  }
}
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b086      	sub	sp, #24
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076f0:	2300      	movs	r3, #0
 80076f2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d002      	beq.n	8007704 <CDC_ProcessReception+0x26>
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d00e      	beq.n	8007720 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007702:	e043      	b.n	800778c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	6a19      	ldr	r1, [r3, #32]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	8b5a      	ldrh	r2, [r3, #26]
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	7b1b      	ldrb	r3, [r3, #12]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fc01 	bl	8008f18 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2204      	movs	r2, #4
 800771a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800771e:	e035      	b.n	800778c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	7b1b      	ldrb	r3, [r3, #12]
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f001 ff00 	bl	800952c <USBH_LL_GetURBState>
 800772c:	4603      	mov	r3, r0
 800772e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007730:	7cfb      	ldrb	r3, [r7, #19]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d129      	bne.n	800778a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	7b1b      	ldrb	r3, [r3, #12]
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fe63 	bl	8009408 <USBH_LL_GetLastXferSize>
 8007742:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	429a      	cmp	r2, r3
 800774c:	d016      	beq.n	800777c <CDC_ProcessReception+0x9e>
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	8b5b      	ldrh	r3, [r3, #26]
 8007752:	461a      	mov	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4293      	cmp	r3, r2
 8007758:	d910      	bls.n	800777c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	1ad2      	subs	r2, r2, r3
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	6a1a      	ldr	r2, [r3, #32]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	441a      	add	r2, r3
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2203      	movs	r2, #3
 8007776:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800777a:	e006      	b.n	800778a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f80f 	bl	80077a8 <USBH_CDC_ReceiveCallback>
      break;
 800778a:	bf00      	nop
  }
}
 800778c:	bf00      	nop
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80077e4:	2302      	movs	r3, #2
 80077e6:	e029      	b.n	800783c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	79fa      	ldrb	r2, [r7, #7]
 80077ec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 f81f 	bl	8007844 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f001 fd33 	bl	80092a0 <USBH_LL_Init>

  return USBH_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	e009      	b.n	800786a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	33e0      	adds	r3, #224	; 0xe0
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	2200      	movs	r2, #0
 8007862:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3301      	adds	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b0f      	cmp	r3, #15
 800786e:	d9f2      	bls.n	8007856 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	e009      	b.n	800788a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007880:	2200      	movs	r2, #0
 8007882:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3301      	adds	r3, #1
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007890:	d3f1      	bcc.n	8007876 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2240      	movs	r2, #64	; 0x40
 80078b6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d016      	beq.n	800792e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10e      	bne.n	8007928 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007910:	1c59      	adds	r1, r3, #1
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	33de      	adds	r3, #222	; 0xde
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]
 8007926:	e004      	b.n	8007932 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007928:	2302      	movs	r3, #2
 800792a:	73fb      	strb	r3, [r7, #15]
 800792c:	e001      	b.n	8007932 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800792e:	2302      	movs	r3, #2
 8007930:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007956:	78fa      	ldrb	r2, [r7, #3]
 8007958:	429a      	cmp	r2, r3
 800795a:	d204      	bcs.n	8007966 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	78fa      	ldrb	r2, [r7, #3]
 8007960:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007964:	e001      	b.n	800796a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007966:	2302      	movs	r3, #2
 8007968:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	4608      	mov	r0, r1
 8007982:	4611      	mov	r1, r2
 8007984:	461a      	mov	r2, r3
 8007986:	4603      	mov	r3, r0
 8007988:	70fb      	strb	r3, [r7, #3]
 800798a:	460b      	mov	r3, r1
 800798c:	70bb      	strb	r3, [r7, #2]
 800798e:	4613      	mov	r3, r2
 8007990:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007996:	2300      	movs	r3, #0
 8007998:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80079a0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079a2:	e025      	b.n	80079f0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
 80079a6:	221a      	movs	r2, #26
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
 80079ac:	3308      	adds	r3, #8
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4413      	add	r3, r2
 80079b2:	3302      	adds	r3, #2
 80079b4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	795b      	ldrb	r3, [r3, #5]
 80079ba:	78fa      	ldrb	r2, [r7, #3]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d002      	beq.n	80079c6 <USBH_FindInterface+0x4e>
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	2bff      	cmp	r3, #255	; 0xff
 80079c4:	d111      	bne.n	80079ea <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80079ca:	78ba      	ldrb	r2, [r7, #2]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d002      	beq.n	80079d6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079d0:	78bb      	ldrb	r3, [r7, #2]
 80079d2:	2bff      	cmp	r3, #255	; 0xff
 80079d4:	d109      	bne.n	80079ea <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079da:	787a      	ldrb	r2, [r7, #1]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d002      	beq.n	80079e6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079e0:	787b      	ldrb	r3, [r7, #1]
 80079e2:	2bff      	cmp	r3, #255	; 0xff
 80079e4:	d101      	bne.n	80079ea <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	e006      	b.n	80079f8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	3301      	adds	r3, #1
 80079ee:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d9d6      	bls.n	80079a4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80079f6:	23ff      	movs	r3, #255	; 0xff
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 fc83 	bl	8009318 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007a12:	2101      	movs	r1, #1
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 fd9c 	bl	8009552 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af04      	add	r7, sp, #16
 8007a2a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d102      	bne.n	8007a46 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2203      	movs	r2, #3
 8007a44:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b0b      	cmp	r3, #11
 8007a4e:	f200 81be 	bhi.w	8007dce <USBH_Process+0x3aa>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <USBH_Process+0x34>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a89 	.word	0x08007a89
 8007a5c:	08007abb 	.word	0x08007abb
 8007a60:	08007b23 	.word	0x08007b23
 8007a64:	08007d69 	.word	0x08007d69
 8007a68:	08007dcf 	.word	0x08007dcf
 8007a6c:	08007bc7 	.word	0x08007bc7
 8007a70:	08007d0f 	.word	0x08007d0f
 8007a74:	08007bfd 	.word	0x08007bfd
 8007a78:	08007c1d 	.word	0x08007c1d
 8007a7c:	08007c3d 	.word	0x08007c3d
 8007a80:	08007c81 	.word	0x08007c81
 8007a84:	08007d51 	.word	0x08007d51
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 819e 	beq.w	8007dd2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007a9c:	20c8      	movs	r0, #200	; 0xc8
 8007a9e:	f001 fd9f 	bl	80095e0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 fc95 	bl	80093d2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ab8:	e18b      	b.n	8007dd2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d107      	bne.n	8007ad4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ad2:	e18d      	b.n	8007df0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ade:	d914      	bls.n	8007b0a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d903      	bls.n	8007b02 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	220d      	movs	r2, #13
 8007afe:	701a      	strb	r2, [r3, #0]
      break;
 8007b00:	e176      	b.n	8007df0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
      break;
 8007b08:	e172      	b.n	8007df0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b10:	f103 020a 	add.w	r2, r3, #10
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007b1a:	200a      	movs	r0, #10
 8007b1c:	f001 fd60 	bl	80095e0 <USBH_Delay>
      break;
 8007b20:	e166      	b.n	8007df0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b32:	2104      	movs	r1, #4
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b38:	2064      	movs	r0, #100	; 0x64
 8007b3a:	f001 fd51 	bl	80095e0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 fc20 	bl	8009384 <USBH_LL_GetSpeed>
 8007b44:	4603      	mov	r3, r0
 8007b46:	461a      	mov	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2205      	movs	r2, #5
 8007b52:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fa2b 	bl	8008fb2 <USBH_AllocPipe>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	461a      	mov	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007b64:	2180      	movs	r1, #128	; 0x80
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 fa23 	bl	8008fb2 <USBH_AllocPipe>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	461a      	mov	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7919      	ldrb	r1, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b88:	b292      	uxth	r2, r2
 8007b8a:	9202      	str	r2, [sp, #8]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	9201      	str	r2, [sp, #4]
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	4603      	mov	r3, r0
 8007b94:	2280      	movs	r2, #128	; 0x80
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f001 f9dc 	bl	8008f54 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	7959      	ldrb	r1, [r3, #5]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007bb0:	b292      	uxth	r2, r2
 8007bb2:	9202      	str	r2, [sp, #8]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	9201      	str	r2, [sp, #4]
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 f9c8 	bl	8008f54 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007bc4:	e114      	b.n	8007df0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f918 	bl	8007dfc <USBH_HandleEnum>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f040 80fe 	bne.w	8007dd6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d103      	bne.n	8007bf4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2208      	movs	r2, #8
 8007bf0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bf2:	e0f0      	b.n	8007dd6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2207      	movs	r2, #7
 8007bf8:	701a      	strb	r2, [r3, #0]
      break;
 8007bfa:	e0ec      	b.n	8007dd6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 80e9 	beq.w	8007dda <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c0e:	2101      	movs	r1, #1
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2208      	movs	r2, #8
 8007c18:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007c1a:	e0de      	b.n	8007dda <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fc2c 	bl	8008484 <USBH_SetCfg>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f040 80d5 	bne.w	8007dde <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2209      	movs	r2, #9
 8007c38:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c3a:	e0d0      	b.n	8007dde <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007c42:	f003 0320 	and.w	r3, r3, #32
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d016      	beq.n	8007c78 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fc3c 	bl	80084ca <USBH_SetFeature>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	220a      	movs	r2, #10
 8007c62:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c64:	e0bd      	b.n	8007de2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	f040 80b9 	bne.w	8007de2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	220a      	movs	r2, #10
 8007c74:	701a      	strb	r2, [r3, #0]
      break;
 8007c76:	e0b4      	b.n	8007de2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	220a      	movs	r2, #10
 8007c7c:	701a      	strb	r2, [r3, #0]
      break;
 8007c7e:	e0b0      	b.n	8007de2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80ad 	beq.w	8007de6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c94:	2300      	movs	r3, #0
 8007c96:	73fb      	strb	r3, [r7, #15]
 8007c98:	e016      	b.n	8007cc8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007c9a:	7bfa      	ldrb	r2, [r7, #15]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	32de      	adds	r2, #222	; 0xde
 8007ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca4:	791a      	ldrb	r2, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d108      	bne.n	8007cc2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007cb0:	7bfa      	ldrb	r2, [r7, #15]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	32de      	adds	r2, #222	; 0xde
 8007cb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007cc0:	e005      	b.n	8007cce <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	73fb      	strb	r3, [r7, #15]
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0e5      	beq.n	8007c9a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d016      	beq.n	8007d06 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	4798      	blx	r3
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2206      	movs	r2, #6
 8007cee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cf6:	2103      	movs	r1, #3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cfc:	e073      	b.n	8007de6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	220d      	movs	r2, #13
 8007d02:	701a      	strb	r2, [r3, #0]
      break;
 8007d04:	e06f      	b.n	8007de6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	220d      	movs	r2, #13
 8007d0a:	701a      	strb	r2, [r3, #0]
      break;
 8007d0c:	e06b      	b.n	8007de6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d017      	beq.n	8007d48 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
 8007d24:	4603      	mov	r3, r0
 8007d26:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d103      	bne.n	8007d38 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	220b      	movs	r2, #11
 8007d34:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d36:	e058      	b.n	8007dea <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d154      	bne.n	8007dea <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	220d      	movs	r2, #13
 8007d44:	701a      	strb	r2, [r3, #0]
      break;
 8007d46:	e050      	b.n	8007dea <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	220d      	movs	r2, #13
 8007d4c:	701a      	strb	r2, [r3, #0]
      break;
 8007d4e:	e04c      	b.n	8007dea <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d049      	beq.n	8007dee <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	4798      	blx	r3
      }
      break;
 8007d66:	e042      	b.n	8007dee <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff fd67 	bl	8007844 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d009      	beq.n	8007d94 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d005      	beq.n	8007daa <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007da4:	2105      	movs	r1, #5
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d107      	bne.n	8007dc6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff fe20 	bl	8007a04 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dc4:	e014      	b.n	8007df0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 faa6 	bl	8009318 <USBH_LL_Start>
      break;
 8007dcc:	e010      	b.n	8007df0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007dce:	bf00      	nop
 8007dd0:	e00e      	b.n	8007df0 <USBH_Process+0x3cc>
      break;
 8007dd2:	bf00      	nop
 8007dd4:	e00c      	b.n	8007df0 <USBH_Process+0x3cc>
      break;
 8007dd6:	bf00      	nop
 8007dd8:	e00a      	b.n	8007df0 <USBH_Process+0x3cc>
    break;
 8007dda:	bf00      	nop
 8007ddc:	e008      	b.n	8007df0 <USBH_Process+0x3cc>
      break;
 8007dde:	bf00      	nop
 8007de0:	e006      	b.n	8007df0 <USBH_Process+0x3cc>
      break;
 8007de2:	bf00      	nop
 8007de4:	e004      	b.n	8007df0 <USBH_Process+0x3cc>
      break;
 8007de6:	bf00      	nop
 8007de8:	e002      	b.n	8007df0 <USBH_Process+0x3cc>
      break;
 8007dea:	bf00      	nop
 8007dec:	e000      	b.n	8007df0 <USBH_Process+0x3cc>
      break;
 8007dee:	bf00      	nop
  }
  return USBH_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop

08007dfc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af04      	add	r7, sp, #16
 8007e02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007e04:	2301      	movs	r3, #1
 8007e06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	785b      	ldrb	r3, [r3, #1]
 8007e10:	2b07      	cmp	r3, #7
 8007e12:	f200 81c1 	bhi.w	8008198 <USBH_HandleEnum+0x39c>
 8007e16:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <USBH_HandleEnum+0x20>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e3d 	.word	0x08007e3d
 8007e20:	08007efb 	.word	0x08007efb
 8007e24:	08007f65 	.word	0x08007f65
 8007e28:	08007ff3 	.word	0x08007ff3
 8007e2c:	0800805d 	.word	0x0800805d
 8007e30:	080080cd 	.word	0x080080cd
 8007e34:	08008113 	.word	0x08008113
 8007e38:	08008159 	.word	0x08008159
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007e3c:	2108      	movs	r1, #8
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa50 	bl	80082e4 <USBH_Get_DevDesc>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d130      	bne.n	8007eb0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	7919      	ldrb	r1, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e72:	b292      	uxth	r2, r2
 8007e74:	9202      	str	r2, [sp, #8]
 8007e76:	2200      	movs	r2, #0
 8007e78:	9201      	str	r2, [sp, #4]
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2280      	movs	r2, #128	; 0x80
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 f867 	bl	8008f54 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	7959      	ldrb	r1, [r3, #5]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e9a:	b292      	uxth	r2, r2
 8007e9c:	9202      	str	r2, [sp, #8]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	9201      	str	r2, [sp, #4]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 f853 	bl	8008f54 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007eae:	e175      	b.n	800819c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	f040 8172 	bne.w	800819c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d903      	bls.n	8007eda <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	220d      	movs	r2, #13
 8007ed6:	701a      	strb	r2, [r3, #0]
      break;
 8007ed8:	e160      	b.n	800819c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	795b      	ldrb	r3, [r3, #5]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 f887 	bl	8008ff4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	791b      	ldrb	r3, [r3, #4]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 f881 	bl	8008ff4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	701a      	strb	r2, [r3, #0]
      break;
 8007ef8:	e150      	b.n	800819c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007efa:	2112      	movs	r1, #18
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f9f1 	bl	80082e4 <USBH_Get_DevDesc>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d103      	bne.n	8007f14 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f12:	e145      	b.n	80081a0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	f040 8142 	bne.w	80081a0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f22:	3301      	adds	r3, #1
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d903      	bls.n	8007f3e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	220d      	movs	r2, #13
 8007f3a:	701a      	strb	r2, [r3, #0]
      break;
 8007f3c:	e130      	b.n	80081a0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	795b      	ldrb	r3, [r3, #5]
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 f855 	bl	8008ff4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	791b      	ldrb	r3, [r3, #4]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f84f 	bl	8008ff4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	701a      	strb	r2, [r3, #0]
      break;
 8007f62:	e11d      	b.n	80081a0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007f64:	2101      	movs	r1, #1
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fa68 	bl	800843c <USBH_SetAddress>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d132      	bne.n	8007fdc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007f76:	2002      	movs	r0, #2
 8007f78:	f001 fb32 	bl	80095e0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2203      	movs	r2, #3
 8007f88:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	7919      	ldrb	r1, [r3, #4]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f9e:	b292      	uxth	r2, r2
 8007fa0:	9202      	str	r2, [sp, #8]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	9201      	str	r2, [sp, #4]
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2280      	movs	r2, #128	; 0x80
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 ffd1 	bl	8008f54 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	7959      	ldrb	r1, [r3, #5]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fc6:	b292      	uxth	r2, r2
 8007fc8:	9202      	str	r2, [sp, #8]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	9201      	str	r2, [sp, #4]
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 ffbd 	bl	8008f54 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007fda:	e0e3      	b.n	80081a4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	f040 80e0 	bne.w	80081a4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	220d      	movs	r2, #13
 8007fe8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	705a      	strb	r2, [r3, #1]
      break;
 8007ff0:	e0d8      	b.n	80081a4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007ff2:	2109      	movs	r1, #9
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f99d 	bl	8008334 <USBH_Get_CfgDesc>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d103      	bne.n	800800c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2204      	movs	r2, #4
 8008008:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800800a:	e0cd      	b.n	80081a8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	2b03      	cmp	r3, #3
 8008010:	f040 80ca 	bne.w	80081a8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800801a:	3301      	adds	r3, #1
 800801c:	b2da      	uxtb	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800802a:	2b03      	cmp	r3, #3
 800802c:	d903      	bls.n	8008036 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	220d      	movs	r2, #13
 8008032:	701a      	strb	r2, [r3, #0]
      break;
 8008034:	e0b8      	b.n	80081a8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	795b      	ldrb	r3, [r3, #5]
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 ffd9 	bl	8008ff4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	791b      	ldrb	r3, [r3, #4]
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 ffd3 	bl	8008ff4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	701a      	strb	r2, [r3, #0]
      break;
 800805a:	e0a5      	b.n	80081a8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f965 	bl	8008334 <USBH_Get_CfgDesc>
 800806a:	4603      	mov	r3, r0
 800806c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d103      	bne.n	800807c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2205      	movs	r2, #5
 8008078:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800807a:	e097      	b.n	80081ac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	2b03      	cmp	r3, #3
 8008080:	f040 8094 	bne.w	80081ac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800808a:	3301      	adds	r3, #1
 800808c:	b2da      	uxtb	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800809a:	2b03      	cmp	r3, #3
 800809c:	d903      	bls.n	80080a6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	220d      	movs	r2, #13
 80080a2:	701a      	strb	r2, [r3, #0]
      break;
 80080a4:	e082      	b.n	80081ac <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	795b      	ldrb	r3, [r3, #5]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 ffa1 	bl	8008ff4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	791b      	ldrb	r3, [r3, #4]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 ff9b 	bl	8008ff4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	701a      	strb	r2, [r3, #0]
      break;
 80080ca:	e06f      	b.n	80081ac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d019      	beq.n	800810a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80080e2:	23ff      	movs	r3, #255	; 0xff
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f949 	bl	800837c <USBH_Get_StringDesc>
 80080ea:	4603      	mov	r3, r0
 80080ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d103      	bne.n	80080fc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2206      	movs	r2, #6
 80080f8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80080fa:	e059      	b.n	80081b0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d156      	bne.n	80081b0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2206      	movs	r2, #6
 8008106:	705a      	strb	r2, [r3, #1]
      break;
 8008108:	e052      	b.n	80081b0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2206      	movs	r2, #6
 800810e:	705a      	strb	r2, [r3, #1]
      break;
 8008110:	e04e      	b.n	80081b0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008118:	2b00      	cmp	r3, #0
 800811a:	d019      	beq.n	8008150 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008128:	23ff      	movs	r3, #255	; 0xff
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f926 	bl	800837c <USBH_Get_StringDesc>
 8008130:	4603      	mov	r3, r0
 8008132:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2207      	movs	r2, #7
 800813e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008140:	e038      	b.n	80081b4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	2b03      	cmp	r3, #3
 8008146:	d135      	bne.n	80081b4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2207      	movs	r2, #7
 800814c:	705a      	strb	r2, [r3, #1]
      break;
 800814e:	e031      	b.n	80081b4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2207      	movs	r2, #7
 8008154:	705a      	strb	r2, [r3, #1]
      break;
 8008156:	e02d      	b.n	80081b4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800815e:	2b00      	cmp	r3, #0
 8008160:	d017      	beq.n	8008192 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800816e:	23ff      	movs	r3, #255	; 0xff
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f903 	bl	800837c <USBH_Get_StringDesc>
 8008176:	4603      	mov	r3, r0
 8008178:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d102      	bne.n	8008186 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008184:	e018      	b.n	80081b8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b03      	cmp	r3, #3
 800818a:	d115      	bne.n	80081b8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73fb      	strb	r3, [r7, #15]
      break;
 8008190:	e012      	b.n	80081b8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	73fb      	strb	r3, [r7, #15]
      break;
 8008196:	e00f      	b.n	80081b8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008198:	bf00      	nop
 800819a:	e00e      	b.n	80081ba <USBH_HandleEnum+0x3be>
      break;
 800819c:	bf00      	nop
 800819e:	e00c      	b.n	80081ba <USBH_HandleEnum+0x3be>
      break;
 80081a0:	bf00      	nop
 80081a2:	e00a      	b.n	80081ba <USBH_HandleEnum+0x3be>
      break;
 80081a4:	bf00      	nop
 80081a6:	e008      	b.n	80081ba <USBH_HandleEnum+0x3be>
      break;
 80081a8:	bf00      	nop
 80081aa:	e006      	b.n	80081ba <USBH_HandleEnum+0x3be>
      break;
 80081ac:	bf00      	nop
 80081ae:	e004      	b.n	80081ba <USBH_HandleEnum+0x3be>
      break;
 80081b0:	bf00      	nop
 80081b2:	e002      	b.n	80081ba <USBH_HandleEnum+0x3be>
      break;
 80081b4:	bf00      	nop
 80081b6:	e000      	b.n	80081ba <USBH_HandleEnum+0x3be>
      break;
 80081b8:	bf00      	nop
  }
  return Status;
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f804 	bl	8008206 <USBH_HandleSof>
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b0b      	cmp	r3, #11
 8008216:	d10a      	bne.n	800822e <USBH_HandleSof+0x28>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d005      	beq.n	800822e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
  }
}
 800822e:	bf00      	nop
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008246:	bf00      	nop
}
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008262:	bf00      	nop
}
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 f846 	bl	800934e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	791b      	ldrb	r3, [r3, #4]
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fe93 	bl	8008ff4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	795b      	ldrb	r3, [r3, #5]
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fe8d 	bl	8008ff4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af02      	add	r7, sp, #8
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80082f6:	78fb      	ldrb	r3, [r7, #3]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	4613      	mov	r3, r2
 80082fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008302:	2100      	movs	r1, #0
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f864 	bl	80083d2 <USBH_GetDescriptor>
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10a      	bne.n	800832a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f203 3026 	addw	r0, r3, #806	; 0x326
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008320:	78fa      	ldrb	r2, [r7, #3]
 8008322:	b292      	uxth	r2, r2
 8008324:	4619      	mov	r1, r3
 8008326:	f000 f919 	bl	800855c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800832a:	7bfb      	ldrb	r3, [r7, #15]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af02      	add	r7, sp, #8
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	331c      	adds	r3, #28
 8008344:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008346:	887b      	ldrh	r3, [r7, #2]
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008350:	2100      	movs	r1, #0
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f83d 	bl	80083d2 <USBH_GetDescriptor>
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d107      	bne.n	8008372 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008362:	887b      	ldrh	r3, [r7, #2]
 8008364:	461a      	mov	r2, r3
 8008366:	68b9      	ldr	r1, [r7, #8]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f989 	bl	8008680 <USBH_ParseCfgDesc>
 800836e:	4603      	mov	r3, r0
 8008370:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008372:	7bfb      	ldrb	r3, [r7, #15]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af02      	add	r7, sp, #8
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	607a      	str	r2, [r7, #4]
 8008386:	461a      	mov	r2, r3
 8008388:	460b      	mov	r3, r1
 800838a:	72fb      	strb	r3, [r7, #11]
 800838c:	4613      	mov	r3, r2
 800838e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008390:	7afb      	ldrb	r3, [r7, #11]
 8008392:	b29b      	uxth	r3, r3
 8008394:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008398:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80083a0:	893b      	ldrh	r3, [r7, #8]
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	460b      	mov	r3, r1
 80083a6:	2100      	movs	r1, #0
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f812 	bl	80083d2 <USBH_GetDescriptor>
 80083ae:	4603      	mov	r3, r0
 80083b0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d107      	bne.n	80083c8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80083be:	893a      	ldrh	r2, [r7, #8]
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fb26 	bl	8008a14 <USBH_ParseStringDesc>
  }

  return status;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	607b      	str	r3, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	72fb      	strb	r3, [r7, #11]
 80083e0:	4613      	mov	r3, r2
 80083e2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	789b      	ldrb	r3, [r3, #2]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d11c      	bne.n	8008426 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80083ec:	7afb      	ldrb	r3, [r7, #11]
 80083ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2206      	movs	r2, #6
 80083fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	893a      	ldrh	r2, [r7, #8]
 8008402:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008404:	893b      	ldrh	r3, [r7, #8]
 8008406:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800840a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800840e:	d104      	bne.n	800841a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f240 4209 	movw	r2, #1033	; 0x409
 8008416:	829a      	strh	r2, [r3, #20]
 8008418:	e002      	b.n	8008420 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8b3a      	ldrh	r2, [r7, #24]
 8008424:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008426:	8b3b      	ldrh	r3, [r7, #24]
 8008428:	461a      	mov	r2, r3
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fb3f 	bl	8008ab0 <USBH_CtlReq>
 8008432:	4603      	mov	r3, r0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	789b      	ldrb	r3, [r3, #2]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d10f      	bne.n	8008470 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2205      	movs	r2, #5
 800845a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	b29a      	uxth	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008470:	2200      	movs	r2, #0
 8008472:	2100      	movs	r1, #0
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fb1b 	bl	8008ab0 <USBH_CtlReq>
 800847a:	4603      	mov	r3, r0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	789b      	ldrb	r3, [r3, #2]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d10e      	bne.n	80084b6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2209      	movs	r2, #9
 80084a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	887a      	ldrh	r2, [r7, #2]
 80084a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084b6:	2200      	movs	r2, #0
 80084b8:	2100      	movs	r1, #0
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 faf8 	bl	8008ab0 <USBH_CtlReq>
 80084c0:	4603      	mov	r3, r0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	460b      	mov	r3, r1
 80084d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	789b      	ldrb	r3, [r3, #2]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d10f      	bne.n	80084fe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2203      	movs	r2, #3
 80084e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80084ea:	78fb      	ldrb	r3, [r7, #3]
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084fe:	2200      	movs	r2, #0
 8008500:	2100      	movs	r1, #0
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fad4 	bl	8008ab0 <USBH_CtlReq>
 8008508:	4603      	mov	r3, r0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	789b      	ldrb	r3, [r3, #2]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d10f      	bne.n	8008546 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2202      	movs	r2, #2
 800852a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008538:	78fb      	ldrb	r3, [r7, #3]
 800853a:	b29a      	uxth	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008546:	2200      	movs	r2, #0
 8008548:	2100      	movs	r1, #0
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fab0 	bl	8008ab0 <USBH_CtlReq>
 8008550:	4603      	mov	r3, r0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	781a      	ldrb	r2, [r3, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	785a      	ldrb	r2, [r3, #1]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	3302      	adds	r3, #2
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	b29a      	uxth	r2, r3
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	3303      	adds	r3, #3
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	b29b      	uxth	r3, r3
 800858a:	021b      	lsls	r3, r3, #8
 800858c:	b29b      	uxth	r3, r3
 800858e:	4313      	orrs	r3, r2
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	791a      	ldrb	r2, [r3, #4]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	795a      	ldrb	r2, [r3, #5]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	799a      	ldrb	r2, [r3, #6]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	79da      	ldrb	r2, [r3, #7]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	79db      	ldrb	r3, [r3, #7]
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	dc0f      	bgt.n	80085de <USBH_ParseDevDesc+0x82>
 80085be:	2b08      	cmp	r3, #8
 80085c0:	db14      	blt.n	80085ec <USBH_ParseDevDesc+0x90>
 80085c2:	3b08      	subs	r3, #8
 80085c4:	4a2d      	ldr	r2, [pc, #180]	; (800867c <USBH_ParseDevDesc+0x120>)
 80085c6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bf14      	ite	ne
 80085d2:	2301      	movne	r3, #1
 80085d4:	2300      	moveq	r3, #0
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d102      	bne.n	80085e2 <USBH_ParseDevDesc+0x86>
 80085dc:	e006      	b.n	80085ec <USBH_ParseDevDesc+0x90>
 80085de:	2b40      	cmp	r3, #64	; 0x40
 80085e0:	d104      	bne.n	80085ec <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	79da      	ldrb	r2, [r3, #7]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	71da      	strb	r2, [r3, #7]
      break;
 80085ea:	e003      	b.n	80085f4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2240      	movs	r2, #64	; 0x40
 80085f0:	71da      	strb	r2, [r3, #7]
      break;
 80085f2:	bf00      	nop
  }

  if (length > 8U)
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d939      	bls.n	800866e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	3308      	adds	r3, #8
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	b29a      	uxth	r2, r3
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	3309      	adds	r3, #9
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	b29b      	uxth	r3, r3
 800860a:	021b      	lsls	r3, r3, #8
 800860c:	b29b      	uxth	r3, r3
 800860e:	4313      	orrs	r3, r2
 8008610:	b29a      	uxth	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	330a      	adds	r3, #10
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	b29a      	uxth	r2, r3
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	330b      	adds	r3, #11
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	b29b      	uxth	r3, r3
 8008626:	021b      	lsls	r3, r3, #8
 8008628:	b29b      	uxth	r3, r3
 800862a:	4313      	orrs	r3, r2
 800862c:	b29a      	uxth	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	330c      	adds	r3, #12
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	b29a      	uxth	r2, r3
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	330d      	adds	r3, #13
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	b29b      	uxth	r3, r3
 8008642:	021b      	lsls	r3, r3, #8
 8008644:	b29b      	uxth	r3, r3
 8008646:	4313      	orrs	r3, r2
 8008648:	b29a      	uxth	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	7b9a      	ldrb	r2, [r3, #14]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	7bda      	ldrb	r2, [r3, #15]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	7c1a      	ldrb	r2, [r3, #16]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	7c5a      	ldrb	r2, [r3, #17]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	745a      	strb	r2, [r3, #17]
  }
}
 800866e:	bf00      	nop
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	01000101 	.word	0x01000101

08008680 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08c      	sub	sp, #48	; 0x30
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008694:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	781a      	ldrb	r2, [r3, #0]
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	785a      	ldrb	r2, [r3, #1]
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	3302      	adds	r3, #2
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	3303      	adds	r3, #3
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	4313      	orrs	r3, r2
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086dc:	bf28      	it	cs
 80086de:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	791a      	ldrb	r2, [r3, #4]
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	795a      	ldrb	r2, [r3, #5]
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	799a      	ldrb	r2, [r3, #6]
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	79da      	ldrb	r2, [r3, #7]
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	7a1a      	ldrb	r2, [r3, #8]
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	2b09      	cmp	r3, #9
 8008716:	d002      	beq.n	800871e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	2209      	movs	r2, #9
 800871c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800871e:	88fb      	ldrh	r3, [r7, #6]
 8008720:	2b09      	cmp	r3, #9
 8008722:	f240 809d 	bls.w	8008860 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008726:	2309      	movs	r3, #9
 8008728:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800872a:	2300      	movs	r3, #0
 800872c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800872e:	e081      	b.n	8008834 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008730:	f107 0316 	add.w	r3, r7, #22
 8008734:	4619      	mov	r1, r3
 8008736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008738:	f000 f99f 	bl	8008a7a <USBH_GetNextDesc>
 800873c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b04      	cmp	r3, #4
 8008744:	d176      	bne.n	8008834 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b09      	cmp	r3, #9
 800874c:	d002      	beq.n	8008754 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	2209      	movs	r2, #9
 8008752:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008758:	221a      	movs	r2, #26
 800875a:	fb02 f303 	mul.w	r3, r2, r3
 800875e:	3308      	adds	r3, #8
 8008760:	6a3a      	ldr	r2, [r7, #32]
 8008762:	4413      	add	r3, r2
 8008764:	3302      	adds	r3, #2
 8008766:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800876a:	69f8      	ldr	r0, [r7, #28]
 800876c:	f000 f87e 	bl	800886c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800877a:	e043      	b.n	8008804 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800877c:	f107 0316 	add.w	r3, r7, #22
 8008780:	4619      	mov	r1, r3
 8008782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008784:	f000 f979 	bl	8008a7a <USBH_GetNextDesc>
 8008788:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878c:	785b      	ldrb	r3, [r3, #1]
 800878e:	2b05      	cmp	r3, #5
 8008790:	d138      	bne.n	8008804 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	795b      	ldrb	r3, [r3, #5]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d10f      	bne.n	80087ba <USBH_ParseCfgDesc+0x13a>
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	799b      	ldrb	r3, [r3, #6]
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d10b      	bne.n	80087ba <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	79db      	ldrb	r3, [r3, #7]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10f      	bne.n	80087ca <USBH_ParseCfgDesc+0x14a>
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b09      	cmp	r3, #9
 80087b0:	d00b      	beq.n	80087ca <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80087b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b4:	2209      	movs	r2, #9
 80087b6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80087b8:	e007      	b.n	80087ca <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	2b07      	cmp	r3, #7
 80087c0:	d004      	beq.n	80087cc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	2207      	movs	r2, #7
 80087c6:	701a      	strb	r2, [r3, #0]
 80087c8:	e000      	b.n	80087cc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80087ca:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80087cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80087d4:	3201      	adds	r2, #1
 80087d6:	00d2      	lsls	r2, r2, #3
 80087d8:	211a      	movs	r1, #26
 80087da:	fb01 f303 	mul.w	r3, r1, r3
 80087de:	4413      	add	r3, r2
 80087e0:	3308      	adds	r3, #8
 80087e2:	6a3a      	ldr	r2, [r7, #32]
 80087e4:	4413      	add	r3, r2
 80087e6:	3304      	adds	r3, #4
 80087e8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80087ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087ec:	69b9      	ldr	r1, [r7, #24]
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 f86b 	bl	80088ca <USBH_ParseEPDesc>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80087fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80087fe:	3301      	adds	r3, #1
 8008800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	791b      	ldrb	r3, [r3, #4]
 8008808:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800880c:	429a      	cmp	r2, r3
 800880e:	d204      	bcs.n	800881a <USBH_ParseCfgDesc+0x19a>
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	885a      	ldrh	r2, [r3, #2]
 8008814:	8afb      	ldrh	r3, [r7, #22]
 8008816:	429a      	cmp	r2, r3
 8008818:	d8b0      	bhi.n	800877c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	791b      	ldrb	r3, [r3, #4]
 800881e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008822:	429a      	cmp	r2, r3
 8008824:	d201      	bcs.n	800882a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008826:	2303      	movs	r3, #3
 8008828:	e01c      	b.n	8008864 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800882a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800882e:	3301      	adds	r3, #1
 8008830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008838:	2b01      	cmp	r3, #1
 800883a:	d805      	bhi.n	8008848 <USBH_ParseCfgDesc+0x1c8>
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	885a      	ldrh	r2, [r3, #2]
 8008840:	8afb      	ldrh	r3, [r7, #22]
 8008842:	429a      	cmp	r2, r3
 8008844:	f63f af74 	bhi.w	8008730 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	791b      	ldrb	r3, [r3, #4]
 800884c:	2b02      	cmp	r3, #2
 800884e:	bf28      	it	cs
 8008850:	2302      	movcs	r3, #2
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008858:	429a      	cmp	r2, r3
 800885a:	d201      	bcs.n	8008860 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800885c:	2303      	movs	r3, #3
 800885e:	e001      	b.n	8008864 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008864:	4618      	mov	r0, r3
 8008866:	3730      	adds	r7, #48	; 0x30
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781a      	ldrb	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	785a      	ldrb	r2, [r3, #1]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	789a      	ldrb	r2, [r3, #2]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	78da      	ldrb	r2, [r3, #3]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	791a      	ldrb	r2, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	795a      	ldrb	r2, [r3, #5]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	799a      	ldrb	r2, [r3, #6]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	79da      	ldrb	r2, [r3, #7]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	7a1a      	ldrb	r2, [r3, #8]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	721a      	strb	r2, [r3, #8]
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b087      	sub	sp, #28
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	781a      	ldrb	r2, [r3, #0]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	785a      	ldrb	r2, [r3, #1]
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	789a      	ldrb	r2, [r3, #2]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	78da      	ldrb	r2, [r3, #3]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	3304      	adds	r3, #4
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	b29a      	uxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3305      	adds	r3, #5
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	b29b      	uxth	r3, r3
 800890a:	021b      	lsls	r3, r3, #8
 800890c:	b29b      	uxth	r3, r3
 800890e:	4313      	orrs	r3, r2
 8008910:	b29a      	uxth	r2, r3
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	799a      	ldrb	r2, [r3, #6]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	889b      	ldrh	r3, [r3, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d102      	bne.n	800892c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008926:	2303      	movs	r3, #3
 8008928:	75fb      	strb	r3, [r7, #23]
 800892a:	e033      	b.n	8008994 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	889b      	ldrh	r3, [r3, #4]
 8008930:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008934:	f023 0307 	bic.w	r3, r3, #7
 8008938:	b29a      	uxth	r2, r3
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	889b      	ldrh	r3, [r3, #4]
 8008942:	b21a      	sxth	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3304      	adds	r3, #4
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	b299      	uxth	r1, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	3305      	adds	r3, #5
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	021b      	lsls	r3, r3, #8
 8008956:	b29b      	uxth	r3, r3
 8008958:	430b      	orrs	r3, r1
 800895a:	b29b      	uxth	r3, r3
 800895c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008960:	2b00      	cmp	r3, #0
 8008962:	d110      	bne.n	8008986 <USBH_ParseEPDesc+0xbc>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3304      	adds	r3, #4
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	b299      	uxth	r1, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3305      	adds	r3, #5
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	b29b      	uxth	r3, r3
 8008974:	021b      	lsls	r3, r3, #8
 8008976:	b29b      	uxth	r3, r3
 8008978:	430b      	orrs	r3, r1
 800897a:	b29b      	uxth	r3, r3
 800897c:	b21b      	sxth	r3, r3
 800897e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008982:	b21b      	sxth	r3, r3
 8008984:	e001      	b.n	800898a <USBH_ParseEPDesc+0xc0>
 8008986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800898a:	4313      	orrs	r3, r2
 800898c:	b21b      	sxth	r3, r3
 800898e:	b29a      	uxth	r2, r3
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800899a:	2b00      	cmp	r3, #0
 800899c:	d116      	bne.n	80089cc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	78db      	ldrb	r3, [r3, #3]
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d005      	beq.n	80089b6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	78db      	ldrb	r3, [r3, #3]
 80089ae:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d127      	bne.n	8008a06 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	799b      	ldrb	r3, [r3, #6]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <USBH_ParseEPDesc+0xfc>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	799b      	ldrb	r3, [r3, #6]
 80089c2:	2b10      	cmp	r3, #16
 80089c4:	d91f      	bls.n	8008a06 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80089c6:	2303      	movs	r3, #3
 80089c8:	75fb      	strb	r3, [r7, #23]
 80089ca:	e01c      	b.n	8008a06 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	78db      	ldrb	r3, [r3, #3]
 80089d0:	f003 0303 	and.w	r3, r3, #3
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d10a      	bne.n	80089ee <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	799b      	ldrb	r3, [r3, #6]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d003      	beq.n	80089e8 <USBH_ParseEPDesc+0x11e>
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	799b      	ldrb	r3, [r3, #6]
 80089e4:	2b10      	cmp	r3, #16
 80089e6:	d90e      	bls.n	8008a06 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80089e8:	2303      	movs	r3, #3
 80089ea:	75fb      	strb	r3, [r7, #23]
 80089ec:	e00b      	b.n	8008a06 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	78db      	ldrb	r3, [r3, #3]
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d105      	bne.n	8008a06 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	799b      	ldrb	r3, [r3, #6]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008a02:	2303      	movs	r3, #3
 8008a04:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3301      	adds	r3, #1
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d120      	bne.n	8008a6e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	1e9a      	subs	r2, r3, #2
 8008a32:	88fb      	ldrh	r3, [r7, #6]
 8008a34:	4293      	cmp	r3, r2
 8008a36:	bf28      	it	cs
 8008a38:	4613      	movcs	r3, r2
 8008a3a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	3302      	adds	r3, #2
 8008a40:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008a42:	2300      	movs	r3, #0
 8008a44:	82fb      	strh	r3, [r7, #22]
 8008a46:	e00b      	b.n	8008a60 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008a48:	8afb      	ldrh	r3, [r7, #22]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	781a      	ldrb	r2, [r3, #0]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008a5a:	8afb      	ldrh	r3, [r7, #22]
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	82fb      	strh	r3, [r7, #22]
 8008a60:	8afa      	ldrh	r2, [r7, #22]
 8008a62:	8abb      	ldrh	r3, [r7, #20]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d3ef      	bcc.n	8008a48 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
  }
}
 8008a6e:	bf00      	nop
 8008a70:	371c      	adds	r7, #28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	881a      	ldrh	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	4413      	add	r3, r2
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	789b      	ldrb	r3, [r3, #2]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d002      	beq.n	8008ad0 <USBH_CtlReq+0x20>
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d00f      	beq.n	8008aee <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008ace:	e027      	b.n	8008b20 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	88fa      	ldrh	r2, [r7, #6]
 8008ada:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	75fb      	strb	r3, [r7, #23]
      break;
 8008aec:	e018      	b.n	8008b20 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 f81c 	bl	8008b2c <USBH_HandleControl>
 8008af4:	4603      	mov	r3, r0
 8008af6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d002      	beq.n	8008b04 <USBH_CtlReq+0x54>
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d106      	bne.n	8008b12 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2201      	movs	r2, #1
 8008b08:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	761a      	strb	r2, [r3, #24]
      break;
 8008b10:	e005      	b.n	8008b1e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d102      	bne.n	8008b1e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	709a      	strb	r2, [r3, #2]
      break;
 8008b1e:	bf00      	nop
  }
  return status;
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
	...

08008b2c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af02      	add	r7, sp, #8
 8008b32:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b34:	2301      	movs	r3, #1
 8008b36:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	7e1b      	ldrb	r3, [r3, #24]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	2b0a      	cmp	r3, #10
 8008b44:	f200 8156 	bhi.w	8008df4 <USBH_HandleControl+0x2c8>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <USBH_HandleControl+0x24>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008b7d 	.word	0x08008b7d
 8008b54:	08008b97 	.word	0x08008b97
 8008b58:	08008c01 	.word	0x08008c01
 8008b5c:	08008c27 	.word	0x08008c27
 8008b60:	08008c5f 	.word	0x08008c5f
 8008b64:	08008c89 	.word	0x08008c89
 8008b68:	08008cdb 	.word	0x08008cdb
 8008b6c:	08008cfd 	.word	0x08008cfd
 8008b70:	08008d39 	.word	0x08008d39
 8008b74:	08008d5f 	.word	0x08008d5f
 8008b78:	08008d9d 	.word	0x08008d9d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f103 0110 	add.w	r1, r3, #16
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	795b      	ldrb	r3, [r3, #5]
 8008b86:	461a      	mov	r2, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f943 	bl	8008e14 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2202      	movs	r2, #2
 8008b92:	761a      	strb	r2, [r3, #24]
      break;
 8008b94:	e139      	b.n	8008e0a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	795b      	ldrb	r3, [r3, #5]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fcc5 	bl	800952c <USBH_LL_GetURBState>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d11e      	bne.n	8008bea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	7c1b      	ldrb	r3, [r3, #16]
 8008bb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bb4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	8adb      	ldrh	r3, [r3, #22]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008bbe:	7b7b      	ldrb	r3, [r7, #13]
 8008bc0:	2b80      	cmp	r3, #128	; 0x80
 8008bc2:	d103      	bne.n	8008bcc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2203      	movs	r2, #3
 8008bc8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008bca:	e115      	b.n	8008df8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2205      	movs	r2, #5
 8008bd0:	761a      	strb	r2, [r3, #24]
      break;
 8008bd2:	e111      	b.n	8008df8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008bd4:	7b7b      	ldrb	r3, [r7, #13]
 8008bd6:	2b80      	cmp	r3, #128	; 0x80
 8008bd8:	d103      	bne.n	8008be2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2209      	movs	r2, #9
 8008bde:	761a      	strb	r2, [r3, #24]
      break;
 8008be0:	e10a      	b.n	8008df8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2207      	movs	r2, #7
 8008be6:	761a      	strb	r2, [r3, #24]
      break;
 8008be8:	e106      	b.n	8008df8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	d003      	beq.n	8008bf8 <USBH_HandleControl+0xcc>
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	f040 8100 	bne.w	8008df8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	220b      	movs	r2, #11
 8008bfc:	761a      	strb	r2, [r3, #24]
      break;
 8008bfe:	e0fb      	b.n	8008df8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6899      	ldr	r1, [r3, #8]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	899a      	ldrh	r2, [r3, #12]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	791b      	ldrb	r3, [r3, #4]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f93a 	bl	8008e92 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2204      	movs	r2, #4
 8008c22:	761a      	strb	r2, [r3, #24]
      break;
 8008c24:	e0f1      	b.n	8008e0a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	791b      	ldrb	r3, [r3, #4]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fc7d 	bl	800952c <USBH_LL_GetURBState>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c36:	7bbb      	ldrb	r3, [r7, #14]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d102      	bne.n	8008c42 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2209      	movs	r2, #9
 8008c40:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	2b05      	cmp	r3, #5
 8008c46:	d102      	bne.n	8008c4e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c4c:	e0d6      	b.n	8008dfc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	f040 80d3 	bne.w	8008dfc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	220b      	movs	r2, #11
 8008c5a:	761a      	strb	r2, [r3, #24]
      break;
 8008c5c:	e0ce      	b.n	8008dfc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6899      	ldr	r1, [r3, #8]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	899a      	ldrh	r2, [r3, #12]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	795b      	ldrb	r3, [r3, #5]
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	9000      	str	r0, [sp, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f8ea 	bl	8008e48 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2206      	movs	r2, #6
 8008c84:	761a      	strb	r2, [r3, #24]
      break;
 8008c86:	e0c0      	b.n	8008e0a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	795b      	ldrb	r3, [r3, #5]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fc4c 	bl	800952c <USBH_LL_GetURBState>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d103      	bne.n	8008ca6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2207      	movs	r2, #7
 8008ca2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ca4:	e0ac      	b.n	8008e00 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	2b05      	cmp	r3, #5
 8008caa:	d105      	bne.n	8008cb8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	220c      	movs	r2, #12
 8008cb0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb6:	e0a3      	b.n	8008e00 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d103      	bne.n	8008cc6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2205      	movs	r2, #5
 8008cc2:	761a      	strb	r2, [r3, #24]
      break;
 8008cc4:	e09c      	b.n	8008e00 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	2b04      	cmp	r3, #4
 8008cca:	f040 8099 	bne.w	8008e00 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	220b      	movs	r2, #11
 8008cd2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd8:	e092      	b.n	8008e00 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	791b      	ldrb	r3, [r3, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f8d5 	bl	8008e92 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2208      	movs	r2, #8
 8008cf8:	761a      	strb	r2, [r3, #24]

      break;
 8008cfa:	e086      	b.n	8008e0a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	791b      	ldrb	r3, [r3, #4]
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fc12 	bl	800952c <USBH_LL_GetURBState>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d105      	bne.n	8008d1e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	220d      	movs	r2, #13
 8008d16:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d1c:	e072      	b.n	8008e04 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	d103      	bne.n	8008d2c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	220b      	movs	r2, #11
 8008d28:	761a      	strb	r2, [r3, #24]
      break;
 8008d2a:	e06b      	b.n	8008e04 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	2b05      	cmp	r3, #5
 8008d30:	d168      	bne.n	8008e04 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008d32:	2303      	movs	r3, #3
 8008d34:	73fb      	strb	r3, [r7, #15]
      break;
 8008d36:	e065      	b.n	8008e04 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	795b      	ldrb	r3, [r3, #5]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	9200      	str	r2, [sp, #0]
 8008d40:	2200      	movs	r2, #0
 8008d42:	2100      	movs	r1, #0
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f87f 	bl	8008e48 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	220a      	movs	r2, #10
 8008d5a:	761a      	strb	r2, [r3, #24]
      break;
 8008d5c:	e055      	b.n	8008e0a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	795b      	ldrb	r3, [r3, #5]
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fbe1 	bl	800952c <USBH_LL_GetURBState>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d105      	bne.n	8008d80 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	220d      	movs	r2, #13
 8008d7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d7e:	e043      	b.n	8008e08 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d103      	bne.n	8008d8e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2209      	movs	r2, #9
 8008d8a:	761a      	strb	r2, [r3, #24]
      break;
 8008d8c:	e03c      	b.n	8008e08 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	2b04      	cmp	r3, #4
 8008d92:	d139      	bne.n	8008e08 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	220b      	movs	r2, #11
 8008d98:	761a      	strb	r2, [r3, #24]
      break;
 8008d9a:	e035      	b.n	8008e08 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	7e5b      	ldrb	r3, [r3, #25]
 8008da0:	3301      	adds	r3, #1
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	765a      	strb	r2, [r3, #25]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	7e5b      	ldrb	r3, [r3, #25]
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d806      	bhi.n	8008dbe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008dbc:	e025      	b.n	8008e0a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008dc4:	2106      	movs	r1, #6
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	795b      	ldrb	r3, [r3, #5]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f90c 	bl	8008ff4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	791b      	ldrb	r3, [r3, #4]
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f906 	bl	8008ff4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008dee:	2302      	movs	r3, #2
 8008df0:	73fb      	strb	r3, [r7, #15]
      break;
 8008df2:	e00a      	b.n	8008e0a <USBH_HandleControl+0x2de>

    default:
      break;
 8008df4:	bf00      	nop
 8008df6:	e008      	b.n	8008e0a <USBH_HandleControl+0x2de>
      break;
 8008df8:	bf00      	nop
 8008dfa:	e006      	b.n	8008e0a <USBH_HandleControl+0x2de>
      break;
 8008dfc:	bf00      	nop
 8008dfe:	e004      	b.n	8008e0a <USBH_HandleControl+0x2de>
      break;
 8008e00:	bf00      	nop
 8008e02:	e002      	b.n	8008e0a <USBH_HandleControl+0x2de>
      break;
 8008e04:	bf00      	nop
 8008e06:	e000      	b.n	8008e0a <USBH_HandleControl+0x2de>
      break;
 8008e08:	bf00      	nop
  }

  return status;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af04      	add	r7, sp, #16
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e22:	79f9      	ldrb	r1, [r7, #7]
 8008e24:	2300      	movs	r3, #0
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	2308      	movs	r3, #8
 8008e2a:	9302      	str	r3, [sp, #8]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	2300      	movs	r3, #0
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	2300      	movs	r3, #0
 8008e36:	2200      	movs	r2, #0
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 fb46 	bl	80094ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af04      	add	r7, sp, #16
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	4611      	mov	r1, r2
 8008e54:	461a      	mov	r2, r3
 8008e56:	460b      	mov	r3, r1
 8008e58:	80fb      	strh	r3, [r7, #6]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e6c:	7979      	ldrb	r1, [r7, #5]
 8008e6e:	7e3b      	ldrb	r3, [r7, #24]
 8008e70:	9303      	str	r3, [sp, #12]
 8008e72:	88fb      	ldrh	r3, [r7, #6]
 8008e74:	9302      	str	r3, [sp, #8]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	2300      	movs	r3, #0
 8008e80:	2200      	movs	r2, #0
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 fb21 	bl	80094ca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b088      	sub	sp, #32
 8008e96:	af04      	add	r7, sp, #16
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	80fb      	strh	r3, [r7, #6]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ea8:	7979      	ldrb	r1, [r7, #5]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	9303      	str	r3, [sp, #12]
 8008eae:	88fb      	ldrh	r3, [r7, #6]
 8008eb0:	9302      	str	r3, [sp, #8]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 fb03 	bl	80094ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ec4:	2300      	movs	r3, #0

}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b088      	sub	sp, #32
 8008ed2:	af04      	add	r7, sp, #16
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	4611      	mov	r1, r2
 8008eda:	461a      	mov	r2, r3
 8008edc:	460b      	mov	r3, r1
 8008ede:	80fb      	strh	r3, [r7, #6]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ef2:	7979      	ldrb	r1, [r7, #5]
 8008ef4:	7e3b      	ldrb	r3, [r7, #24]
 8008ef6:	9303      	str	r3, [sp, #12]
 8008ef8:	88fb      	ldrh	r3, [r7, #6]
 8008efa:	9302      	str	r3, [sp, #8]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	2301      	movs	r3, #1
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	2302      	movs	r3, #2
 8008f06:	2200      	movs	r2, #0
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 fade 	bl	80094ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af04      	add	r7, sp, #16
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	4611      	mov	r1, r2
 8008f24:	461a      	mov	r2, r3
 8008f26:	460b      	mov	r3, r1
 8008f28:	80fb      	strh	r3, [r7, #6]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f2e:	7979      	ldrb	r1, [r7, #5]
 8008f30:	2300      	movs	r3, #0
 8008f32:	9303      	str	r3, [sp, #12]
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	9302      	str	r3, [sp, #8]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	2302      	movs	r3, #2
 8008f42:	2201      	movs	r2, #1
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 fac0 	bl	80094ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af04      	add	r7, sp, #16
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	4608      	mov	r0, r1
 8008f5e:	4611      	mov	r1, r2
 8008f60:	461a      	mov	r2, r3
 8008f62:	4603      	mov	r3, r0
 8008f64:	70fb      	strb	r3, [r7, #3]
 8008f66:	460b      	mov	r3, r1
 8008f68:	70bb      	strb	r3, [r7, #2]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008f6e:	7878      	ldrb	r0, [r7, #1]
 8008f70:	78ba      	ldrb	r2, [r7, #2]
 8008f72:	78f9      	ldrb	r1, [r7, #3]
 8008f74:	8b3b      	ldrh	r3, [r7, #24]
 8008f76:	9302      	str	r3, [sp, #8]
 8008f78:	7d3b      	ldrb	r3, [r7, #20]
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	7c3b      	ldrb	r3, [r7, #16]
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	4603      	mov	r3, r0
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa53 	bl	800942e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b082      	sub	sp, #8
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008f9e:	78fb      	ldrb	r3, [r7, #3]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fa72 	bl	800948c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	460b      	mov	r3, r1
 8008fbc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f836 	bl	8009030 <USBH_GetFreePipe>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008fc8:	89fb      	ldrh	r3, [r7, #14]
 8008fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d00a      	beq.n	8008fe8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	89fb      	ldrh	r3, [r7, #14]
 8008fd6:	f003 030f 	and.w	r3, r3, #15
 8008fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	33e0      	adds	r3, #224	; 0xe0
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	440b      	add	r3, r1
 8008fe6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008fe8:	89fb      	ldrh	r3, [r7, #14]
 8008fea:	b2db      	uxtb	r3, r3
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	2b0f      	cmp	r3, #15
 8009004:	d80d      	bhi.n	8009022 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	33e0      	adds	r3, #224	; 0xe0
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	78fb      	ldrb	r3, [r7, #3]
 8009014:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	33e0      	adds	r3, #224	; 0xe0
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	440b      	add	r3, r1
 8009020:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009038:	2300      	movs	r3, #0
 800903a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
 8009040:	e00f      	b.n	8009062 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	33e0      	adds	r3, #224	; 0xe0
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d102      	bne.n	800905c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	b29b      	uxth	r3, r3
 800905a:	e007      	b.n	800906c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	3301      	adds	r3, #1
 8009060:	73fb      	strb	r3, [r7, #15]
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	2b0f      	cmp	r3, #15
 8009066:	d9ec      	bls.n	8009042 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009068:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800907c:	2201      	movs	r2, #1
 800907e:	490e      	ldr	r1, [pc, #56]	; (80090b8 <MX_USB_HOST_Init+0x40>)
 8009080:	480e      	ldr	r0, [pc, #56]	; (80090bc <MX_USB_HOST_Init+0x44>)
 8009082:	f7fe fba5 	bl	80077d0 <USBH_Init>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800908c:	f7f7 fe34 	bl	8000cf8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009090:	490b      	ldr	r1, [pc, #44]	; (80090c0 <MX_USB_HOST_Init+0x48>)
 8009092:	480a      	ldr	r0, [pc, #40]	; (80090bc <MX_USB_HOST_Init+0x44>)
 8009094:	f7fe fc2a 	bl	80078ec <USBH_RegisterClass>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800909e:	f7f7 fe2b 	bl	8000cf8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80090a2:	4806      	ldr	r0, [pc, #24]	; (80090bc <MX_USB_HOST_Init+0x44>)
 80090a4:	f7fe fcae 	bl	8007a04 <USBH_Start>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80090ae:	f7f7 fe23 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80090b2:	bf00      	nop
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	080090d9 	.word	0x080090d9
 80090bc:	2000023c 	.word	0x2000023c
 80090c0:	20000014 	.word	0x20000014

080090c4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80090c8:	4802      	ldr	r0, [pc, #8]	; (80090d4 <MX_USB_HOST_Process+0x10>)
 80090ca:	f7fe fcab 	bl	8007a24 <USBH_Process>
}
 80090ce:	bf00      	nop
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	2000023c 	.word	0x2000023c

080090d8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	3b01      	subs	r3, #1
 80090e8:	2b04      	cmp	r3, #4
 80090ea:	d819      	bhi.n	8009120 <USBH_UserProcess+0x48>
 80090ec:	a201      	add	r2, pc, #4	; (adr r2, 80090f4 <USBH_UserProcess+0x1c>)
 80090ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f2:	bf00      	nop
 80090f4:	08009121 	.word	0x08009121
 80090f8:	08009111 	.word	0x08009111
 80090fc:	08009121 	.word	0x08009121
 8009100:	08009119 	.word	0x08009119
 8009104:	08009109 	.word	0x08009109
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009108:	4b09      	ldr	r3, [pc, #36]	; (8009130 <USBH_UserProcess+0x58>)
 800910a:	2203      	movs	r2, #3
 800910c:	701a      	strb	r2, [r3, #0]
  break;
 800910e:	e008      	b.n	8009122 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009110:	4b07      	ldr	r3, [pc, #28]	; (8009130 <USBH_UserProcess+0x58>)
 8009112:	2202      	movs	r2, #2
 8009114:	701a      	strb	r2, [r3, #0]
  break;
 8009116:	e004      	b.n	8009122 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009118:	4b05      	ldr	r3, [pc, #20]	; (8009130 <USBH_UserProcess+0x58>)
 800911a:	2201      	movs	r2, #1
 800911c:	701a      	strb	r2, [r3, #0]
  break;
 800911e:	e000      	b.n	8009122 <USBH_UserProcess+0x4a>

  default:
  break;
 8009120:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009122:	bf00      	nop
 8009124:	370c      	adds	r7, #12
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	20000614 	.word	0x20000614

08009134 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08a      	sub	sp, #40	; 0x28
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800913c:	f107 0314 	add.w	r3, r7, #20
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	605a      	str	r2, [r3, #4]
 8009146:	609a      	str	r2, [r3, #8]
 8009148:	60da      	str	r2, [r3, #12]
 800914a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009154:	d147      	bne.n	80091e6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009156:	2300      	movs	r3, #0
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	4b25      	ldr	r3, [pc, #148]	; (80091f0 <HAL_HCD_MspInit+0xbc>)
 800915c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915e:	4a24      	ldr	r2, [pc, #144]	; (80091f0 <HAL_HCD_MspInit+0xbc>)
 8009160:	f043 0301 	orr.w	r3, r3, #1
 8009164:	6313      	str	r3, [r2, #48]	; 0x30
 8009166:	4b22      	ldr	r3, [pc, #136]	; (80091f0 <HAL_HCD_MspInit+0xbc>)
 8009168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	613b      	str	r3, [r7, #16]
 8009170:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009178:	2300      	movs	r3, #0
 800917a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800917c:	2300      	movs	r3, #0
 800917e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009180:	f107 0314 	add.w	r3, r7, #20
 8009184:	4619      	mov	r1, r3
 8009186:	481b      	ldr	r0, [pc, #108]	; (80091f4 <HAL_HCD_MspInit+0xc0>)
 8009188:	f7f8 fa9c 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800918c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009192:	2302      	movs	r3, #2
 8009194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009196:	2300      	movs	r3, #0
 8009198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800919a:	2300      	movs	r3, #0
 800919c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800919e:	230a      	movs	r3, #10
 80091a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091a2:	f107 0314 	add.w	r3, r7, #20
 80091a6:	4619      	mov	r1, r3
 80091a8:	4812      	ldr	r0, [pc, #72]	; (80091f4 <HAL_HCD_MspInit+0xc0>)
 80091aa:	f7f8 fa8b 	bl	80016c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091ae:	4b10      	ldr	r3, [pc, #64]	; (80091f0 <HAL_HCD_MspInit+0xbc>)
 80091b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b2:	4a0f      	ldr	r2, [pc, #60]	; (80091f0 <HAL_HCD_MspInit+0xbc>)
 80091b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b8:	6353      	str	r3, [r2, #52]	; 0x34
 80091ba:	2300      	movs	r3, #0
 80091bc:	60fb      	str	r3, [r7, #12]
 80091be:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <HAL_HCD_MspInit+0xbc>)
 80091c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c2:	4a0b      	ldr	r2, [pc, #44]	; (80091f0 <HAL_HCD_MspInit+0xbc>)
 80091c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091c8:	6453      	str	r3, [r2, #68]	; 0x44
 80091ca:	4b09      	ldr	r3, [pc, #36]	; (80091f0 <HAL_HCD_MspInit+0xbc>)
 80091cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091d6:	2200      	movs	r2, #0
 80091d8:	2100      	movs	r1, #0
 80091da:	2043      	movs	r0, #67	; 0x43
 80091dc:	f7f8 f9a9 	bl	8001532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091e0:	2043      	movs	r0, #67	; 0x43
 80091e2:	f7f8 f9c2 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091e6:	bf00      	nop
 80091e8:	3728      	adds	r7, #40	; 0x28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	40023800 	.word	0x40023800
 80091f4:	40020000 	.word	0x40020000

080091f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009206:	4618      	mov	r0, r3
 8009208:	f7fe ffeb 	bl	80081e2 <USBH_LL_IncTimer>
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff f823 	bl	800826e <USBH_LL_Connect>
}
 8009228:	bf00      	nop
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff f82c 	bl	800829c <USBH_LL_Disconnect>
}
 8009244:	bf00      	nop
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
 8009258:	4613      	mov	r3, r2
 800925a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe ffdd 	bl	8008236 <USBH_LL_PortEnabled>
}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe ffdd 	bl	8008252 <USBH_LL_PortDisabled>
}
 8009298:	bf00      	nop
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d12a      	bne.n	8009308 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80092b2:	4a18      	ldr	r2, [pc, #96]	; (8009314 <USBH_LL_Init+0x74>)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a15      	ldr	r2, [pc, #84]	; (8009314 <USBH_LL_Init+0x74>)
 80092be:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092c2:	4b14      	ldr	r3, [pc, #80]	; (8009314 <USBH_LL_Init+0x74>)
 80092c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80092c8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80092ca:	4b12      	ldr	r3, [pc, #72]	; (8009314 <USBH_LL_Init+0x74>)
 80092cc:	2208      	movs	r2, #8
 80092ce:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80092d0:	4b10      	ldr	r3, [pc, #64]	; (8009314 <USBH_LL_Init+0x74>)
 80092d2:	2201      	movs	r2, #1
 80092d4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092d6:	4b0f      	ldr	r3, [pc, #60]	; (8009314 <USBH_LL_Init+0x74>)
 80092d8:	2200      	movs	r2, #0
 80092da:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80092dc:	4b0d      	ldr	r3, [pc, #52]	; (8009314 <USBH_LL_Init+0x74>)
 80092de:	2202      	movs	r2, #2
 80092e0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80092e2:	4b0c      	ldr	r3, [pc, #48]	; (8009314 <USBH_LL_Init+0x74>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80092e8:	480a      	ldr	r0, [pc, #40]	; (8009314 <USBH_LL_Init+0x74>)
 80092ea:	f7f8 fbb9 	bl	8001a60 <HAL_HCD_Init>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80092f4:	f7f7 fd00 	bl	8000cf8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80092f8:	4806      	ldr	r0, [pc, #24]	; (8009314 <USBH_LL_Init+0x74>)
 80092fa:	f7f8 ff9c 	bl	8002236 <HAL_HCD_GetCurrentFrame>
 80092fe:	4603      	mov	r3, r0
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7fe ff5e 	bl	80081c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20000618 	.word	0x20000618

08009318 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800932e:	4618      	mov	r0, r3
 8009330:	f7f8 ff0b 	bl	800214a <HAL_HCD_Start>
 8009334:	4603      	mov	r3, r0
 8009336:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 f95c 	bl	80095f8 <USBH_Get_USB_Status>
 8009340:	4603      	mov	r3, r0
 8009342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009344:	7bbb      	ldrb	r3, [r7, #14]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009364:	4618      	mov	r0, r3
 8009366:	f7f8 ff13 	bl	8002190 <HAL_HCD_Stop>
 800936a:	4603      	mov	r3, r0
 800936c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	4618      	mov	r0, r3
 8009372:	f000 f941 	bl	80095f8 <USBH_Get_USB_Status>
 8009376:	4603      	mov	r3, r0
 8009378:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800937a:	7bbb      	ldrb	r3, [r7, #14]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800938c:	2301      	movs	r3, #1
 800938e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009396:	4618      	mov	r0, r3
 8009398:	f7f8 ff5b 	bl	8002252 <HAL_HCD_GetCurrentSpeed>
 800939c:	4603      	mov	r3, r0
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d00c      	beq.n	80093bc <USBH_LL_GetSpeed+0x38>
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d80d      	bhi.n	80093c2 <USBH_LL_GetSpeed+0x3e>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d002      	beq.n	80093b0 <USBH_LL_GetSpeed+0x2c>
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d003      	beq.n	80093b6 <USBH_LL_GetSpeed+0x32>
 80093ae:	e008      	b.n	80093c2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80093b0:	2300      	movs	r3, #0
 80093b2:	73fb      	strb	r3, [r7, #15]
    break;
 80093b4:	e008      	b.n	80093c8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80093b6:	2301      	movs	r3, #1
 80093b8:	73fb      	strb	r3, [r7, #15]
    break;
 80093ba:	e005      	b.n	80093c8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80093bc:	2302      	movs	r3, #2
 80093be:	73fb      	strb	r3, [r7, #15]
    break;
 80093c0:	e002      	b.n	80093c8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80093c2:	2301      	movs	r3, #1
 80093c4:	73fb      	strb	r3, [r7, #15]
    break;
 80093c6:	bf00      	nop
  }
  return  speed;
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7f8 feee 	bl	80021ca <HAL_HCD_ResetPort>
 80093ee:	4603      	mov	r3, r0
 80093f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f000 f8ff 	bl	80095f8 <USBH_Get_USB_Status>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800941a:	78fa      	ldrb	r2, [r7, #3]
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f7f8 fef5 	bl	800220e <HAL_HCD_HC_GetXferCount>
 8009424:	4603      	mov	r3, r0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800942e:	b590      	push	{r4, r7, lr}
 8009430:	b089      	sub	sp, #36	; 0x24
 8009432:	af04      	add	r7, sp, #16
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	4608      	mov	r0, r1
 8009438:	4611      	mov	r1, r2
 800943a:	461a      	mov	r2, r3
 800943c:	4603      	mov	r3, r0
 800943e:	70fb      	strb	r3, [r7, #3]
 8009440:	460b      	mov	r3, r1
 8009442:	70bb      	strb	r3, [r7, #2]
 8009444:	4613      	mov	r3, r2
 8009446:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009456:	787c      	ldrb	r4, [r7, #1]
 8009458:	78ba      	ldrb	r2, [r7, #2]
 800945a:	78f9      	ldrb	r1, [r7, #3]
 800945c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800945e:	9302      	str	r3, [sp, #8]
 8009460:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	f897 3020 	ldrb.w	r3, [r7, #32]
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	4623      	mov	r3, r4
 800946e:	f7f8 fb59 	bl	8001b24 <HAL_HCD_HC_Init>
 8009472:	4603      	mov	r3, r0
 8009474:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009476:	7bfb      	ldrb	r3, [r7, #15]
 8009478:	4618      	mov	r0, r3
 800947a:	f000 f8bd 	bl	80095f8 <USBH_Get_USB_Status>
 800947e:	4603      	mov	r3, r0
 8009480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009482:	7bbb      	ldrb	r3, [r7, #14]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	bd90      	pop	{r4, r7, pc}

0800948c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094a6:	78fa      	ldrb	r2, [r7, #3]
 80094a8:	4611      	mov	r1, r2
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7f8 fbc9 	bl	8001c42 <HAL_HCD_HC_Halt>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 f89e 	bl	80095f8 <USBH_Get_USB_Status>
 80094bc:	4603      	mov	r3, r0
 80094be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80094ca:	b590      	push	{r4, r7, lr}
 80094cc:	b089      	sub	sp, #36	; 0x24
 80094ce:	af04      	add	r7, sp, #16
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	4608      	mov	r0, r1
 80094d4:	4611      	mov	r1, r2
 80094d6:	461a      	mov	r2, r3
 80094d8:	4603      	mov	r3, r0
 80094da:	70fb      	strb	r3, [r7, #3]
 80094dc:	460b      	mov	r3, r1
 80094de:	70bb      	strb	r3, [r7, #2]
 80094e0:	4613      	mov	r3, r2
 80094e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80094f2:	787c      	ldrb	r4, [r7, #1]
 80094f4:	78ba      	ldrb	r2, [r7, #2]
 80094f6:	78f9      	ldrb	r1, [r7, #3]
 80094f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094fc:	9303      	str	r3, [sp, #12]
 80094fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009500:	9302      	str	r3, [sp, #8]
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	9301      	str	r3, [sp, #4]
 8009506:	f897 3020 	ldrb.w	r3, [r7, #32]
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	4623      	mov	r3, r4
 800950e:	f7f8 fbbb 	bl	8001c88 <HAL_HCD_HC_SubmitRequest>
 8009512:	4603      	mov	r3, r0
 8009514:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009516:	7bfb      	ldrb	r3, [r7, #15]
 8009518:	4618      	mov	r0, r3
 800951a:	f000 f86d 	bl	80095f8 <USBH_Get_USB_Status>
 800951e:	4603      	mov	r3, r0
 8009520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009522:	7bbb      	ldrb	r3, [r7, #14]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	bd90      	pop	{r4, r7, pc}

0800952c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800953e:	78fa      	ldrb	r2, [r7, #3]
 8009540:	4611      	mov	r1, r2
 8009542:	4618      	mov	r0, r3
 8009544:	f7f8 fe4f 	bl	80021e6 <HAL_HCD_HC_GetURBState>
 8009548:	4603      	mov	r3, r0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b082      	sub	sp, #8
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009564:	2b01      	cmp	r3, #1
 8009566:	d103      	bne.n	8009570 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	4618      	mov	r0, r3
 800956c:	f000 f870 	bl	8009650 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009570:	20c8      	movs	r0, #200	; 0xc8
 8009572:	f7f7 fedf 	bl	8001334 <HAL_Delay>
  return USBH_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
 800958c:	4613      	mov	r3, r2
 800958e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009596:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009598:	78fb      	ldrb	r3, [r7, #3]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	212c      	movs	r1, #44	; 0x2c
 800959e:	fb01 f303 	mul.w	r3, r1, r3
 80095a2:	4413      	add	r3, r2
 80095a4:	333b      	adds	r3, #59	; 0x3b
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d009      	beq.n	80095c0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	212c      	movs	r1, #44	; 0x2c
 80095b2:	fb01 f303 	mul.w	r3, r1, r3
 80095b6:	4413      	add	r3, r2
 80095b8:	3354      	adds	r3, #84	; 0x54
 80095ba:	78ba      	ldrb	r2, [r7, #2]
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	e008      	b.n	80095d2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	212c      	movs	r1, #44	; 0x2c
 80095c6:	fb01 f303 	mul.w	r3, r1, r3
 80095ca:	4413      	add	r3, r2
 80095cc:	3355      	adds	r3, #85	; 0x55
 80095ce:	78ba      	ldrb	r2, [r7, #2]
 80095d0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f7f7 fea3 	bl	8001334 <HAL_Delay>
}
 80095ee:	bf00      	nop
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
	...

080095f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	2b03      	cmp	r3, #3
 800960a:	d817      	bhi.n	800963c <USBH_Get_USB_Status+0x44>
 800960c:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <USBH_Get_USB_Status+0x1c>)
 800960e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009612:	bf00      	nop
 8009614:	08009625 	.word	0x08009625
 8009618:	0800962b 	.word	0x0800962b
 800961c:	08009631 	.word	0x08009631
 8009620:	08009637 	.word	0x08009637
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]
    break;
 8009628:	e00b      	b.n	8009642 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800962a:	2302      	movs	r3, #2
 800962c:	73fb      	strb	r3, [r7, #15]
    break;
 800962e:	e008      	b.n	8009642 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009630:	2301      	movs	r3, #1
 8009632:	73fb      	strb	r3, [r7, #15]
    break;
 8009634:	e005      	b.n	8009642 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009636:	2302      	movs	r3, #2
 8009638:	73fb      	strb	r3, [r7, #15]
    break;
 800963a:	e002      	b.n	8009642 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800963c:	2302      	movs	r3, #2
 800963e:	73fb      	strb	r3, [r7, #15]
    break;
 8009640:	bf00      	nop
  }
  return usb_status;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800965e:	79fb      	ldrb	r3, [r7, #7]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d102      	bne.n	800966a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009664:	2300      	movs	r3, #0
 8009666:	73fb      	strb	r3, [r7, #15]
 8009668:	e001      	b.n	800966e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800966a:	2301      	movs	r3, #1
 800966c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	461a      	mov	r2, r3
 8009672:	2101      	movs	r1, #1
 8009674:	4803      	ldr	r0, [pc, #12]	; (8009684 <MX_DriverVbusFS+0x34>)
 8009676:	f7f8 f9c1 	bl	80019fc <HAL_GPIO_WritePin>
}
 800967a:	bf00      	nop
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	40020800 	.word	0x40020800

08009688 <malloc>:
 8009688:	4b02      	ldr	r3, [pc, #8]	; (8009694 <malloc+0xc>)
 800968a:	4601      	mov	r1, r0
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	f000 b82b 	b.w	80096e8 <_malloc_r>
 8009692:	bf00      	nop
 8009694:	20000080 	.word	0x20000080

08009698 <free>:
 8009698:	4b02      	ldr	r3, [pc, #8]	; (80096a4 <free+0xc>)
 800969a:	4601      	mov	r1, r0
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	f000 b8f3 	b.w	8009888 <_free_r>
 80096a2:	bf00      	nop
 80096a4:	20000080 	.word	0x20000080

080096a8 <sbrk_aligned>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	4e0e      	ldr	r6, [pc, #56]	; (80096e4 <sbrk_aligned+0x3c>)
 80096ac:	460c      	mov	r4, r1
 80096ae:	6831      	ldr	r1, [r6, #0]
 80096b0:	4605      	mov	r5, r0
 80096b2:	b911      	cbnz	r1, 80096ba <sbrk_aligned+0x12>
 80096b4:	f000 f8ac 	bl	8009810 <_sbrk_r>
 80096b8:	6030      	str	r0, [r6, #0]
 80096ba:	4621      	mov	r1, r4
 80096bc:	4628      	mov	r0, r5
 80096be:	f000 f8a7 	bl	8009810 <_sbrk_r>
 80096c2:	1c43      	adds	r3, r0, #1
 80096c4:	d00a      	beq.n	80096dc <sbrk_aligned+0x34>
 80096c6:	1cc4      	adds	r4, r0, #3
 80096c8:	f024 0403 	bic.w	r4, r4, #3
 80096cc:	42a0      	cmp	r0, r4
 80096ce:	d007      	beq.n	80096e0 <sbrk_aligned+0x38>
 80096d0:	1a21      	subs	r1, r4, r0
 80096d2:	4628      	mov	r0, r5
 80096d4:	f000 f89c 	bl	8009810 <_sbrk_r>
 80096d8:	3001      	adds	r0, #1
 80096da:	d101      	bne.n	80096e0 <sbrk_aligned+0x38>
 80096dc:	f04f 34ff 	mov.w	r4, #4294967295
 80096e0:	4620      	mov	r0, r4
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	20000920 	.word	0x20000920

080096e8 <_malloc_r>:
 80096e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ec:	1ccd      	adds	r5, r1, #3
 80096ee:	f025 0503 	bic.w	r5, r5, #3
 80096f2:	3508      	adds	r5, #8
 80096f4:	2d0c      	cmp	r5, #12
 80096f6:	bf38      	it	cc
 80096f8:	250c      	movcc	r5, #12
 80096fa:	2d00      	cmp	r5, #0
 80096fc:	4607      	mov	r7, r0
 80096fe:	db01      	blt.n	8009704 <_malloc_r+0x1c>
 8009700:	42a9      	cmp	r1, r5
 8009702:	d905      	bls.n	8009710 <_malloc_r+0x28>
 8009704:	230c      	movs	r3, #12
 8009706:	603b      	str	r3, [r7, #0]
 8009708:	2600      	movs	r6, #0
 800970a:	4630      	mov	r0, r6
 800970c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009710:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097e4 <_malloc_r+0xfc>
 8009714:	f000 f868 	bl	80097e8 <__malloc_lock>
 8009718:	f8d8 3000 	ldr.w	r3, [r8]
 800971c:	461c      	mov	r4, r3
 800971e:	bb5c      	cbnz	r4, 8009778 <_malloc_r+0x90>
 8009720:	4629      	mov	r1, r5
 8009722:	4638      	mov	r0, r7
 8009724:	f7ff ffc0 	bl	80096a8 <sbrk_aligned>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	4604      	mov	r4, r0
 800972c:	d155      	bne.n	80097da <_malloc_r+0xf2>
 800972e:	f8d8 4000 	ldr.w	r4, [r8]
 8009732:	4626      	mov	r6, r4
 8009734:	2e00      	cmp	r6, #0
 8009736:	d145      	bne.n	80097c4 <_malloc_r+0xdc>
 8009738:	2c00      	cmp	r4, #0
 800973a:	d048      	beq.n	80097ce <_malloc_r+0xe6>
 800973c:	6823      	ldr	r3, [r4, #0]
 800973e:	4631      	mov	r1, r6
 8009740:	4638      	mov	r0, r7
 8009742:	eb04 0903 	add.w	r9, r4, r3
 8009746:	f000 f863 	bl	8009810 <_sbrk_r>
 800974a:	4581      	cmp	r9, r0
 800974c:	d13f      	bne.n	80097ce <_malloc_r+0xe6>
 800974e:	6821      	ldr	r1, [r4, #0]
 8009750:	1a6d      	subs	r5, r5, r1
 8009752:	4629      	mov	r1, r5
 8009754:	4638      	mov	r0, r7
 8009756:	f7ff ffa7 	bl	80096a8 <sbrk_aligned>
 800975a:	3001      	adds	r0, #1
 800975c:	d037      	beq.n	80097ce <_malloc_r+0xe6>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	442b      	add	r3, r5
 8009762:	6023      	str	r3, [r4, #0]
 8009764:	f8d8 3000 	ldr.w	r3, [r8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d038      	beq.n	80097de <_malloc_r+0xf6>
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	42a2      	cmp	r2, r4
 8009770:	d12b      	bne.n	80097ca <_malloc_r+0xe2>
 8009772:	2200      	movs	r2, #0
 8009774:	605a      	str	r2, [r3, #4]
 8009776:	e00f      	b.n	8009798 <_malloc_r+0xb0>
 8009778:	6822      	ldr	r2, [r4, #0]
 800977a:	1b52      	subs	r2, r2, r5
 800977c:	d41f      	bmi.n	80097be <_malloc_r+0xd6>
 800977e:	2a0b      	cmp	r2, #11
 8009780:	d917      	bls.n	80097b2 <_malloc_r+0xca>
 8009782:	1961      	adds	r1, r4, r5
 8009784:	42a3      	cmp	r3, r4
 8009786:	6025      	str	r5, [r4, #0]
 8009788:	bf18      	it	ne
 800978a:	6059      	strne	r1, [r3, #4]
 800978c:	6863      	ldr	r3, [r4, #4]
 800978e:	bf08      	it	eq
 8009790:	f8c8 1000 	streq.w	r1, [r8]
 8009794:	5162      	str	r2, [r4, r5]
 8009796:	604b      	str	r3, [r1, #4]
 8009798:	4638      	mov	r0, r7
 800979a:	f104 060b 	add.w	r6, r4, #11
 800979e:	f000 f829 	bl	80097f4 <__malloc_unlock>
 80097a2:	f026 0607 	bic.w	r6, r6, #7
 80097a6:	1d23      	adds	r3, r4, #4
 80097a8:	1af2      	subs	r2, r6, r3
 80097aa:	d0ae      	beq.n	800970a <_malloc_r+0x22>
 80097ac:	1b9b      	subs	r3, r3, r6
 80097ae:	50a3      	str	r3, [r4, r2]
 80097b0:	e7ab      	b.n	800970a <_malloc_r+0x22>
 80097b2:	42a3      	cmp	r3, r4
 80097b4:	6862      	ldr	r2, [r4, #4]
 80097b6:	d1dd      	bne.n	8009774 <_malloc_r+0x8c>
 80097b8:	f8c8 2000 	str.w	r2, [r8]
 80097bc:	e7ec      	b.n	8009798 <_malloc_r+0xb0>
 80097be:	4623      	mov	r3, r4
 80097c0:	6864      	ldr	r4, [r4, #4]
 80097c2:	e7ac      	b.n	800971e <_malloc_r+0x36>
 80097c4:	4634      	mov	r4, r6
 80097c6:	6876      	ldr	r6, [r6, #4]
 80097c8:	e7b4      	b.n	8009734 <_malloc_r+0x4c>
 80097ca:	4613      	mov	r3, r2
 80097cc:	e7cc      	b.n	8009768 <_malloc_r+0x80>
 80097ce:	230c      	movs	r3, #12
 80097d0:	603b      	str	r3, [r7, #0]
 80097d2:	4638      	mov	r0, r7
 80097d4:	f000 f80e 	bl	80097f4 <__malloc_unlock>
 80097d8:	e797      	b.n	800970a <_malloc_r+0x22>
 80097da:	6025      	str	r5, [r4, #0]
 80097dc:	e7dc      	b.n	8009798 <_malloc_r+0xb0>
 80097de:	605b      	str	r3, [r3, #4]
 80097e0:	deff      	udf	#255	; 0xff
 80097e2:	bf00      	nop
 80097e4:	2000091c 	.word	0x2000091c

080097e8 <__malloc_lock>:
 80097e8:	4801      	ldr	r0, [pc, #4]	; (80097f0 <__malloc_lock+0x8>)
 80097ea:	f000 b84b 	b.w	8009884 <__retarget_lock_acquire_recursive>
 80097ee:	bf00      	nop
 80097f0:	20000a60 	.word	0x20000a60

080097f4 <__malloc_unlock>:
 80097f4:	4801      	ldr	r0, [pc, #4]	; (80097fc <__malloc_unlock+0x8>)
 80097f6:	f000 b846 	b.w	8009886 <__retarget_lock_release_recursive>
 80097fa:	bf00      	nop
 80097fc:	20000a60 	.word	0x20000a60

08009800 <memset>:
 8009800:	4402      	add	r2, r0
 8009802:	4603      	mov	r3, r0
 8009804:	4293      	cmp	r3, r2
 8009806:	d100      	bne.n	800980a <memset+0xa>
 8009808:	4770      	bx	lr
 800980a:	f803 1b01 	strb.w	r1, [r3], #1
 800980e:	e7f9      	b.n	8009804 <memset+0x4>

08009810 <_sbrk_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4d06      	ldr	r5, [pc, #24]	; (800982c <_sbrk_r+0x1c>)
 8009814:	2300      	movs	r3, #0
 8009816:	4604      	mov	r4, r0
 8009818:	4608      	mov	r0, r1
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	f7f7 fca6 	bl	800116c <_sbrk>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d102      	bne.n	800982a <_sbrk_r+0x1a>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b103      	cbz	r3, 800982a <_sbrk_r+0x1a>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	20000a5c 	.word	0x20000a5c

08009830 <__errno>:
 8009830:	4b01      	ldr	r3, [pc, #4]	; (8009838 <__errno+0x8>)
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	20000080 	.word	0x20000080

0800983c <__libc_init_array>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	4d0d      	ldr	r5, [pc, #52]	; (8009874 <__libc_init_array+0x38>)
 8009840:	4c0d      	ldr	r4, [pc, #52]	; (8009878 <__libc_init_array+0x3c>)
 8009842:	1b64      	subs	r4, r4, r5
 8009844:	10a4      	asrs	r4, r4, #2
 8009846:	2600      	movs	r6, #0
 8009848:	42a6      	cmp	r6, r4
 800984a:	d109      	bne.n	8009860 <__libc_init_array+0x24>
 800984c:	4d0b      	ldr	r5, [pc, #44]	; (800987c <__libc_init_array+0x40>)
 800984e:	4c0c      	ldr	r4, [pc, #48]	; (8009880 <__libc_init_array+0x44>)
 8009850:	f000 f866 	bl	8009920 <_init>
 8009854:	1b64      	subs	r4, r4, r5
 8009856:	10a4      	asrs	r4, r4, #2
 8009858:	2600      	movs	r6, #0
 800985a:	42a6      	cmp	r6, r4
 800985c:	d105      	bne.n	800986a <__libc_init_array+0x2e>
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	f855 3b04 	ldr.w	r3, [r5], #4
 8009864:	4798      	blx	r3
 8009866:	3601      	adds	r6, #1
 8009868:	e7ee      	b.n	8009848 <__libc_init_array+0xc>
 800986a:	f855 3b04 	ldr.w	r3, [r5], #4
 800986e:	4798      	blx	r3
 8009870:	3601      	adds	r6, #1
 8009872:	e7f2      	b.n	800985a <__libc_init_array+0x1e>
 8009874:	0800995c 	.word	0x0800995c
 8009878:	0800995c 	.word	0x0800995c
 800987c:	0800995c 	.word	0x0800995c
 8009880:	08009960 	.word	0x08009960

08009884 <__retarget_lock_acquire_recursive>:
 8009884:	4770      	bx	lr

08009886 <__retarget_lock_release_recursive>:
 8009886:	4770      	bx	lr

08009888 <_free_r>:
 8009888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800988a:	2900      	cmp	r1, #0
 800988c:	d044      	beq.n	8009918 <_free_r+0x90>
 800988e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009892:	9001      	str	r0, [sp, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	f1a1 0404 	sub.w	r4, r1, #4
 800989a:	bfb8      	it	lt
 800989c:	18e4      	addlt	r4, r4, r3
 800989e:	f7ff ffa3 	bl	80097e8 <__malloc_lock>
 80098a2:	4a1e      	ldr	r2, [pc, #120]	; (800991c <_free_r+0x94>)
 80098a4:	9801      	ldr	r0, [sp, #4]
 80098a6:	6813      	ldr	r3, [r2, #0]
 80098a8:	b933      	cbnz	r3, 80098b8 <_free_r+0x30>
 80098aa:	6063      	str	r3, [r4, #4]
 80098ac:	6014      	str	r4, [r2, #0]
 80098ae:	b003      	add	sp, #12
 80098b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098b4:	f7ff bf9e 	b.w	80097f4 <__malloc_unlock>
 80098b8:	42a3      	cmp	r3, r4
 80098ba:	d908      	bls.n	80098ce <_free_r+0x46>
 80098bc:	6825      	ldr	r5, [r4, #0]
 80098be:	1961      	adds	r1, r4, r5
 80098c0:	428b      	cmp	r3, r1
 80098c2:	bf01      	itttt	eq
 80098c4:	6819      	ldreq	r1, [r3, #0]
 80098c6:	685b      	ldreq	r3, [r3, #4]
 80098c8:	1949      	addeq	r1, r1, r5
 80098ca:	6021      	streq	r1, [r4, #0]
 80098cc:	e7ed      	b.n	80098aa <_free_r+0x22>
 80098ce:	461a      	mov	r2, r3
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	b10b      	cbz	r3, 80098d8 <_free_r+0x50>
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	d9fa      	bls.n	80098ce <_free_r+0x46>
 80098d8:	6811      	ldr	r1, [r2, #0]
 80098da:	1855      	adds	r5, r2, r1
 80098dc:	42a5      	cmp	r5, r4
 80098de:	d10b      	bne.n	80098f8 <_free_r+0x70>
 80098e0:	6824      	ldr	r4, [r4, #0]
 80098e2:	4421      	add	r1, r4
 80098e4:	1854      	adds	r4, r2, r1
 80098e6:	42a3      	cmp	r3, r4
 80098e8:	6011      	str	r1, [r2, #0]
 80098ea:	d1e0      	bne.n	80098ae <_free_r+0x26>
 80098ec:	681c      	ldr	r4, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	6053      	str	r3, [r2, #4]
 80098f2:	440c      	add	r4, r1
 80098f4:	6014      	str	r4, [r2, #0]
 80098f6:	e7da      	b.n	80098ae <_free_r+0x26>
 80098f8:	d902      	bls.n	8009900 <_free_r+0x78>
 80098fa:	230c      	movs	r3, #12
 80098fc:	6003      	str	r3, [r0, #0]
 80098fe:	e7d6      	b.n	80098ae <_free_r+0x26>
 8009900:	6825      	ldr	r5, [r4, #0]
 8009902:	1961      	adds	r1, r4, r5
 8009904:	428b      	cmp	r3, r1
 8009906:	bf04      	itt	eq
 8009908:	6819      	ldreq	r1, [r3, #0]
 800990a:	685b      	ldreq	r3, [r3, #4]
 800990c:	6063      	str	r3, [r4, #4]
 800990e:	bf04      	itt	eq
 8009910:	1949      	addeq	r1, r1, r5
 8009912:	6021      	streq	r1, [r4, #0]
 8009914:	6054      	str	r4, [r2, #4]
 8009916:	e7ca      	b.n	80098ae <_free_r+0x26>
 8009918:	b003      	add	sp, #12
 800991a:	bd30      	pop	{r4, r5, pc}
 800991c:	2000091c 	.word	0x2000091c

08009920 <_init>:
 8009920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009922:	bf00      	nop
 8009924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009926:	bc08      	pop	{r3}
 8009928:	469e      	mov	lr, r3
 800992a:	4770      	bx	lr

0800992c <_fini>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	bf00      	nop
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr
