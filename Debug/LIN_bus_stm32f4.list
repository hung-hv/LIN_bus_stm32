
LIN_bus_stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b74  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009cfc  08009cfc  00019cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d18  08009d18  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d18  08009d18  00019d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d20  08009d20  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d20  08009d20  00019d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00000a64  20000090  20000090  00020090  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000af4  20000af4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e433  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000046ba  00000000  00000000  0003e532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001988  00000000  00000000  00042bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013e4  00000000  00000000  00044578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024d35  00000000  00000000  0004595c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021ceb  00000000  00000000  0006a691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d627e  00000000  00000000  0008c37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006fe8  00000000  00000000  001625fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001695e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009ce4 	.word	0x08009ce4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009ce4 	.word	0x08009ce4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <led_testing>:
uint8_t checker_2 = 0;
uint8_t checker_3 = 0;

extern uint8_t flag_read_pin;

void led_testing() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0))
 80004c8:	2101      	movs	r1, #1
 80004ca:	4816      	ldr	r0, [pc, #88]	; (8000524 <led_testing+0x60>)
 80004cc:	f001 fbb2 	bl	8001c34 <HAL_GPIO_ReadPin>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d009      	beq.n	80004ea <led_testing+0x26>
    {
        HAL_Delay(500);
 80004d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004da:	f001 f847 	bl	800156c <HAL_Delay>
        btn = -btn;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <led_testing+0x64>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	425b      	negs	r3, r3
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <led_testing+0x64>)
 80004e8:	701a      	strb	r2, [r3, #0]
    }
    if(btn == 1)
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <led_testing+0x64>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d10b      	bne.n	800050a <led_testing+0x46>
    {
//        HAL_Delay(200);
        // Set The LED ON!
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2104      	movs	r1, #4
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <led_testing+0x60>)
 80004f8:	f001 fbb4 	bl	8001c64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <led_testing+0x68>)
 8000504:	f001 fbae 	bl	8001c64 <HAL_GPIO_WritePin>
//        HAL_Delay(200);
        // Else .. Turn LED OFF!
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
    }
}
 8000508:	e00a      	b.n	8000520 <led_testing+0x5c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2104      	movs	r1, #4
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <led_testing+0x60>)
 8000510:	f001 fba8 	bl	8001c64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800051a:	4804      	ldr	r0, [pc, #16]	; (800052c <led_testing+0x68>)
 800051c:	f001 fba2 	bl	8001c64 <HAL_GPIO_WritePin>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40020000 	.word	0x40020000
 8000528:	20000000 	.word	0x20000000
 800052c:	40020c00 	.word	0x40020c00

08000530 <UB_LIN_SendData>:
// return_value:
// LIN_OK = Frame has been sent
// LIN_WRONG_LEN = wrong number of data
// --------------------------------------------------------------
LIN_ERR_t UB_LIN_SendData(LIN_FRAME_t *frame, UART_HandleTypeDef *huart)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  uint8_t checksum = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	73bb      	strb	r3, [r7, #14]
  uint8_t n = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	73fb      	strb	r3, [r7, #15]
  uint8_t frame_id = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	737b      	strb	r3, [r7, #13]
  uint8_t tx_data = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	733b      	strb	r3, [r7, #12]

  // check the length
  if((frame->data_len < 1) || (frame->data_len > LIN_MAX_DATA)) {
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	785b      	ldrb	r3, [r3, #1]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d003      	beq.n	800055a <UB_LIN_SendData+0x2a>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	785b      	ldrb	r3, [r3, #1]
 8000556:	2b08      	cmp	r3, #8
 8000558:	d901      	bls.n	800055e <UB_LIN_SendData+0x2e>
    return(LIN_WRONG_LEN);
 800055a:	2301      	movs	r3, #1
 800055c:	e06b      	b.n	8000636 <UB_LIN_SendData+0x106>
  }

  // calculate checksum
  checksum = p_LIN_makeChecksum(frame);
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f000 f876 	bl	8000650 <p_LIN_makeChecksum>
 8000564:	4603      	mov	r3, r0
 8000566:	73bb      	strb	r3, [r7, #14]
//  while (__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE) == RESET);
  //--------------------------------------------------------------------
  // Break-Field
  //--------------------------------------------------------------------
//  flag_read_pin = 1; //active timer for reading pin
  uint8_t test_data = 0xB7;
 8000568:	23b7      	movs	r3, #183	; 0xb7
 800056a:	72fb      	strb	r3, [r7, #11]
    flag_read_pin = 1; //active timer for reading pin
 800056c:	4b34      	ldr	r3, [pc, #208]	; (8000640 <UB_LIN_SendData+0x110>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]

  HAL_LIN_SendBreak(huart);
 8000572:	6838      	ldr	r0, [r7, #0]
 8000574:	f005 fa96 	bl	8005aa4 <HAL_LIN_SendBreak>
  HAL_UART_Transmit(huart, &test_data, 1, 100);
 8000578:	f107 010b 	add.w	r1, r7, #11
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	2201      	movs	r2, #1
 8000580:	6838      	ldr	r0, [r7, #0]
 8000582:	f004 ff1f 	bl	80053c4 <HAL_UART_Transmit>
  // wait until BreakField has been sent
//  while (USART_GetFlagStatus(LIN_UART, USART_FLAG_TC) == RESET);
//  while (__HAL_UART_GET_FLAG(huart, UART_FLAG_TC) == RESET);

  // small pause
  checker_1++;
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <UB_LIN_SendData+0x114>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <UB_LIN_SendData+0x114>)
 8000590:	701a      	strb	r2, [r3, #0]
  p_LIN_wait_us(LIN_BREAKFIELD_DELAY);
 8000592:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000596:	f000 f88c 	bl	80006b2 <p_LIN_wait_us>
  checker_2++;
 800059a:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <UB_LIN_SendData+0x118>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b29      	ldr	r3, [pc, #164]	; (8000648 <UB_LIN_SendData+0x118>)
 80005a4:	701a      	strb	r2, [r3, #0]
  //--------------------------------------------------------------------
  // Sync-Field
  //--------------------------------------------------------------------
//  USART_SendData(huart, LIN_SYNC_DATA);
  uint8_t sync_byte = LIN_SYNC_DATA;
 80005a6:	2355      	movs	r3, #85	; 0x55
 80005a8:	72bb      	strb	r3, [r7, #10]
  HAL_UART_Transmit(huart, &sync_byte, 1, 100);
 80005aa:	f107 010a 	add.w	r1, r7, #10
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	2201      	movs	r2, #1
 80005b2:	6838      	ldr	r0, [r7, #0]
 80005b4:	f004 ff06 	bl	80053c4 <HAL_UART_Transmit>
  // wait until SyncField has been sent
//  while (USART_GetFlagStatus(LIN_UART, USART_FLAG_TC) == RESET);
//  while (__HAL_UART_GET_FLAG(huart, UART_FLAG_TC) == RESET);

  // small pause
  p_LIN_wait_us(LIN_DATA_BYTE_DELAY);
 80005b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005bc:	f000 f879 	bl	80006b2 <p_LIN_wait_us>

  //--------------------------------------------------------------------
  // ID-Field
  //--------------------------------------------------------------------
//  USART_SendData(huart, frame->frame_id);
  frame_id = frame->frame_id;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	737b      	strb	r3, [r7, #13]
  HAL_UART_Transmit(huart, &frame_id, 1, 100);
 80005c6:	f107 010d 	add.w	r1, r7, #13
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	2201      	movs	r2, #1
 80005ce:	6838      	ldr	r0, [r7, #0]
 80005d0:	f004 fef8 	bl	80053c4 <HAL_UART_Transmit>
  // wait until IDField has been sent
//  while (USART_GetFlagStatus(LIN_UART, USART_FLAG_TC) == RESET);
//  while (__HAL_UART_GET_FLAG(huart, UART_FLAG_TC) == RESET);

  // small pause
  p_LIN_wait_us(LIN_FRAME_RESPONSE_DELAY);
 80005d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d8:	f000 f86b 	bl	80006b2 <p_LIN_wait_us>

  //--------------------------------------------------------------------
  // Data-Field [1...n]
  //--------------------------------------------------------------------
  for(n=0; n < frame->data_len; n++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	e018      	b.n	8000614 <UB_LIN_SendData+0xe4>
//    USART_SendData(huart, frame->data[n]);
	  tx_data = frame->data[n];
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	789b      	ldrb	r3, [r3, #2]
 80005ea:	733b      	strb	r3, [r7, #12]
	  HAL_UART_Transmit(huart, &tx_data, 1, 100);
 80005ec:	f107 010c 	add.w	r1, r7, #12
 80005f0:	2364      	movs	r3, #100	; 0x64
 80005f2:	2201      	movs	r2, #1
 80005f4:	6838      	ldr	r0, [r7, #0]
 80005f6:	f004 fee5 	bl	80053c4 <HAL_UART_Transmit>
	  checker_3++;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <UB_LIN_SendData+0x11c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <UB_LIN_SendData+0x11c>)
 8000604:	701a      	strb	r2, [r3, #0]
	  // wait until DataField has been sent
//    while (USART_GetFlagStatus(LIN_UART, USART_FLAG_TC) == RESET);
//	  while (__HAL_UART_GET_FLAG(huart, UART_FLAG_TC) == RESET);

	  // small Pause
	  p_LIN_wait_us(LIN_DATA_BYTE_DELAY);
 8000606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060a:	f000 f852 	bl	80006b2 <p_LIN_wait_us>
  for(n=0; n < frame->data_len; n++) {
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	3301      	adds	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	7bfa      	ldrb	r2, [r7, #15]
 800061a:	429a      	cmp	r2, r3
 800061c:	d3e1      	bcc.n	80005e2 <UB_LIN_SendData+0xb2>

  //--------------------------------------------------------------------
  // CRC-Field
  //--------------------------------------------------------------------
//  USART_SendData(huart, checksum);
  HAL_UART_Transmit(huart, &checksum, sizeof(checksum), 100);
 800061e:	f107 010e 	add.w	r1, r7, #14
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	2201      	movs	r2, #1
 8000626:	6838      	ldr	r0, [r7, #0]
 8000628:	f004 fecc 	bl	80053c4 <HAL_UART_Transmit>
//  while (USART_GetFlagStatus(LIN_UART, USART_FLAG_TC) == RESET);
//  while (__HAL_UART_GET_FLAG(huart, UART_FLAG_TC) == RESET);

  // small pause
  // so that the next frame is not sent too fast
  p_LIN_wait_us(LIN_INTER_FRAME_DELAY);
 800062c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000630:	f000 f83f 	bl	80006b2 <p_LIN_wait_us>
	  checker_1 = 0;
	  checker_2 = 0;
	  checker_3 = 0;
  }

  return(LIN_OK);
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200002c1 	.word	0x200002c1
 8000644:	200000ac 	.word	0x200000ac
 8000648:	200000ad 	.word	0x200000ad
 800064c:	200000ae 	.word	0x200000ae

08000650 <p_LIN_makeChecksum>:
// (classic-mode = inverted modulo256 sum)
//
// ret_value = checksum
//--------------------------------------------------------------
uint8_t p_LIN_makeChecksum(LIN_FRAME_t *frame)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint8_t ret_wert = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	72fb      	strb	r3, [r7, #11]
  uint8_t n = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]
  uint16_t dummy = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	81bb      	strh	r3, [r7, #12]

  // calculate checksum
  dummy=0;
 8000664:	2300      	movs	r3, #0
 8000666:	81bb      	strh	r3, [r7, #12]
  for(n=0;n<frame->data_len;n++) {
 8000668:	2300      	movs	r3, #0
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	e010      	b.n	8000690 <p_LIN_makeChecksum+0x40>
    dummy+=frame->data[n];
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	b29a      	uxth	r2, r3
 8000678:	89bb      	ldrh	r3, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	81bb      	strh	r3, [r7, #12]
    if(dummy>0xFF) {
 800067e:	89bb      	ldrh	r3, [r7, #12]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d902      	bls.n	800068a <p_LIN_makeChecksum+0x3a>
      dummy-=0xFF;
 8000684:	89bb      	ldrh	r3, [r7, #12]
 8000686:	3bff      	subs	r3, #255	; 0xff
 8000688:	81bb      	strh	r3, [r7, #12]
  for(n=0;n<frame->data_len;n++) {
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	3301      	adds	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	7bfa      	ldrb	r2, [r7, #15]
 8000696:	429a      	cmp	r2, r3
 8000698:	d3e9      	bcc.n	800066e <p_LIN_makeChecksum+0x1e>
    }
  }
  ret_wert=(uint8_t)(dummy);
 800069a:	89bb      	ldrh	r3, [r7, #12]
 800069c:	72fb      	strb	r3, [r7, #11]
  ret_wert^=0xFF;
 800069e:	7afb      	ldrb	r3, [r7, #11]
 80006a0:	43db      	mvns	r3, r3
 80006a2:	72fb      	strb	r3, [r7, #11]

  return(ret_wert);
 80006a4:	7afb      	ldrb	r3, [r7, #11]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <p_LIN_wait_us>:

void p_LIN_wait_us(uint32_t n)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b085      	sub	sp, #20
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
  volatile uint32_t p,t;

  // small pause
  for(p=0;p<n;p++) {
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	e00b      	b.n	80006d8 <p_LIN_wait_us+0x26>
    for(t=0;t<15;t++); // ca 1us
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	e002      	b.n	80006cc <p_LIN_wait_us+0x1a>
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	3301      	adds	r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	2b0e      	cmp	r3, #14
 80006d0:	d9f9      	bls.n	80006c6 <p_LIN_wait_us+0x14>
  for(p=0;p<n;p++) {
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8ef      	bhi.n	80006c0 <p_LIN_wait_us+0xe>
  }
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f000 fec7 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f8d5 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fa47 	bl	8000b90 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000702:	f000 f93b 	bl	800097c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000706:	f000 f967 	bl	80009d8 <MX_I2S3_Init>
  MX_SPI1_Init();
 800070a:	f000 f995 	bl	8000a38 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800070e:	f008 fe95 	bl	800943c <MX_USB_HOST_Init>
  MX_TIM14_Init();
 8000712:	f000 f9c7 	bl	8000aa4 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8000716:	f000 f9e7 	bl	8000ae8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800071a:	f000 fa0f 	bl	8000b3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /*start timer*/
  HAL_TIM_Base_Start_IT(&htim14);
 800071e:	4854      	ldr	r0, [pc, #336]	; (8000870 <main+0x180>)
 8000720:	f004 fb96 	bl	8004e50 <HAL_TIM_Base_Start_IT>
  /*start uart iterrrupt*/
  HAL_UART_Receive_IT(&huart3, rx_buff, 10);
 8000724:	220a      	movs	r2, #10
 8000726:	4953      	ldr	r1, [pc, #332]	; (8000874 <main+0x184>)
 8000728:	4853      	ldr	r0, [pc, #332]	; (8000878 <main+0x188>)
 800072a:	f004 fedd 	bl	80054e8 <HAL_UART_Receive_IT>

  LIN_FRAME_t myFrame;
  for (int i = 0; i<40; i++) {
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	e007      	b.n	8000744 <main+0x54>
	  raw_data[i] = 3;
 8000734:	4a51      	ldr	r2, [pc, #324]	; (800087c <main+0x18c>)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	4413      	add	r3, r2
 800073a:	2203      	movs	r2, #3
 800073c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i<40; i++) {
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3301      	adds	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b27      	cmp	r3, #39	; 0x27
 8000748:	ddf4      	ble.n	8000734 <main+0x44>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800074a:	f008 fe9d 	bl	8009488 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    myFrame.frame_id=0x01;
 800074e:	2301      	movs	r3, #1
 8000750:	713b      	strb	r3, [r7, #4]
    myFrame.data_len=2;
 8000752:	2302      	movs	r3, #2
 8000754:	717b      	strb	r3, [r7, #5]
    myFrame.data[0]=0xA1;
 8000756:	23a1      	movs	r3, #161	; 0xa1
 8000758:	71bb      	strb	r3, [r7, #6]
    myFrame.data[1]=0xB2;
 800075a:	23b2      	movs	r3, #178	; 0xb2
 800075c:	71fb      	strb	r3, [r7, #7]

    if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)) //button down
 800075e:	2101      	movs	r1, #1
 8000760:	4847      	ldr	r0, [pc, #284]	; (8000880 <main+0x190>)
 8000762:	f001 fa67 	bl	8001c34 <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d026      	beq.n	80007ba <main+0xca>
	{
		HAL_Delay(500);
 800076c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000770:	f000 fefc 	bl	800156c <HAL_Delay>
		btn = -btn;
 8000774:	4b43      	ldr	r3, [pc, #268]	; (8000884 <main+0x194>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	425b      	negs	r3, r3
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b41      	ldr	r3, [pc, #260]	; (8000884 <main+0x194>)
 800077e:	701a      	strb	r2, [r3, #0]
//		HAL_UART_Transmit(&huart2, tx_buff, sizeof(tx_buff), HAL_MAX_DELAY);
		//reset timer for read pin
		flag_read_pin = 0;
 8000780:	4b41      	ldr	r3, [pc, #260]	; (8000888 <main+0x198>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
		raw_index = 0;
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <main+0x19c>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i<40; i++) {
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	e007      	b.n	80007a2 <main+0xb2>
			raw_data[i] = 3;
 8000792:	4a3a      	ldr	r2, [pc, #232]	; (800087c <main+0x18c>)
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	4413      	add	r3, r2
 8000798:	2203      	movs	r2, #3
 800079a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i<40; i++) {
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	3301      	adds	r3, #1
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	2b27      	cmp	r3, #39	; 0x27
 80007a6:	ddf4      	ble.n	8000792 <main+0xa2>
		}
		//sending via LIN bus
		check = UB_LIN_SendData(&myFrame, &huart2);
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4939      	ldr	r1, [pc, #228]	; (8000890 <main+0x1a0>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff febf 	bl	8000530 <UB_LIN_SendData>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b37      	ldr	r3, [pc, #220]	; (8000894 <main+0x1a4>)
 80007b8:	701a      	strb	r2, [r3, #0]

	}
	if(btn == 1)
 80007ba:	4b32      	ldr	r3, [pc, #200]	; (8000884 <main+0x194>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d10b      	bne.n	80007da <main+0xea>
	{
	//        HAL_Delay(200);
	 // Set The LED ON!
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2104      	movs	r1, #4
 80007c6:	482e      	ldr	r0, [pc, #184]	; (8000880 <main+0x190>)
 80007c8:	f001 fa4c 	bl	8001c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d2:	4831      	ldr	r0, [pc, #196]	; (8000898 <main+0x1a8>)
 80007d4:	f001 fa46 	bl	8001c64 <HAL_GPIO_WritePin>
 80007d8:	e00a      	b.n	80007f0 <main+0x100>
	}
	else
	{
	//        HAL_Delay(200);
	 // Else .. Turn LED OFF!
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2104      	movs	r1, #4
 80007de:	4828      	ldr	r0, [pc, #160]	; (8000880 <main+0x190>)
 80007e0:	f001 fa40 	bl	8001c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ea:	482b      	ldr	r0, [pc, #172]	; (8000898 <main+0x1a8>)
 80007ec:	f001 fa3a 	bl	8001c64 <HAL_GPIO_WritePin>
	}

    led_testing();
 80007f0:	f7ff fe68 	bl	80004c4 <led_testing>
	alive_sw++;
 80007f4:	4b29      	ldr	r3, [pc, #164]	; (800089c <main+0x1ac>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a28      	ldr	r2, [pc, #160]	; (800089c <main+0x1ac>)
 80007fc:	6013      	str	r3, [r2, #0]
	if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)) {
 80007fe:	2108      	movs	r1, #8
 8000800:	481f      	ldr	r0, [pc, #124]	; (8000880 <main+0x190>)
 8000802:	f001 fa17 	bl	8001c34 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d013      	beq.n	8000834 <main+0x144>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000812:	4821      	ldr	r0, [pc, #132]	; (8000898 <main+0x1a8>)
 8000814:	f001 fa26 	bl	8001c64 <HAL_GPIO_WritePin>
	  counter++;
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <main+0x1b0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a20      	ldr	r2, [pc, #128]	; (80008a0 <main+0x1b0>)
 8000820:	6013      	str	r3, [r2, #0]
	  if(counter == 1000) counter = 1;
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <main+0x1b0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800082a:	d116      	bne.n	800085a <main+0x16a>
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <main+0x1b0>)
 800082e:	2201      	movs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	e012      	b.n	800085a <main+0x16a>
	} else {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083a:	4817      	ldr	r0, [pc, #92]	; (8000898 <main+0x1a8>)
 800083c:	f001 fa12 	bl	8001c64 <HAL_GPIO_WritePin>
	  counter_2++;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <main+0x1b4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	3301      	adds	r3, #1
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <main+0x1b4>)
 8000848:	6013      	str	r3, [r2, #0]
	  if(counter_2 == 1000) counter_2 = 1;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <main+0x1b4>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000852:	d102      	bne.n	800085a <main+0x16a>
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <main+0x1b4>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]
	}
	if(alive_sw == 1000) alive_sw = 0;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <main+0x1ac>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000862:	f47f af72 	bne.w	800074a <main+0x5a>
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <main+0x1ac>)
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
    MX_USB_HOST_Process();
 800086c:	e76d      	b.n	800074a <main+0x5a>
 800086e:	bf00      	nop
 8000870:	200001a4 	.word	0x200001a4
 8000874:	20000284 	.word	0x20000284
 8000878:	20000230 	.word	0x20000230
 800087c:	20000298 	.word	0x20000298
 8000880:	40020000 	.word	0x40020000
 8000884:	20000000 	.word	0x20000000
 8000888:	200002c1 	.word	0x200002c1
 800088c:	200002c0 	.word	0x200002c0
 8000890:	200001ec 	.word	0x200001ec
 8000894:	200002c2 	.word	0x200002c2
 8000898:	40020c00 	.word	0x40020c00
 800089c:	2000000c 	.word	0x2000000c
 80008a0:	20000004 	.word	0x20000004
 80008a4:	20000008 	.word	0x20000008

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	; 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	2230      	movs	r2, #48	; 0x30
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f009 f984 	bl	8009bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <SystemClock_Config+0xcc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a27      	ldr	r2, [pc, #156]	; (8000974 <SystemClock_Config+0xcc>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <SystemClock_Config+0xcc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <SystemClock_Config+0xd0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a21      	ldr	r2, [pc, #132]	; (8000978 <SystemClock_Config+0xd0>)
 80008f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <SystemClock_Config+0xd0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000918:	2304      	movs	r3, #4
 800091a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800091c:	23a8      	movs	r3, #168	; 0xa8
 800091e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000924:	2307      	movs	r3, #7
 8000926:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 0320 	add.w	r3, r7, #32
 800092c:	4618      	mov	r0, r3
 800092e:	f003 fbdf 	bl	80040f0 <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000938:	f000 fac0 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	230f      	movs	r3, #15
 800093e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000940:	2302      	movs	r3, #2
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000948:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800094c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800094e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000952:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2105      	movs	r1, #5
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fe40 	bl	80045e0 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000966:	f000 faa9 	bl	8000ebc <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3750      	adds	r7, #80	; 0x50
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_I2C1_Init+0x50>)
 8000982:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <MX_I2C1_Init+0x54>)
 8000984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_I2C1_Init+0x50>)
 8000988:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <MX_I2C1_Init+0x58>)
 800098a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_I2C1_Init+0x50>)
 800099a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800099e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_I2C1_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_I2C1_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_I2C1_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_I2C1_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_I2C1_Init+0x50>)
 80009ba:	f002 fdb5 	bl	8003528 <HAL_I2C_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009c4:	f000 fa7a 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000b0 	.word	0x200000b0
 80009d0:	40005400 	.word	0x40005400
 80009d4:	000186a0 	.word	0x000186a0

080009d8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_I2S3_Init+0x54>)
 80009de:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <MX_I2S3_Init+0x58>)
 80009e0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_I2S3_Init+0x54>)
 80009e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_I2S3_Init+0x54>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_I2S3_Init+0x54>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <MX_I2S3_Init+0x54>)
 80009f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_I2S3_Init+0x54>)
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <MX_I2S3_Init+0x5c>)
 8000a02:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_I2S3_Init+0x54>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_I2S3_Init+0x54>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_I2S3_Init+0x54>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_I2S3_Init+0x54>)
 8000a18:	f002 feca 	bl	80037b0 <HAL_I2S_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a22:	f000 fa4b 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000104 	.word	0x20000104
 8000a30:	40003c00 	.word	0x40003c00
 8000a34:	00017700 	.word	0x00017700

08000a38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a3e:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <MX_SPI1_Init+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a84:	220a      	movs	r2, #10
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_SPI1_Init+0x64>)
 8000a8a:	f004 f909 	bl	8004ca0 <HAL_SPI_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a94:	f000 fa12 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000014c 	.word	0x2000014c
 8000aa0:	40013000 	.word	0x40013000

08000aa4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_TIM14_Init+0x3c>)
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <MX_TIM14_Init+0x40>)
 8000aac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_TIM14_Init+0x3c>)
 8000ab0:	2253      	movs	r2, #83	; 0x53
 8000ab2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_TIM14_Init+0x3c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_TIM14_Init+0x3c>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_TIM14_Init+0x3c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_TIM14_Init+0x3c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_TIM14_Init+0x3c>)
 8000ace:	f004 f970 	bl	8004db2 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000ad8:	f000 f9f0 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200001a4 	.word	0x200001a4
 8000ae4:	40002000 	.word	0x40002000

08000ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <MX_USART2_UART_Init+0x50>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000af4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 8000b1e:	2120      	movs	r1, #32
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b22:	f004 fbe9 	bl	80052f8 <HAL_LIN_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000b2c:	f000 f9c6 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200001ec 	.word	0x200001ec
 8000b38:	40004400 	.word	0x40004400

08000b3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USART3_UART_Init+0x4c>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <MX_USART3_UART_Init+0x50>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_USART3_UART_Init+0x4c>)
 8000b48:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USART3_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USART3_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USART3_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USART3_UART_Init+0x4c>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USART3_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USART3_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart3, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 8000b72:	2120      	movs	r1, #32
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_USART3_UART_Init+0x4c>)
 8000b76:	f004 fbbf 	bl	80052f8 <HAL_LIN_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8000b80:	f000 f99c 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000230 	.word	0x20000230
 8000b8c:	40004800 	.word	0x40004800

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	4b84      	ldr	r3, [pc, #528]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a83      	ldr	r2, [pc, #524]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000bb0:	f043 0310 	orr.w	r3, r3, #16
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b81      	ldr	r3, [pc, #516]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	4b7d      	ldr	r3, [pc, #500]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a7c      	ldr	r2, [pc, #496]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b7a      	ldr	r3, [pc, #488]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b76      	ldr	r3, [pc, #472]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a75      	ldr	r2, [pc, #468]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b73      	ldr	r3, [pc, #460]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b6f      	ldr	r3, [pc, #444]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a6e      	ldr	r2, [pc, #440]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b6c      	ldr	r3, [pc, #432]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b68      	ldr	r3, [pc, #416]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a67      	ldr	r2, [pc, #412]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b65      	ldr	r3, [pc, #404]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b61      	ldr	r3, [pc, #388]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a60      	ldr	r2, [pc, #384]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b5e      	ldr	r3, [pc, #376]	; (8000dbc <MX_GPIO_Init+0x22c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0308 	and.w	r3, r3, #8
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2108      	movs	r1, #8
 8000c52:	485b      	ldr	r0, [pc, #364]	; (8000dc0 <MX_GPIO_Init+0x230>)
 8000c54:	f001 f806 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4859      	ldr	r0, [pc, #356]	; (8000dc4 <MX_GPIO_Init+0x234>)
 8000c5e:	f001 f801 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c62:	2200      	movs	r2, #0
 8000c64:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c68:	4857      	ldr	r0, [pc, #348]	; (8000dc8 <MX_GPIO_Init+0x238>)
 8000c6a:	f000 fffb 	bl	8001c64 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c6e:	2308      	movs	r3, #8
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	484e      	ldr	r0, [pc, #312]	; (8000dc0 <MX_GPIO_Init+0x230>)
 8000c86:	f000 fe39 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4848      	ldr	r0, [pc, #288]	; (8000dc4 <MX_GPIO_Init+0x234>)
 8000ca2:	f000 fe2b 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4840      	ldr	r0, [pc, #256]	; (8000dc4 <MX_GPIO_Init+0x234>)
 8000cc2:	f000 fe1b 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	483c      	ldr	r0, [pc, #240]	; (8000dcc <MX_GPIO_Init+0x23c>)
 8000cdc:	f000 fe0e 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4837      	ldr	r0, [pc, #220]	; (8000dd0 <MX_GPIO_Init+0x240>)
 8000cf4:	f000 fe02 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	482e      	ldr	r0, [pc, #184]	; (8000dd0 <MX_GPIO_Init+0x240>)
 8000d16:	f000 fdf1 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4828      	ldr	r0, [pc, #160]	; (8000dd0 <MX_GPIO_Init+0x240>)
 8000d30:	f000 fde4 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d3a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4821      	ldr	r0, [pc, #132]	; (8000dd0 <MX_GPIO_Init+0x240>)
 8000d4c:	f000 fdd6 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d56:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MX_GPIO_Init+0x238>)
 8000d68:	f000 fdc8 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|OTG_FS_OverCurrent_Pin;
 8000d6c:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <MX_GPIO_Init+0x238>)
 8000d82:	f000 fdbb 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d86:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d8a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <MX_GPIO_Init+0x238>)
 8000da0:	f000 fdac 	bl	80018fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2028      	movs	r0, #40	; 0x28
 8000daa:	f000 fcde 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dae:	2028      	movs	r0, #40	; 0x28
 8000db0:	f000 fcf7 	bl	80017a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db4:	bf00      	nop
 8000db6:	3730      	adds	r7, #48	; 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020c00 	.word	0x40020c00
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	40020400 	.word	0x40020400

08000dd4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim14)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d144      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x9a>
  {
	  if(counter_timer >= 100000) {
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dea:	4925      	ldr	r1, [pc, #148]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000dec:	428a      	cmp	r2, r1
 8000dee:	f173 0300 	sbcs.w	r3, r3, #0
 8000df2:	d30c      	bcc.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x3a>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df8:	4822      	ldr	r0, [pc, #136]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000dfa:	f000 ff4c 	bl	8001c96 <HAL_GPIO_TogglePin>
		  counter_timer = 0;
 8000dfe:	491f      	ldr	r1, [pc, #124]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e9c1 2300 	strd	r2, r3, [r1]
 8000e0c:	e008      	b.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x4c>
	  }
	  else {
		  counter_timer++;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	1c54      	adds	r4, r2, #1
 8000e16:	f143 0500 	adc.w	r5, r3, #0
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e1c:	e9c3 4500 	strd	r4, r5, [r3]
//		  if (HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_11) == 0) {
//			  flag_read_pin = 1;
//		  }
//	  }

	  if (flag_read_pin == 1) {
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d122      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x9a>
//		  if (raw_index < 38) {
//			  raw_data[raw_index] = HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_11);
//			  raw_index ++;
//		  }
//		  read_pin_counter = 0;
		  if (read_pin_counter >= 52) {
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b33      	cmp	r3, #51	; 0x33
 8000e2e:	d919      	bls.n	8000e64 <HAL_TIM_PeriodElapsedCallback+0x90>
			  if (raw_index < 38) {
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b25      	cmp	r3, #37	; 0x25
 8000e36:	d811      	bhi.n	8000e5c <HAL_TIM_PeriodElapsedCallback+0x88>
				  raw_data[raw_index] = HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_11);
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461c      	mov	r4, r3
 8000e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e42:	4810      	ldr	r0, [pc, #64]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000e44:	f000 fef6 	bl	8001c34 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e4e:	551a      	strb	r2, [r3, r4]
				  raw_index ++;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e5a:	701a      	strb	r2, [r3, #0]
			  }
			  read_pin_counter = 0;
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
		  }
	  }


  }
}
 8000e62:	e004      	b.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x9a>
			  read_pin_counter++;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000e6c:	6013      	str	r3, [r2, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bdb0      	pop	{r4, r5, r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200001a4 	.word	0x200001a4
 8000e7c:	20000278 	.word	0x20000278
 8000e80:	000186a0 	.word	0x000186a0
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	200002c1 	.word	0x200002c1
 8000e8c:	20000280 	.word	0x20000280
 8000e90:	200002c0 	.word	0x200002c0
 8000e94:	20000298 	.word	0x20000298

08000e98 <HAL_UART_RxCpltCallback>:
	__HAL_TIM_SET_COUNTER(&htim14, 0);  // set the counter value a 0
	while (__HAL_TIM_GET_COUNTER(&htim14) < us);  // wait for the counter to reach the us input in the parameter
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart3, rx_buff, 20); //You need to toggle a breakpoint on this line!
 8000ea0:	2214      	movs	r2, #20
 8000ea2:	4904      	ldr	r1, [pc, #16]	; (8000eb4 <HAL_UART_RxCpltCallback+0x1c>)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <HAL_UART_RxCpltCallback+0x20>)
 8000ea6:	f004 fb1f 	bl	80054e8 <HAL_UART_Receive_IT>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000284 	.word	0x20000284
 8000eb8:	20000230 	.word	0x20000230

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <Error_Handler+0x8>
	...

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f06:	2007      	movs	r0, #7
 8000f08:	f000 fc24 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_I2C_MspInit+0x84>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d12c      	bne.n	8000f94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5c:	2312      	movs	r3, #18
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <HAL_I2C_MspInit+0x8c>)
 8000f74:	f000 fcc2 	bl	80018fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08e      	sub	sp, #56	; 0x38
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <HAL_I2S_MspInit+0xf0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d15a      	bne.n	800108e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000fdc:	23c0      	movs	r3, #192	; 0xc0
 8000fde:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 fd19 	bl	8004a20 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ff4:	f7ff ff62 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_I2S_MspInit+0xf4>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a26      	ldr	r2, [pc, #152]	; (800109c <HAL_I2S_MspInit+0xf4>)
 8001002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_I2S_MspInit+0xf4>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_I2S_MspInit+0xf4>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_I2S_MspInit+0xf4>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6313      	str	r3, [r2, #48]	; 0x30
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_I2S_MspInit+0xf4>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_I2S_MspInit+0xf4>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4a18      	ldr	r2, [pc, #96]	; (800109c <HAL_I2S_MspInit+0xf4>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_I2S_MspInit+0xf4>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800104c:	2310      	movs	r3, #16
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800105c:	2306      	movs	r3, #6
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	4619      	mov	r1, r3
 8001066:	480e      	ldr	r0, [pc, #56]	; (80010a0 <HAL_I2S_MspInit+0xf8>)
 8001068:	f000 fc48 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800106c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800107e:	2306      	movs	r3, #6
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	4806      	ldr	r0, [pc, #24]	; (80010a4 <HAL_I2S_MspInit+0xfc>)
 800108a:	f000 fc37 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3738      	adds	r7, #56	; 0x38
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40003c00 	.word	0x40003c00
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020800 	.word	0x40020800

080010a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_SPI_MspInit+0x84>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d12b      	bne.n	8001122 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001102:	23e0      	movs	r3, #224	; 0xe0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001112:	2305      	movs	r3, #5
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_SPI_MspInit+0x8c>)
 800111e:	f000 fbed 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40013000 	.word	0x40013000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_TIM_Base_MspInit+0x48>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d115      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_TIM_Base_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <HAL_TIM_Base_MspInit+0x4c>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_TIM_Base_MspInit+0x4c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	202d      	movs	r0, #45	; 0x2d
 800116c:	f000 fafd 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001170:	202d      	movs	r0, #45	; 0x2d
 8001172:	f000 fb16 	bl	80017a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40002000 	.word	0x40002000
 8001184:	40023800 	.word	0x40023800

08001188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a4b      	ldr	r2, [pc, #300]	; (80012d4 <HAL_UART_MspInit+0x14c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d144      	bne.n	8001234 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <HAL_UART_MspInit+0x150>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a49      	ldr	r2, [pc, #292]	; (80012d8 <HAL_UART_MspInit+0x150>)
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <HAL_UART_MspInit+0x150>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <HAL_UART_MspInit+0x150>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a42      	ldr	r2, [pc, #264]	; (80012d8 <HAL_UART_MspInit+0x150>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b40      	ldr	r3, [pc, #256]	; (80012d8 <HAL_UART_MspInit+0x150>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011e2:	2304      	movs	r3, #4
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011f2:	2307      	movs	r3, #7
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4837      	ldr	r0, [pc, #220]	; (80012dc <HAL_UART_MspInit+0x154>)
 80011fe:	f000 fb7d 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001202:	2308      	movs	r3, #8
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001212:	2307      	movs	r3, #7
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	482f      	ldr	r0, [pc, #188]	; (80012dc <HAL_UART_MspInit+0x154>)
 800121e:	f000 fb6d 	bl	80018fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2026      	movs	r0, #38	; 0x26
 8001228:	f000 fa9f 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800122c:	2026      	movs	r0, #38	; 0x26
 800122e:	f000 fab8 	bl	80017a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001232:	e04a      	b.n	80012ca <HAL_UART_MspInit+0x142>
  else if(huart->Instance==USART3)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <HAL_UART_MspInit+0x158>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d145      	bne.n	80012ca <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART3_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_UART_MspInit+0x150>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <HAL_UART_MspInit+0x150>)
 8001248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_UART_MspInit+0x150>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <HAL_UART_MspInit+0x150>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <HAL_UART_MspInit+0x150>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <HAL_UART_MspInit+0x150>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001280:	2301      	movs	r3, #1
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001288:	2307      	movs	r3, #7
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	4814      	ldr	r0, [pc, #80]	; (80012e4 <HAL_UART_MspInit+0x15c>)
 8001294:	f000 fb32 	bl	80018fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012aa:	2307      	movs	r3, #7
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <HAL_UART_MspInit+0x15c>)
 80012b6:	f000 fb21 	bl	80018fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2027      	movs	r0, #39	; 0x27
 80012c0:	f000 fa53 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012c4:	2027      	movs	r0, #39	; 0x27
 80012c6:	f000 fa6c 	bl	80017a2 <HAL_NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3730      	adds	r7, #48	; 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40004400 	.word	0x40004400
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40004800 	.word	0x40004800
 80012e4:	40020c00 	.word	0x40020c00

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f8fa 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <USART2_IRQHandler+0x10>)
 8001342:	f004 f901 	bl	8005548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001ec 	.word	0x200001ec

08001350 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <USART3_IRQHandler+0x10>)
 8001356:	f004 f8f7 	bl	8005548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000230 	.word	0x20000230

08001364 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001368:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800136c:	f000 fcae 	bl	8001ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001370:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001374:	f000 fcaa 	bl	8001ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001382:	f003 fdd5 	bl	8004f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001a4 	.word	0x200001a4

08001390 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <OTG_FS_IRQHandler+0x10>)
 8001396:	f000 ff27 	bl	80021e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200006a8 	.word	0x200006a8

080013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d4:	f008 fc0e 	bl	8009bf4 <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	220c      	movs	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20020000 	.word	0x20020000
 8001404:	00000400 	.word	0x00000400
 8001408:	200002c4 	.word	0x200002c4
 800140c:	20000af8 	.word	0x20000af8

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800146c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800143a:	490e      	ldr	r1, [pc, #56]	; (8001474 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001450:	4c0b      	ldr	r4, [pc, #44]	; (8001480 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800145e:	f7ff ffd7 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001462:	f008 fbcd 	bl	8009c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f7ff f943 	bl	80006f0 <main>
  bx  lr    
 800146a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800146c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001478:	08009d28 	.word	0x08009d28
  ldr r2, =_sbss
 800147c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001480:	20000af4 	.word	0x20000af4

08001484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <HAL_Init+0x40>)
 8001492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_Init+0x40>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_Init+0x40>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f94f 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff fd04 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023c00 	.word	0x40023c00

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f967 	bl	80017be <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 f92f 	bl	800176a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000010 	.word	0x20000010
 8001524:	20000018 	.word	0x20000018
 8001528:	20000014 	.word	0x20000014

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000018 	.word	0x20000018
 8001550:	200002c8 	.word	0x200002c8

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200002c8 	.word	0x200002c8

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff ffee 	bl	8001554 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffde 	bl	8001554 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000018 	.word	0x20000018

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <__NVIC_EnableIRQ+0x38>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100

08001654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0a      	blt.n	800167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <__NVIC_SetPriority+0x4c>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	0112      	lsls	r2, r2, #4
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	440b      	add	r3, r1
 8001678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800167c:	e00a      	b.n	8001694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4908      	ldr	r1, [pc, #32]	; (80016a4 <__NVIC_SetPriority+0x50>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3b04      	subs	r3, #4
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	440b      	add	r3, r1
 8001692:	761a      	strb	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f1c3 0307 	rsb	r3, r3, #7
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	bf28      	it	cs
 80016c6:	2304      	movcs	r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3304      	adds	r3, #4
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d902      	bls.n	80016d8 <NVIC_EncodePriority+0x30>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	e000      	b.n	80016da <NVIC_EncodePriority+0x32>
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4313      	orrs	r3, r2
         );
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff8e 	bl	8001654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff29 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff3e 	bl	80015fc <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff8e 	bl	80016a8 <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5d 	bl	8001654 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff31 	bl	8001618 <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa2 	bl	8001710 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017e4:	f7ff feb6 	bl	8001554 <HAL_GetTick>
 80017e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d008      	beq.n	8001808 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e052      	b.n	80018ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0216 	bic.w	r2, r2, #22
 8001816:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001826:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	2b00      	cmp	r3, #0
 800182e:	d103      	bne.n	8001838 <HAL_DMA_Abort+0x62>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0208 	bic.w	r2, r2, #8
 8001846:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0201 	bic.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001858:	e013      	b.n	8001882 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800185a:	f7ff fe7b 	bl	8001554 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b05      	cmp	r3, #5
 8001866:	d90c      	bls.n	8001882 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2220      	movs	r2, #32
 800186c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2203      	movs	r2, #3
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e015      	b.n	80018ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e4      	bne.n	800185a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001894:	223f      	movs	r2, #63	; 0x3f
 8001896:	409a      	lsls	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d004      	beq.n	80018d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e00c      	b.n	80018ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2205      	movs	r2, #5
 80018d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	e16b      	b.n	8001bf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001918:	2201      	movs	r2, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	429a      	cmp	r2, r3
 8001932:	f040 815a 	bne.w	8001bea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d005      	beq.n	800194e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194a:	2b02      	cmp	r3, #2
 800194c:	d130      	bne.n	80019b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 0201 	and.w	r2, r3, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d017      	beq.n	80019ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d123      	bne.n	8001a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	08da      	lsrs	r2, r3, #3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3208      	adds	r2, #8
 8001a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	08da      	lsrs	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3208      	adds	r2, #8
 8001a3a:	69b9      	ldr	r1, [r7, #24]
 8001a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0203 	and.w	r2, r3, #3
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80b4 	beq.w	8001bea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b60      	ldr	r3, [pc, #384]	; (8001c08 <HAL_GPIO_Init+0x30c>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4a5f      	ldr	r2, [pc, #380]	; (8001c08 <HAL_GPIO_Init+0x30c>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b5d      	ldr	r3, [pc, #372]	; (8001c08 <HAL_GPIO_Init+0x30c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a9e:	4a5b      	ldr	r2, [pc, #364]	; (8001c0c <HAL_GPIO_Init+0x310>)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a52      	ldr	r2, [pc, #328]	; (8001c10 <HAL_GPIO_Init+0x314>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d02b      	beq.n	8001b22 <HAL_GPIO_Init+0x226>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a51      	ldr	r2, [pc, #324]	; (8001c14 <HAL_GPIO_Init+0x318>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d025      	beq.n	8001b1e <HAL_GPIO_Init+0x222>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a50      	ldr	r2, [pc, #320]	; (8001c18 <HAL_GPIO_Init+0x31c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01f      	beq.n	8001b1a <HAL_GPIO_Init+0x21e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4f      	ldr	r2, [pc, #316]	; (8001c1c <HAL_GPIO_Init+0x320>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x21a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4e      	ldr	r2, [pc, #312]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x216>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4d      	ldr	r2, [pc, #308]	; (8001c24 <HAL_GPIO_Init+0x328>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x212>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4c      	ldr	r2, [pc, #304]	; (8001c28 <HAL_GPIO_Init+0x32c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x20e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4b      	ldr	r2, [pc, #300]	; (8001c2c <HAL_GPIO_Init+0x330>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x20a>
 8001b02:	2307      	movs	r3, #7
 8001b04:	e00e      	b.n	8001b24 <HAL_GPIO_Init+0x228>
 8001b06:	2308      	movs	r3, #8
 8001b08:	e00c      	b.n	8001b24 <HAL_GPIO_Init+0x228>
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	e00a      	b.n	8001b24 <HAL_GPIO_Init+0x228>
 8001b0e:	2305      	movs	r3, #5
 8001b10:	e008      	b.n	8001b24 <HAL_GPIO_Init+0x228>
 8001b12:	2304      	movs	r3, #4
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x228>
 8001b16:	2303      	movs	r3, #3
 8001b18:	e004      	b.n	8001b24 <HAL_GPIO_Init+0x228>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e002      	b.n	8001b24 <HAL_GPIO_Init+0x228>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x228>
 8001b22:	2300      	movs	r3, #0
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	f002 0203 	and.w	r2, r2, #3
 8001b2a:	0092      	lsls	r2, r2, #2
 8001b2c:	4093      	lsls	r3, r2
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b34:	4935      	ldr	r1, [pc, #212]	; (8001c0c <HAL_GPIO_Init+0x310>)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <HAL_GPIO_Init+0x334>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b66:	4a32      	ldr	r2, [pc, #200]	; (8001c30 <HAL_GPIO_Init+0x334>)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b6c:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <HAL_GPIO_Init+0x334>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b90:	4a27      	ldr	r2, [pc, #156]	; (8001c30 <HAL_GPIO_Init+0x334>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_GPIO_Init+0x334>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bba:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <HAL_GPIO_Init+0x334>)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_GPIO_Init+0x334>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be4:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <HAL_GPIO_Init+0x334>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3301      	adds	r3, #1
 8001bee:	61fb      	str	r3, [r7, #28]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	2b0f      	cmp	r3, #15
 8001bf4:	f67f ae90 	bls.w	8001918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40013800 	.word	0x40013800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40020400 	.word	0x40020400
 8001c18:	40020800 	.word	0x40020800
 8001c1c:	40020c00 	.word	0x40020c00
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40021400 	.word	0x40021400
 8001c28:	40021800 	.word	0x40021800
 8001c2c:	40021c00 	.word	0x40021c00
 8001c30:	40013c00 	.word	0x40013c00

08001c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e001      	b.n	8001c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
 8001c70:	4613      	mov	r3, r2
 8001c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c74:	787b      	ldrb	r3, [r7, #1]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c80:	e003      	b.n	8001c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	041a      	lsls	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	619a      	str	r2, [r3, #24]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4013      	ands	r3, r2
 8001cae:	041a      	lsls	r2, r3, #16
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	619a      	str	r2, [r3, #24]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d006      	beq.n	8001cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f806 	bl	8001cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40013c00 	.word	0x40013c00

08001cfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d14:	b08f      	sub	sp, #60	; 0x3c
 8001d16:	af0a      	add	r7, sp, #40	; 0x28
 8001d18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e054      	b.n	8001dce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f007 fbda 	bl	80094f8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2203      	movs	r2, #3
 8001d48:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d102      	bne.n	8001d5e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f004 fc06 	bl	8006574 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	687e      	ldr	r6, [r7, #4]
 8001d70:	466d      	mov	r5, sp
 8001d72:	f106 0410 	add.w	r4, r6, #16
 8001d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d86:	1d33      	adds	r3, r6, #4
 8001d88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d8a:	6838      	ldr	r0, [r7, #0]
 8001d8c:	f004 fb80 	bl	8006490 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 fbfd 	bl	8006596 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	687e      	ldr	r6, [r7, #4]
 8001da4:	466d      	mov	r5, sp
 8001da6:	f106 0410 	add.w	r4, r6, #16
 8001daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dba:	1d33      	adds	r3, r6, #4
 8001dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dbe:	6838      	ldr	r0, [r7, #0]
 8001dc0:	f004 fd86 	bl	80068d0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dd6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001dd6:	b590      	push	{r4, r7, lr}
 8001dd8:	b089      	sub	sp, #36	; 0x24
 8001dda:	af04      	add	r7, sp, #16
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	4608      	mov	r0, r1
 8001de0:	4611      	mov	r1, r2
 8001de2:	461a      	mov	r2, r3
 8001de4:	4603      	mov	r3, r0
 8001de6:	70fb      	strb	r3, [r7, #3]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70bb      	strb	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_HCD_HC_Init+0x28>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e076      	b.n	8001eec <HAL_HCD_HC_Init+0x116>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	212c      	movs	r1, #44	; 0x2c
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	333d      	adds	r3, #61	; 0x3d
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3338      	adds	r3, #56	; 0x38
 8001e26:	787a      	ldrb	r2, [r7, #1]
 8001e28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	212c      	movs	r1, #44	; 0x2c
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	3340      	adds	r3, #64	; 0x40
 8001e38:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e3a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	212c      	movs	r1, #44	; 0x2c
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
 8001e46:	4413      	add	r3, r2
 8001e48:	3339      	adds	r3, #57	; 0x39
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	212c      	movs	r1, #44	; 0x2c
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	333f      	adds	r3, #63	; 0x3f
 8001e5c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	78ba      	ldrb	r2, [r7, #2]
 8001e66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e6a:	b2d0      	uxtb	r0, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	333a      	adds	r3, #58	; 0x3a
 8001e78:	4602      	mov	r2, r0
 8001e7a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	da09      	bge.n	8001e98 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	333b      	adds	r3, #59	; 0x3b
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e008      	b.n	8001eaa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	212c      	movs	r1, #44	; 0x2c
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	333b      	adds	r3, #59	; 0x3b
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	333c      	adds	r3, #60	; 0x3c
 8001eb8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ebc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	787c      	ldrb	r4, [r7, #1]
 8001ec4:	78ba      	ldrb	r2, [r7, #2]
 8001ec6:	78f9      	ldrb	r1, [r7, #3]
 8001ec8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001eca:	9302      	str	r3, [sp, #8]
 8001ecc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	4623      	mov	r3, r4
 8001eda:	f004 fe7f 	bl	8006bdc <USB_HC_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}

08001ef4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_HCD_HC_Halt+0x1e>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e00f      	b.n	8001f32 <HAL_HCD_HC_Halt+0x3e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f005 f8cf 	bl	80070c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	70fb      	strb	r3, [r7, #3]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	70bb      	strb	r3, [r7, #2]
 8001f52:	4613      	mov	r3, r2
 8001f54:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	212c      	movs	r1, #44	; 0x2c
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	333b      	adds	r3, #59	; 0x3b
 8001f64:	78ba      	ldrb	r2, [r7, #2]
 8001f66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	333f      	adds	r3, #63	; 0x3f
 8001f76:	787a      	ldrb	r2, [r7, #1]
 8001f78:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f7a:	7c3b      	ldrb	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d112      	bne.n	8001fa6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	212c      	movs	r1, #44	; 0x2c
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3342      	adds	r3, #66	; 0x42
 8001f8e:	2203      	movs	r2, #3
 8001f90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	333d      	adds	r3, #61	; 0x3d
 8001fa0:	7f3a      	ldrb	r2, [r7, #28]
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e008      	b.n	8001fb8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3342      	adds	r3, #66	; 0x42
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	f200 80c6 	bhi.w	800214c <HAL_HCD_HC_SubmitRequest+0x210>
 8001fc0:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc6:	bf00      	nop
 8001fc8:	08001fd9 	.word	0x08001fd9
 8001fcc:	08002139 	.word	0x08002139
 8001fd0:	0800203d 	.word	0x0800203d
 8001fd4:	080020bb 	.word	0x080020bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001fd8:	7c3b      	ldrb	r3, [r7, #16]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	f040 80b8 	bne.w	8002150 <HAL_HCD_HC_SubmitRequest+0x214>
 8001fe0:	78bb      	ldrb	r3, [r7, #2]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 80b4 	bne.w	8002150 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001fe8:	8b3b      	ldrh	r3, [r7, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3355      	adds	r3, #85	; 0x55
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	3355      	adds	r3, #85	; 0x55
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3342      	adds	r3, #66	; 0x42
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002026:	e093      	b.n	8002150 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3342      	adds	r3, #66	; 0x42
 8002036:	2202      	movs	r2, #2
 8002038:	701a      	strb	r2, [r3, #0]
      break;
 800203a:	e089      	b.n	8002150 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800203c:	78bb      	ldrb	r3, [r7, #2]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d11d      	bne.n	800207e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	3355      	adds	r3, #85	; 0x55
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3342      	adds	r3, #66	; 0x42
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002068:	e073      	b.n	8002152 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	3342      	adds	r3, #66	; 0x42
 8002078:	2202      	movs	r2, #2
 800207a:	701a      	strb	r2, [r3, #0]
      break;
 800207c:	e069      	b.n	8002152 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	3354      	adds	r3, #84	; 0x54
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3342      	adds	r3, #66	; 0x42
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
      break;
 80020a4:	e055      	b.n	8002152 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	3342      	adds	r3, #66	; 0x42
 80020b4:	2202      	movs	r2, #2
 80020b6:	701a      	strb	r2, [r3, #0]
      break;
 80020b8:	e04b      	b.n	8002152 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020ba:	78bb      	ldrb	r3, [r7, #2]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d11d      	bne.n	80020fc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3355      	adds	r3, #85	; 0x55
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3342      	adds	r3, #66	; 0x42
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020e6:	e034      	b.n	8002152 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3342      	adds	r3, #66	; 0x42
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]
      break;
 80020fa:	e02a      	b.n	8002152 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3354      	adds	r3, #84	; 0x54
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d109      	bne.n	8002124 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3342      	adds	r3, #66	; 0x42
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
      break;
 8002122:	e016      	b.n	8002152 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3342      	adds	r3, #66	; 0x42
 8002132:	2202      	movs	r2, #2
 8002134:	701a      	strb	r2, [r3, #0]
      break;
 8002136:	e00c      	b.n	8002152 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	3342      	adds	r3, #66	; 0x42
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
      break;
 800214a:	e002      	b.n	8002152 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800214c:	bf00      	nop
 800214e:	e000      	b.n	8002152 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002150:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	212c      	movs	r1, #44	; 0x2c
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	4413      	add	r3, r2
 800215e:	3344      	adds	r3, #68	; 0x44
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	8b3a      	ldrh	r2, [r7, #24]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	202c      	movs	r0, #44	; 0x2c
 800216c:	fb00 f303 	mul.w	r3, r0, r3
 8002170:	440b      	add	r3, r1
 8002172:	334c      	adds	r3, #76	; 0x4c
 8002174:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3360      	adds	r3, #96	; 0x60
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3350      	adds	r3, #80	; 0x50
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3339      	adds	r3, #57	; 0x39
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	3361      	adds	r3, #97	; 0x61
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	222c      	movs	r2, #44	; 0x2c
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	3338      	adds	r3, #56	; 0x38
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	18d1      	adds	r1, r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	f004 fe22 	bl	8006e20 <USB_HC_StartXfer>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop

080021e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 fb23 	bl	800684a <USB_GetMode>
 8002204:	4603      	mov	r3, r0
 8002206:	2b01      	cmp	r3, #1
 8002208:	f040 80f6 	bne.w	80023f8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f004 fb07 	bl	8006824 <USB_ReadInterrupts>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80ec 	beq.w	80023f6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fafe 	bl	8006824 <USB_ReadInterrupts>
 8002228:	4603      	mov	r3, r0
 800222a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002232:	d104      	bne.n	800223e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800223c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f004 faee 	bl	8006824 <USB_ReadInterrupts>
 8002248:	4603      	mov	r3, r0
 800224a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002252:	d104      	bne.n	800225e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800225c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f004 fade 	bl	8006824 <USB_ReadInterrupts>
 8002268:	4603      	mov	r3, r0
 800226a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800226e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002272:	d104      	bne.n	800227e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800227c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f004 face 	bl	8006824 <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d103      	bne.n	800229a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2202      	movs	r2, #2
 8002298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 fac0 	bl	8006824 <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ae:	d11c      	bne.n	80022ea <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10f      	bne.n	80022ea <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80022ca:	2110      	movs	r1, #16
 80022cc:	6938      	ldr	r0, [r7, #16]
 80022ce:	f004 f9af 	bl	8006630 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80022d2:	6938      	ldr	r0, [r7, #16]
 80022d4:	f004 f9e0 	bl	8006698 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2101      	movs	r1, #1
 80022de:	4618      	mov	r0, r3
 80022e0:	f004 fbb6 	bl	8006a50 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f007 f985 	bl	80095f4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 fa98 	bl	8006824 <USB_ReadInterrupts>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022fe:	d102      	bne.n	8002306 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f001 f89e 	bl	8003442 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f004 fa8a 	bl	8006824 <USB_ReadInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b08      	cmp	r3, #8
 8002318:	d106      	bne.n	8002328 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f007 f94e 	bl	80095bc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2208      	movs	r2, #8
 8002326:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f004 fa79 	bl	8006824 <USB_ReadInterrupts>
 8002332:	4603      	mov	r3, r0
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b10      	cmp	r3, #16
 800233a:	d101      	bne.n	8002340 <HAL_HCD_IRQHandler+0x158>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_HCD_IRQHandler+0x15a>
 8002340:	2300      	movs	r3, #0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d012      	beq.n	800236c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0210 	bic.w	r2, r2, #16
 8002354:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 ffa1 	bl	800329e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0210 	orr.w	r2, r2, #16
 800236a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f004 fa57 	bl	8006824 <USB_ReadInterrupts>
 8002376:	4603      	mov	r3, r0
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002380:	d13a      	bne.n	80023f8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f004 fe8c 	bl	80070a4 <USB_HC_ReadInterrupt>
 800238c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	e025      	b.n	80023e0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d018      	beq.n	80023da <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023be:	d106      	bne.n	80023ce <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8ab 	bl	8002522 <HCD_HC_IN_IRQHandler>
 80023cc:	e005      	b.n	80023da <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4619      	mov	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fbf9 	bl	8002bcc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d3d4      	bcc.n	8002394 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f2:	615a      	str	r2, [r3, #20]
 80023f4:	e000      	b.n	80023f8 <HAL_HCD_IRQHandler+0x210>
      return;
 80023f6:	bf00      	nop
    }
  }
}
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_HCD_Start+0x16>
 8002410:	2302      	movs	r3, #2
 8002412:	e013      	b.n	800243c <HAL_HCD_Start+0x3e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f004 fb78 	bl	8006b18 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f004 f890 	bl	8006552 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_HCD_Stop+0x16>
 8002456:	2302      	movs	r3, #2
 8002458:	e00d      	b.n	8002476 <HAL_HCD_Stop+0x32>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f004 ff66 	bl	8007338 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f004 fb1a 	bl	8006ac4 <USB_ResetPort>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3360      	adds	r3, #96	; 0x60
 80024b4:	781b      	ldrb	r3, [r3, #0]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3350      	adds	r3, #80	; 0x50
 80024dc:	681b      	ldr	r3, [r3, #0]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f004 fb5e 	bl	8006bb8 <USB_GetCurrentFrame>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f004 fb39 	bl	8006b8a <USB_GetHostSpeed>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b04      	cmp	r3, #4
 8002550:	d11a      	bne.n	8002588 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	461a      	mov	r2, r3
 8002560:	2304      	movs	r3, #4
 8002562:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3361      	adds	r3, #97	; 0x61
 8002572:	2206      	movs	r2, #6
 8002574:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f004 fda0 	bl	80070c6 <USB_HC_Halt>
 8002586:	e0af      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259e:	d11b      	bne.n	80025d8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	461a      	mov	r2, r3
 80025ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	3361      	adds	r3, #97	; 0x61
 80025c2:	2207      	movs	r2, #7
 80025c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f004 fd78 	bl	80070c6 <USB_HC_Halt>
 80025d6:	e087      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	d109      	bne.n	8002602 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	461a      	mov	r2, r3
 80025fc:	2320      	movs	r3, #32
 80025fe:	6093      	str	r3, [r2, #8]
 8002600:	e072      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d11a      	bne.n	800264e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	461a      	mov	r2, r3
 8002626:	2308      	movs	r3, #8
 8002628:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3361      	adds	r3, #97	; 0x61
 8002638:	2205      	movs	r2, #5
 800263a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f004 fd3d 	bl	80070c6 <USB_HC_Halt>
 800264c:	e04c      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002664:	d11b      	bne.n	800269e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	461a      	mov	r2, r3
 8002674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002678:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	3361      	adds	r3, #97	; 0x61
 8002688:	2208      	movs	r2, #8
 800268a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f004 fd15 	bl	80070c6 <USB_HC_Halt>
 800269c:	e024      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b0:	2b80      	cmp	r3, #128	; 0x80
 80026b2:	d119      	bne.n	80026e8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	461a      	mov	r2, r3
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	3361      	adds	r3, #97	; 0x61
 80026d4:	2206      	movs	r2, #6
 80026d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 fcef 	bl	80070c6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026fe:	d112      	bne.n	8002726 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f004 fcdb 	bl	80070c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	461a      	mov	r2, r3
 800271e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002722:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002724:	e24e      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	f040 80df 	bne.w	80028fc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d019      	beq.n	800277a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3348      	adds	r3, #72	; 0x48
 8002754:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	0159      	lsls	r1, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	440b      	add	r3, r1
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	202c      	movs	r0, #44	; 0x2c
 8002770:	fb00 f303 	mul.w	r3, r0, r3
 8002774:	440b      	add	r3, r1
 8002776:	3350      	adds	r3, #80	; 0x50
 8002778:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	3361      	adds	r3, #97	; 0x61
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	335c      	adds	r3, #92	; 0x5c
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027aa:	461a      	mov	r2, r3
 80027ac:	2301      	movs	r3, #1
 80027ae:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	333f      	adds	r3, #63	; 0x3f
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d009      	beq.n	80027d8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	333f      	adds	r3, #63	; 0x3f
 80027d2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d111      	bne.n	80027fc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 fc6f 	bl	80070c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f4:	461a      	mov	r2, r3
 80027f6:	2310      	movs	r3, #16
 80027f8:	6093      	str	r3, [r2, #8]
 80027fa:	e03a      	b.n	8002872 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	212c      	movs	r1, #44	; 0x2c
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	333f      	adds	r3, #63	; 0x3f
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d009      	beq.n	8002824 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	212c      	movs	r1, #44	; 0x2c
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	4413      	add	r3, r2
 800281c:	333f      	adds	r3, #63	; 0x3f
 800281e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002820:	2b01      	cmp	r3, #1
 8002822:	d126      	bne.n	8002872 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	0151      	lsls	r1, r2, #5
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	440a      	add	r2, r1
 800283a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800283e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002842:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3360      	adds	r3, #96	; 0x60
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	b2d9      	uxtb	r1, r3
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	202c      	movs	r0, #44	; 0x2c
 8002860:	fb00 f303 	mul.w	r3, r0, r3
 8002864:	4413      	add	r3, r2
 8002866:	3360      	adds	r3, #96	; 0x60
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f006 fecf 	bl	8009610 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d12b      	bne.n	80028d2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	3348      	adds	r3, #72	; 0x48
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	202c      	movs	r0, #44	; 0x2c
 8002890:	fb00 f202 	mul.w	r2, r0, r2
 8002894:	440a      	add	r2, r1
 8002896:	3240      	adds	r2, #64	; 0x40
 8002898:	8812      	ldrh	r2, [r2, #0]
 800289a:	fbb3 f3f2 	udiv	r3, r3, r2
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 818e 	beq.w	8002bc4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3354      	adds	r3, #84	; 0x54
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	f083 0301 	eor.w	r3, r3, #1
 80028bc:	b2d8      	uxtb	r0, r3
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	3354      	adds	r3, #84	; 0x54
 80028cc:	4602      	mov	r2, r0
 80028ce:	701a      	strb	r2, [r3, #0]
}
 80028d0:	e178      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	3354      	adds	r3, #84	; 0x54
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	f083 0301 	eor.w	r3, r3, #1
 80028e6:	b2d8      	uxtb	r0, r3
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3354      	adds	r3, #84	; 0x54
 80028f6:	4602      	mov	r2, r0
 80028f8:	701a      	strb	r2, [r3, #0]
}
 80028fa:	e163      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b02      	cmp	r3, #2
 8002910:	f040 80f6 	bne.w	8002b00 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3361      	adds	r3, #97	; 0x61
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d109      	bne.n	800293c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3360      	adds	r3, #96	; 0x60
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e0c9      	b.n	8002ad0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3361      	adds	r3, #97	; 0x61
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d109      	bne.n	8002964 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3360      	adds	r3, #96	; 0x60
 800295e:	2205      	movs	r2, #5
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e0b5      	b.n	8002ad0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3361      	adds	r3, #97	; 0x61
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b06      	cmp	r3, #6
 8002976:	d009      	beq.n	800298c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	3361      	adds	r3, #97	; 0x61
 8002986:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002988:	2b08      	cmp	r3, #8
 800298a:	d150      	bne.n	8002a2e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	335c      	adds	r3, #92	; 0x5c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	202c      	movs	r0, #44	; 0x2c
 80029a4:	fb00 f303 	mul.w	r3, r0, r3
 80029a8:	440b      	add	r3, r1
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	335c      	adds	r3, #92	; 0x5c
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d912      	bls.n	80029e8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	335c      	adds	r3, #92	; 0x5c
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3360      	adds	r3, #96	; 0x60
 80029e2:	2204      	movs	r2, #4
 80029e4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029e6:	e073      	b.n	8002ad0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3360      	adds	r3, #96	; 0x60
 80029f6:	2202      	movs	r2, #2
 80029f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a10:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a18:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a2c:	e050      	b.n	8002ad0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3361      	adds	r3, #97	; 0x61
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d122      	bne.n	8002a88 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3360      	adds	r3, #96	; 0x60
 8002a50:	2202      	movs	r2, #2
 8002a52:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a6a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a72:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e023      	b.n	8002ad0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b07      	cmp	r3, #7
 8002a9a:	d119      	bne.n	8002ad0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	335c      	adds	r3, #92	; 0x5c
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	202c      	movs	r0, #44	; 0x2c
 8002ab4:	fb00 f303 	mul.w	r3, r0, r3
 8002ab8:	440b      	add	r3, r1
 8002aba:	335c      	adds	r3, #92	; 0x5c
 8002abc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3360      	adds	r3, #96	; 0x60
 8002acc:	2204      	movs	r2, #4
 8002ace:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	461a      	mov	r2, r3
 8002ade:	2302      	movs	r3, #2
 8002ae0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	b2d9      	uxtb	r1, r3
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	202c      	movs	r0, #44	; 0x2c
 8002aec:	fb00 f303 	mul.w	r3, r0, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3360      	adds	r3, #96	; 0x60
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f006 fd89 	bl	8009610 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002afe:	e061      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d156      	bne.n	8002bc4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	333f      	adds	r3, #63	; 0x3f
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d111      	bne.n	8002b4e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	335c      	adds	r3, #92	; 0x5c
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 fabd 	bl	80070c6 <USB_HC_Halt>
 8002b4c:	e031      	b.n	8002bb2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	333f      	adds	r3, #63	; 0x3f
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	333f      	adds	r3, #63	; 0x3f
 8002b70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d11d      	bne.n	8002bb2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	335c      	adds	r3, #92	; 0x5c
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d110      	bne.n	8002bb2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3361      	adds	r3, #97	; 0x61
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f004 fa8a 	bl	80070c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	6093      	str	r3, [r2, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d11a      	bne.n	8002c32 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3361      	adds	r3, #97	; 0x61
 8002c1c:	2206      	movs	r2, #6
 8002c1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 fa4b 	bl	80070c6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002c30:	e331      	b.n	8003296 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d12e      	bne.n	8002ca6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	461a      	mov	r2, r3
 8002c56:	2320      	movs	r3, #32
 8002c58:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	333d      	adds	r3, #61	; 0x3d
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	f040 8313 	bne.w	8003296 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	333d      	adds	r3, #61	; 0x3d
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3360      	adds	r3, #96	; 0x60
 8002c90:	2202      	movs	r2, #2
 8002c92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 fa11 	bl	80070c6 <USB_HC_Halt>
}
 8002ca4:	e2f7      	b.n	8003296 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cbc:	d112      	bne.n	8002ce4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f004 f9f2 	bl	80070c6 <USB_HC_Halt>
}
 8002ce2:	e2d8      	b.n	8003296 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d140      	bne.n	8002d7c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	335c      	adds	r3, #92	; 0x5c
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	d111      	bne.n	8002d46 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	333d      	adds	r3, #61	; 0x3d
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	461a      	mov	r2, r3
 8002d42:	2340      	movs	r3, #64	; 0x40
 8002d44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	461a      	mov	r2, r3
 8002d54:	2301      	movs	r3, #1
 8002d56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3361      	adds	r3, #97	; 0x61
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f004 f9a6 	bl	80070c6 <USB_HC_Halt>
}
 8002d7a:	e28c      	b.n	8003296 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8e:	2b40      	cmp	r3, #64	; 0x40
 8002d90:	d12c      	bne.n	8002dec <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3361      	adds	r3, #97	; 0x61
 8002da0:	2204      	movs	r2, #4
 8002da2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	333d      	adds	r3, #61	; 0x3d
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	335c      	adds	r3, #92	; 0x5c
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 f977 	bl	80070c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	461a      	mov	r2, r3
 8002de6:	2340      	movs	r3, #64	; 0x40
 8002de8:	6093      	str	r3, [r2, #8]
}
 8002dea:	e254      	b.n	8003296 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d11a      	bne.n	8002e38 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2308      	movs	r3, #8
 8002e12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3361      	adds	r3, #97	; 0x61
 8002e22:	2205      	movs	r2, #5
 8002e24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f004 f948 	bl	80070c6 <USB_HC_Halt>
}
 8002e36:	e22e      	b.n	8003296 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d140      	bne.n	8002ed0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	335c      	adds	r3, #92	; 0x5c
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3361      	adds	r3, #97	; 0x61
 8002e6e:	2203      	movs	r2, #3
 8002e70:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	333d      	adds	r3, #61	; 0x3d
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d112      	bne.n	8002eac <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	333c      	adds	r3, #60	; 0x3c
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d108      	bne.n	8002eac <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	333d      	adds	r3, #61	; 0x3d
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f004 f905 	bl	80070c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2310      	movs	r3, #16
 8002ecc:	6093      	str	r3, [r2, #8]
}
 8002ece:	e1e2      	b.n	8003296 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b80      	cmp	r3, #128	; 0x80
 8002ee4:	d164      	bne.n	8002fb0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d111      	bne.n	8002f12 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	212c      	movs	r1, #44	; 0x2c
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	4413      	add	r3, r2
 8002efa:	3361      	adds	r3, #97	; 0x61
 8002efc:	2206      	movs	r2, #6
 8002efe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f004 f8db 	bl	80070c6 <USB_HC_Halt>
 8002f10:	e044      	b.n	8002f9c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	335c      	adds	r3, #92	; 0x5c
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	202c      	movs	r0, #44	; 0x2c
 8002f2a:	fb00 f303 	mul.w	r3, r0, r3
 8002f2e:	440b      	add	r3, r1
 8002f30:	335c      	adds	r3, #92	; 0x5c
 8002f32:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	212c      	movs	r1, #44	; 0x2c
 8002f3a:	fb01 f303 	mul.w	r3, r1, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	335c      	adds	r3, #92	; 0x5c
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d920      	bls.n	8002f8a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	335c      	adds	r3, #92	; 0x5c
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	3360      	adds	r3, #96	; 0x60
 8002f68:	2204      	movs	r2, #4
 8002f6a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	b2d9      	uxtb	r1, r3
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	202c      	movs	r0, #44	; 0x2c
 8002f76:	fb00 f303 	mul.w	r3, r0, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3360      	adds	r3, #96	; 0x60
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f006 fb44 	bl	8009610 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f88:	e008      	b.n	8002f9c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	3360      	adds	r3, #96	; 0x60
 8002f98:	2202      	movs	r2, #2
 8002f9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	6093      	str	r3, [r2, #8]
}
 8002fae:	e172      	b.n	8003296 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc6:	d11b      	bne.n	8003000 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3361      	adds	r3, #97	; 0x61
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f004 f86e 	bl	80070c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ffc:	6093      	str	r3, [r2, #8]
}
 8002ffe:	e14a      	b.n	8003296 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b02      	cmp	r3, #2
 8003014:	f040 813f 	bne.w	8003296 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3361      	adds	r3, #97	; 0x61
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d17d      	bne.n	8003128 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	212c      	movs	r1, #44	; 0x2c
 8003032:	fb01 f303 	mul.w	r3, r1, r3
 8003036:	4413      	add	r3, r2
 8003038:	3360      	adds	r3, #96	; 0x60
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	333f      	adds	r3, #63	; 0x3f
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d00a      	beq.n	8003068 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	333f      	adds	r3, #63	; 0x3f
 8003060:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003062:	2b03      	cmp	r3, #3
 8003064:	f040 8100 	bne.w	8003268 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d113      	bne.n	8003098 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	4413      	add	r3, r2
 800307c:	3355      	adds	r3, #85	; 0x55
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	f083 0301 	eor.w	r3, r3, #1
 8003084:	b2d8      	uxtb	r0, r3
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3355      	adds	r3, #85	; 0x55
 8003094:	4602      	mov	r2, r0
 8003096:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	2b01      	cmp	r3, #1
 800309e:	f040 80e3 	bne.w	8003268 <HCD_HC_OUT_IRQHandler+0x69c>
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	334c      	adds	r3, #76	; 0x4c
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80d8 	beq.w	8003268 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	334c      	adds	r3, #76	; 0x4c
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	202c      	movs	r0, #44	; 0x2c
 80030ce:	fb00 f202 	mul.w	r2, r0, r2
 80030d2:	440a      	add	r2, r1
 80030d4:	3240      	adds	r2, #64	; 0x40
 80030d6:	8812      	ldrh	r2, [r2, #0]
 80030d8:	4413      	add	r3, r2
 80030da:	3b01      	subs	r3, #1
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	202c      	movs	r0, #44	; 0x2c
 80030e2:	fb00 f202 	mul.w	r2, r0, r2
 80030e6:	440a      	add	r2, r1
 80030e8:	3240      	adds	r2, #64	; 0x40
 80030ea:	8812      	ldrh	r2, [r2, #0]
 80030ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80b5 	beq.w	8003268 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	212c      	movs	r1, #44	; 0x2c
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	3355      	adds	r3, #85	; 0x55
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	f083 0301 	eor.w	r3, r3, #1
 8003112:	b2d8      	uxtb	r0, r3
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4413      	add	r3, r2
 8003120:	3355      	adds	r3, #85	; 0x55
 8003122:	4602      	mov	r2, r0
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e09f      	b.n	8003268 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3361      	adds	r3, #97	; 0x61
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d109      	bne.n	8003150 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3360      	adds	r3, #96	; 0x60
 800314a:	2202      	movs	r2, #2
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e08b      	b.n	8003268 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3361      	adds	r3, #97	; 0x61
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b04      	cmp	r3, #4
 8003162:	d109      	bne.n	8003178 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	3360      	adds	r3, #96	; 0x60
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e077      	b.n	8003268 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3361      	adds	r3, #97	; 0x61
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d109      	bne.n	80031a0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3360      	adds	r3, #96	; 0x60
 800319a:	2205      	movs	r2, #5
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e063      	b.n	8003268 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3361      	adds	r3, #97	; 0x61
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b06      	cmp	r3, #6
 80031b2:	d009      	beq.n	80031c8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3361      	adds	r3, #97	; 0x61
 80031c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d14f      	bne.n	8003268 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	335c      	adds	r3, #92	; 0x5c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	202c      	movs	r0, #44	; 0x2c
 80031e0:	fb00 f303 	mul.w	r3, r0, r3
 80031e4:	440b      	add	r3, r1
 80031e6:	335c      	adds	r3, #92	; 0x5c
 80031e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	335c      	adds	r3, #92	; 0x5c
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d912      	bls.n	8003224 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	335c      	adds	r3, #92	; 0x5c
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3360      	adds	r3, #96	; 0x60
 800321e:	2204      	movs	r2, #4
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e021      	b.n	8003268 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	3360      	adds	r3, #96	; 0x60
 8003232:	2202      	movs	r2, #2
 8003234:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4413      	add	r3, r2
 800323e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800324c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003254:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	461a      	mov	r2, r3
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	461a      	mov	r2, r3
 8003276:	2302      	movs	r3, #2
 8003278:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	b2d9      	uxtb	r1, r3
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	202c      	movs	r0, #44	; 0x2c
 8003284:	fb00 f303 	mul.w	r3, r0, r3
 8003288:	4413      	add	r3, r2
 800328a:	3360      	adds	r3, #96	; 0x60
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f006 f9bd 	bl	8009610 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003296:	bf00      	nop
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b08a      	sub	sp, #40	; 0x28
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	0c5b      	lsrs	r3, r3, #17
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d004      	beq.n	80032e4 <HCD_RXQLVL_IRQHandler+0x46>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b05      	cmp	r3, #5
 80032de:	f000 80a9 	beq.w	8003434 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032e2:	e0aa      	b.n	800343a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80a6 	beq.w	8003438 <HCD_RXQLVL_IRQHandler+0x19a>
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3344      	adds	r3, #68	; 0x44
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 809b 	beq.w	8003438 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	212c      	movs	r1, #44	; 0x2c
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	4413      	add	r3, r2
 800330e:	3350      	adds	r3, #80	; 0x50
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	441a      	add	r2, r3
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	202c      	movs	r0, #44	; 0x2c
 800331c:	fb00 f303 	mul.w	r3, r0, r3
 8003320:	440b      	add	r3, r1
 8003322:	334c      	adds	r3, #76	; 0x4c
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d87a      	bhi.n	8003420 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	3344      	adds	r3, #68	; 0x44
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	b292      	uxth	r2, r2
 8003342:	4619      	mov	r1, r3
 8003344:	f003 fa16 	bl	8006774 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	3344      	adds	r3, #68	; 0x44
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	441a      	add	r2, r3
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	202c      	movs	r0, #44	; 0x2c
 8003362:	fb00 f303 	mul.w	r3, r0, r3
 8003366:	440b      	add	r3, r1
 8003368:	3344      	adds	r3, #68	; 0x44
 800336a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	212c      	movs	r1, #44	; 0x2c
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	3350      	adds	r3, #80	; 0x50
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	441a      	add	r2, r3
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	202c      	movs	r0, #44	; 0x2c
 8003386:	fb00 f303 	mul.w	r3, r0, r3
 800338a:	440b      	add	r3, r1
 800338c:	3350      	adds	r3, #80	; 0x50
 800338e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	0cdb      	lsrs	r3, r3, #19
 80033a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	212c      	movs	r1, #44	; 0x2c
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	3340      	adds	r3, #64	; 0x40
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d13c      	bne.n	8003438 <HCD_RXQLVL_IRQHandler+0x19a>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d039      	beq.n	8003438 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033da:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033e2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f0:	461a      	mov	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	3354      	adds	r3, #84	; 0x54
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	f083 0301 	eor.w	r3, r3, #1
 800340a:	b2d8      	uxtb	r0, r3
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	3354      	adds	r3, #84	; 0x54
 800341a:	4602      	mov	r2, r0
 800341c:	701a      	strb	r2, [r3, #0]
      break;
 800341e:	e00b      	b.n	8003438 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	3360      	adds	r3, #96	; 0x60
 800342e:	2204      	movs	r2, #4
 8003430:	701a      	strb	r2, [r3, #0]
      break;
 8003432:	e001      	b.n	8003438 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003434:	bf00      	nop
 8003436:	e000      	b.n	800343a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003438:	bf00      	nop
  }
}
 800343a:	bf00      	nop
 800343c:	3728      	adds	r7, #40	; 0x28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800346e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d10b      	bne.n	8003492 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d102      	bne.n	800348a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f006 f8a7 	bl	80095d8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f043 0302 	orr.w	r3, r3, #2
 8003490:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b08      	cmp	r3, #8
 800349a:	d132      	bne.n	8003502 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f043 0308 	orr.w	r3, r3, #8
 80034a2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d126      	bne.n	80034fc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d113      	bne.n	80034de <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80034bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034c0:	d106      	bne.n	80034d0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2102      	movs	r1, #2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f003 fac1 	bl	8006a50 <USB_InitFSLSPClkSel>
 80034ce:	e011      	b.n	80034f4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 faba 	bl	8006a50 <USB_InitFSLSPClkSel>
 80034dc:	e00a      	b.n	80034f4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d106      	bne.n	80034f4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ec:	461a      	mov	r2, r3
 80034ee:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034f2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f006 f899 	bl	800962c <HAL_HCD_PortEnabled_Callback>
 80034fa:	e002      	b.n	8003502 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f006 f8a3 	bl	8009648 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b20      	cmp	r3, #32
 800350a:	d103      	bne.n	8003514 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f043 0320 	orr.w	r3, r3, #32
 8003512:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800351a:	461a      	mov	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6013      	str	r3, [r2, #0]
}
 8003520:	bf00      	nop
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e12b      	b.n	8003792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fce2 	bl	8000f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2224      	movs	r2, #36	; 0x24
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800357a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800358a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800358c:	f001 fa20 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 8003590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4a81      	ldr	r2, [pc, #516]	; (800379c <HAL_I2C_Init+0x274>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d807      	bhi.n	80035ac <HAL_I2C_Init+0x84>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4a80      	ldr	r2, [pc, #512]	; (80037a0 <HAL_I2C_Init+0x278>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	bf94      	ite	ls
 80035a4:	2301      	movls	r3, #1
 80035a6:	2300      	movhi	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	e006      	b.n	80035ba <HAL_I2C_Init+0x92>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a7d      	ldr	r2, [pc, #500]	; (80037a4 <HAL_I2C_Init+0x27c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	bf94      	ite	ls
 80035b4:	2301      	movls	r3, #1
 80035b6:	2300      	movhi	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0e7      	b.n	8003792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a78      	ldr	r2, [pc, #480]	; (80037a8 <HAL_I2C_Init+0x280>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	0c9b      	lsrs	r3, r3, #18
 80035cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	4a6a      	ldr	r2, [pc, #424]	; (800379c <HAL_I2C_Init+0x274>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d802      	bhi.n	80035fc <HAL_I2C_Init+0xd4>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	3301      	adds	r3, #1
 80035fa:	e009      	b.n	8003610 <HAL_I2C_Init+0xe8>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	4a69      	ldr	r2, [pc, #420]	; (80037ac <HAL_I2C_Init+0x284>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	099b      	lsrs	r3, r3, #6
 800360e:	3301      	adds	r3, #1
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	430b      	orrs	r3, r1
 8003616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	495c      	ldr	r1, [pc, #368]	; (800379c <HAL_I2C_Init+0x274>)
 800362c:	428b      	cmp	r3, r1
 800362e:	d819      	bhi.n	8003664 <HAL_I2C_Init+0x13c>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1e59      	subs	r1, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	fbb1 f3f3 	udiv	r3, r1, r3
 800363e:	1c59      	adds	r1, r3, #1
 8003640:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003644:	400b      	ands	r3, r1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_I2C_Init+0x138>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1e59      	subs	r1, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fbb1 f3f3 	udiv	r3, r1, r3
 8003658:	3301      	adds	r3, #1
 800365a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365e:	e051      	b.n	8003704 <HAL_I2C_Init+0x1dc>
 8003660:	2304      	movs	r3, #4
 8003662:	e04f      	b.n	8003704 <HAL_I2C_Init+0x1dc>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d111      	bne.n	8003690 <HAL_I2C_Init+0x168>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e58      	subs	r0, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	440b      	add	r3, r1
 800367a:	fbb0 f3f3 	udiv	r3, r0, r3
 800367e:	3301      	adds	r3, #1
 8003680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e012      	b.n	80036b6 <HAL_I2C_Init+0x18e>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1e58      	subs	r0, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	0099      	lsls	r1, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_I2C_Init+0x196>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e022      	b.n	8003704 <HAL_I2C_Init+0x1dc>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10e      	bne.n	80036e4 <HAL_I2C_Init+0x1bc>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1e58      	subs	r0, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6859      	ldr	r1, [r3, #4]
 80036ce:	460b      	mov	r3, r1
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	440b      	add	r3, r1
 80036d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d8:	3301      	adds	r3, #1
 80036da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e2:	e00f      	b.n	8003704 <HAL_I2C_Init+0x1dc>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1e58      	subs	r0, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6859      	ldr	r1, [r3, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	0099      	lsls	r1, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036fa:	3301      	adds	r3, #1
 80036fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	6809      	ldr	r1, [r1, #0]
 8003708:	4313      	orrs	r3, r2
 800370a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6911      	ldr	r1, [r2, #16]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68d2      	ldr	r2, [r2, #12]
 800373e:	4311      	orrs	r1, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	430b      	orrs	r3, r1
 8003746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	000186a0 	.word	0x000186a0
 80037a0:	001e847f 	.word	0x001e847f
 80037a4:	003d08ff 	.word	0x003d08ff
 80037a8:	431bde83 	.word	0x431bde83
 80037ac:	10624dd3 	.word	0x10624dd3

080037b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e128      	b.n	8003a14 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a90      	ldr	r2, [pc, #576]	; (8003a1c <HAL_I2S_Init+0x26c>)
 80037da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7fd fbe3 	bl	8000fa8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037f8:	f023 030f 	bic.w	r3, r3, #15
 80037fc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2202      	movs	r2, #2
 8003804:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d060      	beq.n	80038d0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003816:	2310      	movs	r3, #16
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e001      	b.n	8003820 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800381c:	2320      	movs	r3, #32
 800381e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b20      	cmp	r3, #32
 8003826:	d802      	bhi.n	800382e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800382e:	2001      	movs	r0, #1
 8003830:	f001 f9d8 	bl	8004be4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003834:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800383e:	d125      	bne.n	800388c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	461a      	mov	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	3305      	adds	r3, #5
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	e01f      	b.n	80038aa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	fbb2 f2f3 	udiv	r2, r2, r3
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	461a      	mov	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	3305      	adds	r3, #5
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	e00e      	b.n	80038aa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	fbb2 f2f3 	udiv	r2, r2, r3
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	461a      	mov	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	3305      	adds	r3, #5
 80038a8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4a5c      	ldr	r2, [pc, #368]	; (8003a20 <HAL_I2S_Init+0x270>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	08db      	lsrs	r3, r3, #3
 80038b4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	e003      	b.n	80038d8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80038d0:	2302      	movs	r3, #2
 80038d2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d902      	bls.n	80038e4 <HAL_I2S_Init+0x134>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	2bff      	cmp	r3, #255	; 0xff
 80038e2:	d907      	bls.n	80038f4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e8:	f043 0210 	orr.w	r2, r3, #16
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e08f      	b.n	8003a14 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	ea42 0103 	orr.w	r1, r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	430a      	orrs	r2, r1
 8003906:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003912:	f023 030f 	bic.w	r3, r3, #15
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6851      	ldr	r1, [r2, #4]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6892      	ldr	r2, [r2, #8]
 800391e:	4311      	orrs	r1, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	68d2      	ldr	r2, [r2, #12]
 8003924:	4311      	orrs	r1, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6992      	ldr	r2, [r2, #24]
 800392a:	430a      	orrs	r2, r1
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003936:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d161      	bne.n	8003a04 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a38      	ldr	r2, [pc, #224]	; (8003a24 <HAL_I2S_Init+0x274>)
 8003944:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a37      	ldr	r2, [pc, #220]	; (8003a28 <HAL_I2S_Init+0x278>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d101      	bne.n	8003954 <HAL_I2S_Init+0x1a4>
 8003950:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <HAL_I2S_Init+0x27c>)
 8003952:	e001      	b.n	8003958 <HAL_I2S_Init+0x1a8>
 8003954:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	4932      	ldr	r1, [pc, #200]	; (8003a28 <HAL_I2S_Init+0x278>)
 8003960:	428a      	cmp	r2, r1
 8003962:	d101      	bne.n	8003968 <HAL_I2S_Init+0x1b8>
 8003964:	4a31      	ldr	r2, [pc, #196]	; (8003a2c <HAL_I2S_Init+0x27c>)
 8003966:	e001      	b.n	800396c <HAL_I2S_Init+0x1bc>
 8003968:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800396c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003970:	f023 030f 	bic.w	r3, r3, #15
 8003974:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a2b      	ldr	r2, [pc, #172]	; (8003a28 <HAL_I2S_Init+0x278>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_I2S_Init+0x1d4>
 8003980:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <HAL_I2S_Init+0x27c>)
 8003982:	e001      	b.n	8003988 <HAL_I2S_Init+0x1d8>
 8003984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003988:	2202      	movs	r2, #2
 800398a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a25      	ldr	r2, [pc, #148]	; (8003a28 <HAL_I2S_Init+0x278>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <HAL_I2S_Init+0x1ea>
 8003996:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <HAL_I2S_Init+0x27c>)
 8003998:	e001      	b.n	800399e <HAL_I2S_Init+0x1ee>
 800399a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039aa:	d003      	beq.n	80039b4 <HAL_I2S_Init+0x204>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d103      	bne.n	80039bc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80039b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	e001      	b.n	80039c0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039ca:	4313      	orrs	r3, r2
 80039cc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039d4:	4313      	orrs	r3, r2
 80039d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039de:	4313      	orrs	r3, r2
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	897b      	ldrh	r3, [r7, #10]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039ec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <HAL_I2S_Init+0x278>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d101      	bne.n	80039fc <HAL_I2S_Init+0x24c>
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_I2S_Init+0x27c>)
 80039fa:	e001      	b.n	8003a00 <HAL_I2S_Init+0x250>
 80039fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a00:	897a      	ldrh	r2, [r7, #10]
 8003a02:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	08003b27 	.word	0x08003b27
 8003a20:	cccccccd 	.word	0xcccccccd
 8003a24:	08003c3d 	.word	0x08003c3d
 8003a28:	40003800 	.word	0x40003800
 8003a2c:	40003400 	.word	0x40003400

08003a30 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	881a      	ldrh	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c9a      	adds	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10e      	bne.n	8003ac0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ab0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff ffb8 	bl	8003a30 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	b292      	uxth	r2, r2
 8003adc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10e      	bne.n	8003b1e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b0e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff93 	bl	8003a44 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d13a      	bne.n	8003bb8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d109      	bne.n	8003b60 <I2S_IRQHandler+0x3a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d102      	bne.n	8003b60 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ffb4 	bl	8003ac8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b66:	2b40      	cmp	r3, #64	; 0x40
 8003b68:	d126      	bne.n	8003bb8 <I2S_IRQHandler+0x92>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d11f      	bne.n	8003bb8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b86:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f043 0202 	orr.w	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ff50 	bl	8003a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d136      	bne.n	8003c32 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d109      	bne.n	8003be2 <I2S_IRQHandler+0xbc>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd8:	2b80      	cmp	r3, #128	; 0x80
 8003bda:	d102      	bne.n	8003be2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff ff45 	bl	8003a6c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d122      	bne.n	8003c32 <I2S_IRQHandler+0x10c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d11b      	bne.n	8003c32 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c08:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	f043 0204 	orr.w	r2, r3, #4
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ff13 	bl	8003a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c32:	bf00      	nop
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a92      	ldr	r2, [pc, #584]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003c56:	4b92      	ldr	r3, [pc, #584]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c58:	e001      	b.n	8003c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003c5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a8b      	ldr	r2, [pc, #556]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c74:	4b8a      	ldr	r3, [pc, #552]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c76:	e001      	b.n	8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c88:	d004      	beq.n	8003c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f040 8099 	bne.w	8003dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d107      	bne.n	8003cae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f925 	bl	8003ef8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d107      	bne.n	8003cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f9c8 	bl	8004058 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d13a      	bne.n	8003d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d035      	beq.n	8003d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a6e      	ldr	r2, [pc, #440]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d101      	bne.n	8003cea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ce6:	4b6e      	ldr	r3, [pc, #440]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ce8:	e001      	b.n	8003cee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4969      	ldr	r1, [pc, #420]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cf6:	428b      	cmp	r3, r1
 8003cf8:	d101      	bne.n	8003cfe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003cfa:	4b69      	ldr	r3, [pc, #420]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cfc:	e001      	b.n	8003d02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003cfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d06:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	f043 0202 	orr.w	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fe88 	bl	8003a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	f040 80c3 	bne.w	8003eda <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80bd 	beq.w	8003eda <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d6e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a49      	ldr	r2, [pc, #292]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d7a:	4b49      	ldr	r3, [pc, #292]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d7c:	e001      	b.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4944      	ldr	r1, [pc, #272]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d8a:	428b      	cmp	r3, r1
 8003d8c:	d101      	bne.n	8003d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d8e:	4b44      	ldr	r3, [pc, #272]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d90:	e001      	b.n	8003d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d9a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f043 0204 	orr.w	r2, r3, #4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff fe4a 	bl	8003a58 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dc4:	e089      	b.n	8003eda <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d107      	bne.n	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8be 	bl	8003f5c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d107      	bne.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f8fd 	bl	8003ff4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d12f      	bne.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d02a      	beq.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e1c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e28:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e2a:	e001      	b.n	8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003e2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4919      	ldr	r1, [pc, #100]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e38:	428b      	cmp	r3, r1
 8003e3a:	d101      	bne.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003e3c:	4b18      	ldr	r3, [pc, #96]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e3e:	e001      	b.n	8003e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003e40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	f043 0202 	orr.w	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff fdfa 	bl	8003a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d136      	bne.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d031      	beq.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e84:	e001      	b.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003e86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4902      	ldr	r1, [pc, #8]	; (8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e92:	428b      	cmp	r3, r1
 8003e94:	d106      	bne.n	8003ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003e96:	4b02      	ldr	r3, [pc, #8]	; (8003ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e98:	e006      	b.n	8003ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003e9a:	bf00      	nop
 8003e9c:	40003800 	.word	0x40003800
 8003ea0:	40003400 	.word	0x40003400
 8003ea4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ebc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f043 0204 	orr.w	r2, r3, #4
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fdc0 	bl	8003a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ed8:	e000      	b.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003eda:	bf00      	nop
}
 8003edc:	bf00      	nop
 8003ede:	3720      	adds	r7, #32
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c99      	adds	r1, r3, #2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6251      	str	r1, [r2, #36]	; 0x24
 8003f0a:	881a      	ldrh	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d113      	bne.n	8003f52 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ffc9 	bl	8003ee4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	1c99      	adds	r1, r3, #2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6251      	str	r1, [r2, #36]	; 0x24
 8003f6e:	8819      	ldrh	r1, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1d      	ldr	r2, [pc, #116]	; (8003fec <I2SEx_TxISR_I2SExt+0x90>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <I2SEx_TxISR_I2SExt+0x22>
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <I2SEx_TxISR_I2SExt+0x94>)
 8003f7c:	e001      	b.n	8003f82 <I2SEx_TxISR_I2SExt+0x26>
 8003f7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f82:	460a      	mov	r2, r1
 8003f84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d121      	bne.n	8003fe2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a12      	ldr	r2, [pc, #72]	; (8003fec <I2SEx_TxISR_I2SExt+0x90>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d101      	bne.n	8003fac <I2SEx_TxISR_I2SExt+0x50>
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <I2SEx_TxISR_I2SExt+0x94>)
 8003faa:	e001      	b.n	8003fb0 <I2SEx_TxISR_I2SExt+0x54>
 8003fac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	490d      	ldr	r1, [pc, #52]	; (8003fec <I2SEx_TxISR_I2SExt+0x90>)
 8003fb8:	428b      	cmp	r3, r1
 8003fba:	d101      	bne.n	8003fc0 <I2SEx_TxISR_I2SExt+0x64>
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <I2SEx_TxISR_I2SExt+0x94>)
 8003fbe:	e001      	b.n	8003fc4 <I2SEx_TxISR_I2SExt+0x68>
 8003fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fc8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff ff81 	bl	8003ee4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40003800 	.word	0x40003800
 8003ff0:	40003400 	.word	0x40003400

08003ff4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68d8      	ldr	r0, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	1c99      	adds	r1, r3, #2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800400c:	b282      	uxth	r2, r0
 800400e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d113      	bne.n	8004050 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004036:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff ff4a 	bl	8003ee4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a20      	ldr	r2, [pc, #128]	; (80040e8 <I2SEx_RxISR_I2SExt+0x90>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <I2SEx_RxISR_I2SExt+0x16>
 800406a:	4b20      	ldr	r3, [pc, #128]	; (80040ec <I2SEx_RxISR_I2SExt+0x94>)
 800406c:	e001      	b.n	8004072 <I2SEx_RxISR_I2SExt+0x1a>
 800406e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004072:	68d8      	ldr	r0, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	1c99      	adds	r1, r3, #2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800407e:	b282      	uxth	r2, r0
 8004080:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d121      	bne.n	80040de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <I2SEx_RxISR_I2SExt+0x90>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d101      	bne.n	80040a8 <I2SEx_RxISR_I2SExt+0x50>
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <I2SEx_RxISR_I2SExt+0x94>)
 80040a6:	e001      	b.n	80040ac <I2SEx_RxISR_I2SExt+0x54>
 80040a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	490d      	ldr	r1, [pc, #52]	; (80040e8 <I2SEx_RxISR_I2SExt+0x90>)
 80040b4:	428b      	cmp	r3, r1
 80040b6:	d101      	bne.n	80040bc <I2SEx_RxISR_I2SExt+0x64>
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <I2SEx_RxISR_I2SExt+0x94>)
 80040ba:	e001      	b.n	80040c0 <I2SEx_RxISR_I2SExt+0x68>
 80040bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff03 	bl	8003ee4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40003800 	.word	0x40003800
 80040ec:	40003400 	.word	0x40003400

080040f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e267      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d075      	beq.n	80041fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800410e:	4b88      	ldr	r3, [pc, #544]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b04      	cmp	r3, #4
 8004118:	d00c      	beq.n	8004134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800411a:	4b85      	ldr	r3, [pc, #532]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004122:	2b08      	cmp	r3, #8
 8004124:	d112      	bne.n	800414c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004126:	4b82      	ldr	r3, [pc, #520]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004132:	d10b      	bne.n	800414c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	4b7e      	ldr	r3, [pc, #504]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d05b      	beq.n	80041f8 <HAL_RCC_OscConfig+0x108>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d157      	bne.n	80041f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e242      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004154:	d106      	bne.n	8004164 <HAL_RCC_OscConfig+0x74>
 8004156:	4b76      	ldr	r3, [pc, #472]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a75      	ldr	r2, [pc, #468]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e01d      	b.n	80041a0 <HAL_RCC_OscConfig+0xb0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800416c:	d10c      	bne.n	8004188 <HAL_RCC_OscConfig+0x98>
 800416e:	4b70      	ldr	r3, [pc, #448]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a6f      	ldr	r2, [pc, #444]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	4b6d      	ldr	r3, [pc, #436]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a6c      	ldr	r2, [pc, #432]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e00b      	b.n	80041a0 <HAL_RCC_OscConfig+0xb0>
 8004188:	4b69      	ldr	r3, [pc, #420]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a68      	ldr	r2, [pc, #416]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800418e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	4b66      	ldr	r3, [pc, #408]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a65      	ldr	r2, [pc, #404]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800419a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800419e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d013      	beq.n	80041d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7fd f9d4 	bl	8001554 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b0:	f7fd f9d0 	bl	8001554 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e207      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	4b5b      	ldr	r3, [pc, #364]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0xc0>
 80041ce:	e014      	b.n	80041fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7fd f9c0 	bl	8001554 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d8:	f7fd f9bc 	bl	8001554 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e1f3      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	4b51      	ldr	r3, [pc, #324]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0xe8>
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d063      	beq.n	80042ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004206:	4b4a      	ldr	r3, [pc, #296]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004212:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800421a:	2b08      	cmp	r3, #8
 800421c:	d11c      	bne.n	8004258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800421e:	4b44      	ldr	r3, [pc, #272]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d116      	bne.n	8004258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422a:	4b41      	ldr	r3, [pc, #260]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <HAL_RCC_OscConfig+0x152>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d001      	beq.n	8004242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e1c7      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004242:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4937      	ldr	r1, [pc, #220]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004256:	e03a      	b.n	80042ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004260:	4b34      	ldr	r3, [pc, #208]	; (8004334 <HAL_RCC_OscConfig+0x244>)
 8004262:	2201      	movs	r2, #1
 8004264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fd f975 	bl	8001554 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800426e:	f7fd f971 	bl	8001554 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e1a8      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004280:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428c:	4b28      	ldr	r3, [pc, #160]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4925      	ldr	r1, [pc, #148]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 800429c:	4313      	orrs	r3, r2
 800429e:	600b      	str	r3, [r1, #0]
 80042a0:	e015      	b.n	80042ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a2:	4b24      	ldr	r3, [pc, #144]	; (8004334 <HAL_RCC_OscConfig+0x244>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fd f954 	bl	8001554 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042b0:	f7fd f950 	bl	8001554 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e187      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c2:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d036      	beq.n	8004348 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d016      	beq.n	8004310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <HAL_RCC_OscConfig+0x248>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fd f934 	bl	8001554 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f0:	f7fd f930 	bl	8001554 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e167      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCC_OscConfig+0x240>)
 8004304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x200>
 800430e:	e01b      	b.n	8004348 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <HAL_RCC_OscConfig+0x248>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004316:	f7fd f91d 	bl	8001554 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	e00e      	b.n	800433c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800431e:	f7fd f919 	bl	8001554 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d907      	bls.n	800433c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e150      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
 8004330:	40023800 	.word	0x40023800
 8004334:	42470000 	.word	0x42470000
 8004338:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800433c:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800433e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ea      	bne.n	800431e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8097 	beq.w	8004484 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004356:	2300      	movs	r3, #0
 8004358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435a:	4b81      	ldr	r3, [pc, #516]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10f      	bne.n	8004386 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	4b7d      	ldr	r3, [pc, #500]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	4a7c      	ldr	r2, [pc, #496]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 8004370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004374:	6413      	str	r3, [r2, #64]	; 0x40
 8004376:	4b7a      	ldr	r3, [pc, #488]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004382:	2301      	movs	r3, #1
 8004384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004386:	4b77      	ldr	r3, [pc, #476]	; (8004564 <HAL_RCC_OscConfig+0x474>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d118      	bne.n	80043c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004392:	4b74      	ldr	r3, [pc, #464]	; (8004564 <HAL_RCC_OscConfig+0x474>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a73      	ldr	r2, [pc, #460]	; (8004564 <HAL_RCC_OscConfig+0x474>)
 8004398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439e:	f7fd f8d9 	bl	8001554 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a6:	f7fd f8d5 	bl	8001554 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e10c      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b8:	4b6a      	ldr	r3, [pc, #424]	; (8004564 <HAL_RCC_OscConfig+0x474>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d106      	bne.n	80043da <HAL_RCC_OscConfig+0x2ea>
 80043cc:	4b64      	ldr	r3, [pc, #400]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	4a63      	ldr	r2, [pc, #396]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6713      	str	r3, [r2, #112]	; 0x70
 80043d8:	e01c      	b.n	8004414 <HAL_RCC_OscConfig+0x324>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b05      	cmp	r3, #5
 80043e0:	d10c      	bne.n	80043fc <HAL_RCC_OscConfig+0x30c>
 80043e2:	4b5f      	ldr	r3, [pc, #380]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	4a5e      	ldr	r2, [pc, #376]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043e8:	f043 0304 	orr.w	r3, r3, #4
 80043ec:	6713      	str	r3, [r2, #112]	; 0x70
 80043ee:	4b5c      	ldr	r3, [pc, #368]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	4a5b      	ldr	r2, [pc, #364]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70
 80043fa:	e00b      	b.n	8004414 <HAL_RCC_OscConfig+0x324>
 80043fc:	4b58      	ldr	r3, [pc, #352]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	4a57      	ldr	r2, [pc, #348]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	6713      	str	r3, [r2, #112]	; 0x70
 8004408:	4b55      	ldr	r3, [pc, #340]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	4a54      	ldr	r2, [pc, #336]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800440e:	f023 0304 	bic.w	r3, r3, #4
 8004412:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d015      	beq.n	8004448 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fd f89a 	bl	8001554 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004422:	e00a      	b.n	800443a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fd f896 	bl	8001554 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e0cb      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443a:	4b49      	ldr	r3, [pc, #292]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0ee      	beq.n	8004424 <HAL_RCC_OscConfig+0x334>
 8004446:	e014      	b.n	8004472 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004448:	f7fd f884 	bl	8001554 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444e:	e00a      	b.n	8004466 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004450:	f7fd f880 	bl	8001554 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	; 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e0b5      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004466:	4b3e      	ldr	r3, [pc, #248]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1ee      	bne.n	8004450 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004472:	7dfb      	ldrb	r3, [r7, #23]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d105      	bne.n	8004484 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004478:	4b39      	ldr	r3, [pc, #228]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	4a38      	ldr	r2, [pc, #224]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800447e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004482:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80a1 	beq.w	80045d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800448e:	4b34      	ldr	r3, [pc, #208]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b08      	cmp	r3, #8
 8004498:	d05c      	beq.n	8004554 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d141      	bne.n	8004526 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a2:	4b31      	ldr	r3, [pc, #196]	; (8004568 <HAL_RCC_OscConfig+0x478>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fd f854 	bl	8001554 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fd f850 	bl	8001554 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e087      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c2:	4b27      	ldr	r3, [pc, #156]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	019b      	lsls	r3, r3, #6
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	3b01      	subs	r3, #1
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	061b      	lsls	r3, r3, #24
 80044f2:	491b      	ldr	r1, [pc, #108]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <HAL_RCC_OscConfig+0x478>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7fd f829 	bl	8001554 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004506:	f7fd f825 	bl	8001554 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e05c      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004518:	4b11      	ldr	r3, [pc, #68]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x416>
 8004524:	e054      	b.n	80045d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <HAL_RCC_OscConfig+0x478>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fd f812 	bl	8001554 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fd f80e 	bl	8001554 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e045      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_RCC_OscConfig+0x470>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x444>
 8004552:	e03d      	b.n	80045d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d107      	bne.n	800456c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e038      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
 8004560:	40023800 	.word	0x40023800
 8004564:	40007000 	.word	0x40007000
 8004568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800456c:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <HAL_RCC_OscConfig+0x4ec>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d028      	beq.n	80045cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d121      	bne.n	80045cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d11a      	bne.n	80045cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800459c:	4013      	ands	r3, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d111      	bne.n	80045cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	3b01      	subs	r3, #1
 80045b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d107      	bne.n	80045cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800

080045e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0cc      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f4:	4b68      	ldr	r3, [pc, #416]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d90c      	bls.n	800461c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004602:	4b65      	ldr	r3, [pc, #404]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b63      	ldr	r3, [pc, #396]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0b8      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d020      	beq.n	800466a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004634:	4b59      	ldr	r3, [pc, #356]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a58      	ldr	r2, [pc, #352]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800463e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800464c:	4b53      	ldr	r3, [pc, #332]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4a52      	ldr	r2, [pc, #328]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004658:	4b50      	ldr	r3, [pc, #320]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	494d      	ldr	r1, [pc, #308]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d044      	beq.n	8004700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d119      	bne.n	80046be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e07f      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d003      	beq.n	800469e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800469a:	2b03      	cmp	r3, #3
 800469c:	d107      	bne.n	80046ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469e:	4b3f      	ldr	r3, [pc, #252]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e06f      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ae:	4b3b      	ldr	r3, [pc, #236]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e067      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046be:	4b37      	ldr	r3, [pc, #220]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f023 0203 	bic.w	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4934      	ldr	r1, [pc, #208]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046d0:	f7fc ff40 	bl	8001554 <HAL_GetTick>
 80046d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d8:	f7fc ff3c 	bl	8001554 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e04f      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ee:	4b2b      	ldr	r3, [pc, #172]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 020c 	and.w	r2, r3, #12
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d1eb      	bne.n	80046d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004700:	4b25      	ldr	r3, [pc, #148]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d20c      	bcs.n	8004728 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b22      	ldr	r3, [pc, #136]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b20      	ldr	r3, [pc, #128]	; (8004798 <HAL_RCC_ClockConfig+0x1b8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e032      	b.n	800478e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004734:	4b19      	ldr	r3, [pc, #100]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4916      	ldr	r1, [pc, #88]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	490e      	ldr	r1, [pc, #56]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004766:	f000 f821 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 800476a:	4602      	mov	r2, r0
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	490a      	ldr	r1, [pc, #40]	; (80047a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004778:	5ccb      	ldrb	r3, [r1, r3]
 800477a:	fa22 f303 	lsr.w	r3, r2, r3
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fc fea0 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40023c00 	.word	0x40023c00
 800479c:	40023800 	.word	0x40023800
 80047a0:	08009d00 	.word	0x08009d00
 80047a4:	20000010 	.word	0x20000010
 80047a8:	20000014 	.word	0x20000014

080047ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b0:	b094      	sub	sp, #80	; 0x50
 80047b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	647b      	str	r3, [r7, #68]	; 0x44
 80047b8:	2300      	movs	r3, #0
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047bc:	2300      	movs	r3, #0
 80047be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c4:	4b79      	ldr	r3, [pc, #484]	; (80049ac <HAL_RCC_GetSysClockFreq+0x200>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d00d      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x40>
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	f200 80e1 	bhi.w	8004998 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_RCC_GetSysClockFreq+0x34>
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d003      	beq.n	80047e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047de:	e0db      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047e0:	4b73      	ldr	r3, [pc, #460]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80047e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047e4:	e0db      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047e6:	4b73      	ldr	r3, [pc, #460]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80047e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ea:	e0d8      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047ec:	4b6f      	ldr	r3, [pc, #444]	; (80049ac <HAL_RCC_GetSysClockFreq+0x200>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f6:	4b6d      	ldr	r3, [pc, #436]	; (80049ac <HAL_RCC_GetSysClockFreq+0x200>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d063      	beq.n	80048ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004802:	4b6a      	ldr	r3, [pc, #424]	; (80049ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	099b      	lsrs	r3, r3, #6
 8004808:	2200      	movs	r2, #0
 800480a:	63bb      	str	r3, [r7, #56]	; 0x38
 800480c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004814:	633b      	str	r3, [r7, #48]	; 0x30
 8004816:	2300      	movs	r3, #0
 8004818:	637b      	str	r3, [r7, #52]	; 0x34
 800481a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800481e:	4622      	mov	r2, r4
 8004820:	462b      	mov	r3, r5
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	0159      	lsls	r1, r3, #5
 800482c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004830:	0150      	lsls	r0, r2, #5
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4621      	mov	r1, r4
 8004838:	1a51      	subs	r1, r2, r1
 800483a:	6139      	str	r1, [r7, #16]
 800483c:	4629      	mov	r1, r5
 800483e:	eb63 0301 	sbc.w	r3, r3, r1
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004850:	4659      	mov	r1, fp
 8004852:	018b      	lsls	r3, r1, #6
 8004854:	4651      	mov	r1, sl
 8004856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800485a:	4651      	mov	r1, sl
 800485c:	018a      	lsls	r2, r1, #6
 800485e:	4651      	mov	r1, sl
 8004860:	ebb2 0801 	subs.w	r8, r2, r1
 8004864:	4659      	mov	r1, fp
 8004866:	eb63 0901 	sbc.w	r9, r3, r1
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800487a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800487e:	4690      	mov	r8, r2
 8004880:	4699      	mov	r9, r3
 8004882:	4623      	mov	r3, r4
 8004884:	eb18 0303 	adds.w	r3, r8, r3
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	462b      	mov	r3, r5
 800488c:	eb49 0303 	adc.w	r3, r9, r3
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800489e:	4629      	mov	r1, r5
 80048a0:	024b      	lsls	r3, r1, #9
 80048a2:	4621      	mov	r1, r4
 80048a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048a8:	4621      	mov	r1, r4
 80048aa:	024a      	lsls	r2, r1, #9
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b2:	2200      	movs	r2, #0
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048bc:	f7fb fc84 	bl	80001c8 <__aeabi_uldivmod>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4613      	mov	r3, r2
 80048c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c8:	e058      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ca:	4b38      	ldr	r3, [pc, #224]	; (80049ac <HAL_RCC_GetSysClockFreq+0x200>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	099b      	lsrs	r3, r3, #6
 80048d0:	2200      	movs	r2, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	4611      	mov	r1, r2
 80048d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048da:	623b      	str	r3, [r7, #32]
 80048dc:	2300      	movs	r3, #0
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
 80048e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048e4:	4642      	mov	r2, r8
 80048e6:	464b      	mov	r3, r9
 80048e8:	f04f 0000 	mov.w	r0, #0
 80048ec:	f04f 0100 	mov.w	r1, #0
 80048f0:	0159      	lsls	r1, r3, #5
 80048f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048f6:	0150      	lsls	r0, r2, #5
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4641      	mov	r1, r8
 80048fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004902:	4649      	mov	r1, r9
 8004904:	eb63 0b01 	sbc.w	fp, r3, r1
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004914:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004918:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800491c:	ebb2 040a 	subs.w	r4, r2, sl
 8004920:	eb63 050b 	sbc.w	r5, r3, fp
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	00eb      	lsls	r3, r5, #3
 800492e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004932:	00e2      	lsls	r2, r4, #3
 8004934:	4614      	mov	r4, r2
 8004936:	461d      	mov	r5, r3
 8004938:	4643      	mov	r3, r8
 800493a:	18e3      	adds	r3, r4, r3
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	464b      	mov	r3, r9
 8004940:	eb45 0303 	adc.w	r3, r5, r3
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004952:	4629      	mov	r1, r5
 8004954:	028b      	lsls	r3, r1, #10
 8004956:	4621      	mov	r1, r4
 8004958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800495c:	4621      	mov	r1, r4
 800495e:	028a      	lsls	r2, r1, #10
 8004960:	4610      	mov	r0, r2
 8004962:	4619      	mov	r1, r3
 8004964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004966:	2200      	movs	r2, #0
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	61fa      	str	r2, [r7, #28]
 800496c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004970:	f7fb fc2a 	bl	80001c8 <__aeabi_uldivmod>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4613      	mov	r3, r2
 800497a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCC_GetSysClockFreq+0x200>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	0c1b      	lsrs	r3, r3, #16
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	3301      	adds	r3, #1
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800498c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800498e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004996:	e002      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800499c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3750      	adds	r7, #80	; 0x50
 80049a4:	46bd      	mov	sp, r7
 80049a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800
 80049b0:	00f42400 	.word	0x00f42400
 80049b4:	007a1200 	.word	0x007a1200

080049b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049bc:	4b03      	ldr	r3, [pc, #12]	; (80049cc <HAL_RCC_GetHCLKFreq+0x14>)
 80049be:	681b      	ldr	r3, [r3, #0]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	20000010 	.word	0x20000010

080049d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049d4:	f7ff fff0 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	0a9b      	lsrs	r3, r3, #10
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4903      	ldr	r1, [pc, #12]	; (80049f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40023800 	.word	0x40023800
 80049f4:	08009d10 	.word	0x08009d10

080049f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049fc:	f7ff ffdc 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	0b5b      	lsrs	r3, r3, #13
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	08009d10 	.word	0x08009d10

08004a20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d035      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a48:	4b62      	ldr	r3, [pc, #392]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a4e:	f7fc fd81 	bl	8001554 <HAL_GetTick>
 8004a52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a56:	f7fc fd7d 	bl	8001554 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e0b0      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a68:	4b5b      	ldr	r3, [pc, #364]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f0      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	019a      	lsls	r2, r3, #6
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	071b      	lsls	r3, r3, #28
 8004a80:	4955      	ldr	r1, [pc, #340]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a88:	4b52      	ldr	r3, [pc, #328]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a8e:	f7fc fd61 	bl	8001554 <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a96:	f7fc fd5d 	bl	8001554 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e090      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa8:	4b4b      	ldr	r3, [pc, #300]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8083 	beq.w	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	4b44      	ldr	r3, [pc, #272]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	4a43      	ldr	r2, [pc, #268]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad2:	4b41      	ldr	r3, [pc, #260]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ade:	4b3f      	ldr	r3, [pc, #252]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a3e      	ldr	r2, [pc, #248]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004aea:	f7fc fd33 	bl	8001554 <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004af2:	f7fc fd2f 	bl	8001554 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e062      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b04:	4b35      	ldr	r3, [pc, #212]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b10:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b18:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d02f      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d028      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b2e:	4b2a      	ldr	r3, [pc, #168]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b38:	4b29      	ldr	r3, [pc, #164]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b3e:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b44:	4a24      	ldr	r2, [pc, #144]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b4a:	4b23      	ldr	r3, [pc, #140]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d114      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b56:	f7fc fcfd 	bl	8001554 <HAL_GetTick>
 8004b5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b5e:	f7fc fcf9 	bl	8001554 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e02a      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ee      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b8c:	d10d      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba2:	490d      	ldr	r1, [pc, #52]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	608b      	str	r3, [r1, #8]
 8004ba8:	e005      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004baa:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	4a0a      	ldr	r2, [pc, #40]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bb4:	6093      	str	r3, [r2, #8]
 8004bb6:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc2:	4905      	ldr	r1, [pc, #20]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	42470068 	.word	0x42470068
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40007000 	.word	0x40007000
 8004be0:	42470e40 	.word	0x42470e40

08004be4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d13e      	bne.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c02:	4b23      	ldr	r3, [pc, #140]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d12f      	bne.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c18:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c1a:	617b      	str	r3, [r7, #20]
          break;
 8004c1c:	e02f      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c1e:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2a:	d108      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c2c:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c34:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	e007      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c3e:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c46:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c4e:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c54:	099b      	lsrs	r3, r3, #6
 8004c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	fb02 f303 	mul.w	r3, r2, r3
 8004c60:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c68:	0f1b      	lsrs	r3, r3, #28
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	617b      	str	r3, [r7, #20]
          break;
 8004c76:	e002      	b.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
          break;
 8004c7c:	bf00      	nop
        }
      }
      break;
 8004c7e:	bf00      	nop
    }
  }
  return frequency;
 8004c80:	697b      	ldr	r3, [r7, #20]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800
 8004c94:	00bb8000 	.word	0x00bb8000
 8004c98:	007a1200 	.word	0x007a1200
 8004c9c:	00f42400 	.word	0x00f42400

08004ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e07b      	b.n	8004daa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d108      	bne.n	8004ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cc2:	d009      	beq.n	8004cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	61da      	str	r2, [r3, #28]
 8004cca:	e005      	b.n	8004cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fc f9d8 	bl	80010a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5c:	ea42 0103 	orr.w	r1, r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	f003 0104 	and.w	r1, r3, #4
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	f003 0210 	and.w	r2, r3, #16
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e041      	b.n	8004e48 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d106      	bne.n	8004dde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7fc f9ad 	bl	8001138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3304      	adds	r3, #4
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f000 f9cd 	bl	8005190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d001      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e04e      	b.n	8004f06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a23      	ldr	r2, [pc, #140]	; (8004f14 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d022      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0x80>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e92:	d01d      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0x80>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1f      	ldr	r2, [pc, #124]	; (8004f18 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d018      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0x80>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1e      	ldr	r2, [pc, #120]	; (8004f1c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d013      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0x80>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1c      	ldr	r2, [pc, #112]	; (8004f20 <HAL_TIM_Base_Start_IT+0xd0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00e      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0x80>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <HAL_TIM_Base_Start_IT+0xd4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d009      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0x80>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d004      	beq.n	8004ed0 <HAL_TIM_Base_Start_IT+0x80>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <HAL_TIM_Base_Start_IT+0xdc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d111      	bne.n	8004ef4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b06      	cmp	r3, #6
 8004ee0:	d010      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0201 	orr.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	e007      	b.n	8004f04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40010000 	.word	0x40010000
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40000c00 	.word	0x40000c00
 8004f24:	40010400 	.word	0x40010400
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40001800 	.word	0x40001800

08004f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d122      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d11b      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0202 	mvn.w	r2, #2
 8004f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f8ee 	bl	8005154 <HAL_TIM_IC_CaptureCallback>
 8004f78:	e005      	b.n	8004f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f8e0 	bl	8005140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f8f1 	bl	8005168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d122      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0204 	mvn.w	r2, #4
 8004fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f8c4 	bl	8005154 <HAL_TIM_IC_CaptureCallback>
 8004fcc:	e005      	b.n	8004fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f8b6 	bl	8005140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f8c7 	bl	8005168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d122      	bne.n	8005034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d11b      	bne.n	8005034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0208 	mvn.w	r2, #8
 8005004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2204      	movs	r2, #4
 800500a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f89a 	bl	8005154 <HAL_TIM_IC_CaptureCallback>
 8005020:	e005      	b.n	800502e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f88c 	bl	8005140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f89d 	bl	8005168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b10      	cmp	r3, #16
 8005040:	d122      	bne.n	8005088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b10      	cmp	r3, #16
 800504e:	d11b      	bne.n	8005088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0210 	mvn.w	r2, #16
 8005058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2208      	movs	r2, #8
 800505e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f870 	bl	8005154 <HAL_TIM_IC_CaptureCallback>
 8005074:	e005      	b.n	8005082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f862 	bl	8005140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f873 	bl	8005168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b01      	cmp	r3, #1
 8005094:	d10e      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d107      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0201 	mvn.w	r2, #1
 80050ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fb fe90 	bl	8000dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050be:	2b80      	cmp	r3, #128	; 0x80
 80050c0:	d10e      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050cc:	2b80      	cmp	r3, #128	; 0x80
 80050ce:	d107      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f902 	bl	80052e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	d10e      	bne.n	800510c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f8:	2b40      	cmp	r3, #64	; 0x40
 80050fa:	d107      	bne.n	800510c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f838 	bl	800517c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b20      	cmp	r3, #32
 8005118:	d10e      	bne.n	8005138 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b20      	cmp	r3, #32
 8005126:	d107      	bne.n	8005138 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0220 	mvn.w	r2, #32
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f8cc 	bl	80052d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a40      	ldr	r2, [pc, #256]	; (80052a4 <TIM_Base_SetConfig+0x114>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d013      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ae:	d00f      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a3d      	ldr	r2, [pc, #244]	; (80052a8 <TIM_Base_SetConfig+0x118>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a3c      	ldr	r2, [pc, #240]	; (80052ac <TIM_Base_SetConfig+0x11c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a3b      	ldr	r2, [pc, #236]	; (80052b0 <TIM_Base_SetConfig+0x120>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a3a      	ldr	r2, [pc, #232]	; (80052b4 <TIM_Base_SetConfig+0x124>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d108      	bne.n	80051e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a2f      	ldr	r2, [pc, #188]	; (80052a4 <TIM_Base_SetConfig+0x114>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d02b      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f0:	d027      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a2c      	ldr	r2, [pc, #176]	; (80052a8 <TIM_Base_SetConfig+0x118>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d023      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a2b      	ldr	r2, [pc, #172]	; (80052ac <TIM_Base_SetConfig+0x11c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01f      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a2a      	ldr	r2, [pc, #168]	; (80052b0 <TIM_Base_SetConfig+0x120>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01b      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a29      	ldr	r2, [pc, #164]	; (80052b4 <TIM_Base_SetConfig+0x124>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d017      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a28      	ldr	r2, [pc, #160]	; (80052b8 <TIM_Base_SetConfig+0x128>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a27      	ldr	r2, [pc, #156]	; (80052bc <TIM_Base_SetConfig+0x12c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00f      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <TIM_Base_SetConfig+0x130>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a25      	ldr	r2, [pc, #148]	; (80052c4 <TIM_Base_SetConfig+0x134>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d007      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a24      	ldr	r2, [pc, #144]	; (80052c8 <TIM_Base_SetConfig+0x138>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a23      	ldr	r2, [pc, #140]	; (80052cc <TIM_Base_SetConfig+0x13c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d108      	bne.n	8005254 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <TIM_Base_SetConfig+0x114>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_Base_SetConfig+0xf8>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a0c      	ldr	r2, [pc, #48]	; (80052b4 <TIM_Base_SetConfig+0x124>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d103      	bne.n	8005290 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	615a      	str	r2, [r3, #20]
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40000400 	.word	0x40000400
 80052ac:	40000800 	.word	0x40000800
 80052b0:	40000c00 	.word	0x40000c00
 80052b4:	40010400 	.word	0x40010400
 80052b8:	40014000 	.word	0x40014000
 80052bc:	40014400 	.word	0x40014400
 80052c0:	40014800 	.word	0x40014800
 80052c4:	40001800 	.word	0x40001800
 80052c8:	40001c00 	.word	0x40001c00
 80052cc:	40002000 	.word	0x40002000

080052d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e057      	b.n	80053bc <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7fb ff31 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2224      	movs	r2, #36	; 0x24
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800533c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fe32 	bl	8005fa8 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005352:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005362:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691a      	ldr	r2, [r3, #16]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005372:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0220 	bic.w	r2, r2, #32
 8005382:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6919      	ldr	r1, [r3, #16]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08a      	sub	sp, #40	; 0x28
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	4613      	mov	r3, r2
 80053d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d17c      	bne.n	80054de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_UART_Transmit+0x2c>
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e075      	b.n	80054e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_UART_Transmit+0x3e>
 80053fe:	2302      	movs	r3, #2
 8005400:	e06e      	b.n	80054e0 <HAL_UART_Transmit+0x11c>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2221      	movs	r2, #33	; 0x21
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005418:	f7fc f89c 	bl	8001554 <HAL_GetTick>
 800541c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	88fa      	ldrh	r2, [r7, #6]
 8005422:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	88fa      	ldrh	r2, [r7, #6]
 8005428:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005432:	d108      	bne.n	8005446 <HAL_UART_Transmit+0x82>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d104      	bne.n	8005446 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	e003      	b.n	800544e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005456:	e02a      	b.n	80054ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2200      	movs	r2, #0
 8005460:	2180      	movs	r1, #128	; 0x80
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fb5a 	bl	8005b1c <UART_WaitOnFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e036      	b.n	80054e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005486:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	3302      	adds	r3, #2
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	e007      	b.n	80054a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	781a      	ldrb	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3301      	adds	r3, #1
 800549e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1cf      	bne.n	8005458 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2200      	movs	r2, #0
 80054c0:	2140      	movs	r1, #64	; 0x40
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 fb2a 	bl	8005b1c <UART_WaitOnFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e006      	b.n	80054e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	e000      	b.n	80054e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054de:	2302      	movs	r3, #2
  }
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b20      	cmp	r3, #32
 8005500:	d11d      	bne.n	800553e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_UART_Receive_IT+0x26>
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e016      	b.n	8005540 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_UART_Receive_IT+0x38>
 800551c:	2302      	movs	r3, #2
 800551e:	e00f      	b.n	8005540 <HAL_UART_Receive_IT+0x58>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	461a      	mov	r2, r3
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 fb5f 	bl	8005bf8 <UART_Start_Receive_IT>
 800553a:	4603      	mov	r3, r0
 800553c:	e000      	b.n	8005540 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b0ba      	sub	sp, #232	; 0xe8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800556e:	2300      	movs	r3, #0
 8005570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005574:	2300      	movs	r3, #0
 8005576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800557a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10f      	bne.n	80055ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_UART_IRQHandler+0x66>
 800559a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fc43 	bl	8005e32 <UART_Receive_IT>
      return;
 80055ac:	e256      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80de 	beq.w	8005774 <HAL_UART_IRQHandler+0x22c>
 80055b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80d1 	beq.w	8005774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00b      	beq.n	80055f6 <HAL_UART_IRQHandler+0xae>
 80055de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f043 0201 	orr.w	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <HAL_UART_IRQHandler+0xd2>
 8005602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f043 0202 	orr.w	r2, r3, #2
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <HAL_UART_IRQHandler+0xf6>
 8005626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f043 0204 	orr.w	r2, r3, #4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d011      	beq.n	800566e <HAL_UART_IRQHandler+0x126>
 800564a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d105      	bne.n	8005662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f043 0208 	orr.w	r2, r3, #8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 81ed 	beq.w	8005a52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_UART_IRQHandler+0x14e>
 8005684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fbce 	bl	8005e32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a0:	2b40      	cmp	r3, #64	; 0x40
 80056a2:	bf0c      	ite	eq
 80056a4:	2301      	moveq	r3, #1
 80056a6:	2300      	movne	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d103      	bne.n	80056c2 <HAL_UART_IRQHandler+0x17a>
 80056ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d04f      	beq.n	8005762 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fad6 	bl	8005c74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d141      	bne.n	800575a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3314      	adds	r3, #20
 80056dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800570e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800571a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1d9      	bne.n	80056d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	2b00      	cmp	r3, #0
 8005728:	d013      	beq.n	8005752 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	4a7d      	ldr	r2, [pc, #500]	; (8005924 <HAL_UART_IRQHandler+0x3dc>)
 8005730:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	4618      	mov	r0, r3
 8005738:	f7fc f8bd 	bl	80018b6 <HAL_DMA_Abort_IT>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d016      	beq.n	8005770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800574c:	4610      	mov	r0, r2
 800574e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	e00e      	b.n	8005770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f990 	bl	8005a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	e00a      	b.n	8005770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f98c 	bl	8005a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	e006      	b.n	8005770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f988 	bl	8005a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800576e:	e170      	b.n	8005a52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005770:	bf00      	nop
    return;
 8005772:	e16e      	b.n	8005a52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	2b01      	cmp	r3, #1
 800577a:	f040 814a 	bne.w	8005a12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800577e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005782:	f003 0310 	and.w	r3, r3, #16
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 8143 	beq.w	8005a12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800578c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 813c 	beq.w	8005a12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800579a:	2300      	movs	r3, #0
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	f040 80b4 	bne.w	8005928 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8140 	beq.w	8005a56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057de:	429a      	cmp	r2, r3
 80057e0:	f080 8139 	bcs.w	8005a56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f6:	f000 8088 	beq.w	800590a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	330c      	adds	r3, #12
 8005800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800582a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005832:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800583e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1d9      	bne.n	80057fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3314      	adds	r3, #20
 8005866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800586a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800586e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005872:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800587c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e1      	bne.n	8005846 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3314      	adds	r3, #20
 8005888:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3314      	adds	r3, #20
 80058a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e3      	bne.n	8005882 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	330c      	adds	r3, #12
 80058ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058da:	f023 0310 	bic.w	r3, r3, #16
 80058de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80058ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e3      	bne.n	80058c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	4618      	mov	r0, r3
 8005906:	f7fb ff66 	bl	80017d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005912:	b29b      	uxth	r3, r3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	b29b      	uxth	r3, r3
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8b6 	bl	8005a8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005920:	e099      	b.n	8005a56 <HAL_UART_IRQHandler+0x50e>
 8005922:	bf00      	nop
 8005924:	08005d3b 	.word	0x08005d3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005930:	b29b      	uxth	r3, r3
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 808b 	beq.w	8005a5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8086 	beq.w	8005a5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005972:	647a      	str	r2, [r7, #68]	; 0x44
 8005974:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e3      	bne.n	800594e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3314      	adds	r3, #20
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	623b      	str	r3, [r7, #32]
   return(result);
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	f023 0301 	bic.w	r3, r3, #1
 800599c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3314      	adds	r3, #20
 80059a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059aa:	633a      	str	r2, [r7, #48]	; 0x30
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e3      	bne.n	8005986 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	60fb      	str	r3, [r7, #12]
   return(result);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0310 	bic.w	r3, r3, #16
 80059e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059f0:	61fa      	str	r2, [r7, #28]
 80059f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	69b9      	ldr	r1, [r7, #24]
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	617b      	str	r3, [r7, #20]
   return(result);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e3      	bne.n	80059cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f83e 	bl	8005a8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a10:	e023      	b.n	8005a5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_UART_IRQHandler+0x4ea>
 8005a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f999 	bl	8005d62 <UART_Transmit_IT>
    return;
 8005a30:	e014      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00e      	beq.n	8005a5c <HAL_UART_IRQHandler+0x514>
 8005a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9d9 	bl	8005e02 <UART_EndTransmit_IT>
    return;
 8005a50:	e004      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
    return;
 8005a52:	bf00      	nop
 8005a54:	e002      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
      return;
 8005a56:	bf00      	nop
 8005a58:	e000      	b.n	8005a5c <HAL_UART_IRQHandler+0x514>
      return;
 8005a5a:	bf00      	nop
  }
}
 8005a5c:	37e8      	adds	r7, #232	; 0xe8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop

08005a64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b089      	sub	sp, #36	; 0x24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_LIN_SendBreak+0x16>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e02a      	b.n	8005b10 <HAL_LIN_SendBreak+0x6c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2224      	movs	r2, #36	; 0x24
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	61fb      	str	r3, [r7, #28]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	330c      	adds	r3, #12
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	61ba      	str	r2, [r7, #24]
 8005aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6979      	ldr	r1, [r7, #20]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	613b      	str	r3, [r7, #16]
   return(result);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e5      	bne.n	8005aca <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3724      	adds	r7, #36	; 0x24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b090      	sub	sp, #64	; 0x40
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b2c:	e050      	b.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d04c      	beq.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b3c:	f7fb fd0a 	bl	8001554 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d241      	bcs.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b6c:	637a      	str	r2, [r7, #52]	; 0x34
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e5      	bne.n	8005b4c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3314      	adds	r3, #20
 8005b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f023 0301 	bic.w	r3, r3, #1
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3314      	adds	r3, #20
 8005b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ba0:	623a      	str	r2, [r7, #32]
 8005ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	69f9      	ldr	r1, [r7, #28]
 8005ba6:	6a3a      	ldr	r2, [r7, #32]
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e5      	bne.n	8005b80 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e00f      	b.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	bf0c      	ite	eq
 8005be0:	2301      	moveq	r3, #1
 8005be2:	2300      	movne	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	79fb      	ldrb	r3, [r7, #7]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d09f      	beq.n	8005b2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3740      	adds	r7, #64	; 0x40
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2222      	movs	r2, #34	; 0x22
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c44:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0201 	orr.w	r2, r2, #1
 8005c54:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0220 	orr.w	r2, r2, #32
 8005c64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b095      	sub	sp, #84	; 0x54
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	330c      	adds	r3, #12
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e5      	bne.n	8005c7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3314      	adds	r3, #20
 8005cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e5      	bne.n	8005cb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d119      	bne.n	8005d20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	647b      	str	r3, [r7, #68]	; 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d0c:	61ba      	str	r2, [r7, #24]
 8005d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6979      	ldr	r1, [r7, #20]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e5      	bne.n	8005cec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d2e:	bf00      	nop
 8005d30:	3754      	adds	r7, #84	; 0x54
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f7ff fe8f 	bl	8005a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b21      	cmp	r3, #33	; 0x21
 8005d74:	d13e      	bne.n	8005df4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7e:	d114      	bne.n	8005daa <UART_Transmit_IT+0x48>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d110      	bne.n	8005daa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	1c9a      	adds	r2, r3, #2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	621a      	str	r2, [r3, #32]
 8005da8:	e008      	b.n	8005dbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	1c59      	adds	r1, r3, #1
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6211      	str	r1, [r2, #32]
 8005db4:	781a      	ldrb	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10f      	bne.n	8005df0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e000      	b.n	8005df6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fe1e 	bl	8005a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b08c      	sub	sp, #48	; 0x30
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b22      	cmp	r3, #34	; 0x22
 8005e44:	f040 80ab 	bne.w	8005f9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e50:	d117      	bne.n	8005e82 <UART_Receive_IT+0x50>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d113      	bne.n	8005e82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	1c9a      	adds	r2, r3, #2
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e80:	e026      	b.n	8005ed0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e94:	d007      	beq.n	8005ea6 <UART_Receive_IT+0x74>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <UART_Receive_IT+0x82>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	e008      	b.n	8005ec6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4619      	mov	r1, r3
 8005ede:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d15a      	bne.n	8005f9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0220 	bic.w	r2, r2, #32
 8005ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d135      	bne.n	8005f90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f023 0310 	bic.w	r3, r3, #16
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4a:	623a      	str	r2, [r7, #32]
 8005f4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	69f9      	ldr	r1, [r7, #28]
 8005f50:	6a3a      	ldr	r2, [r7, #32]
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e5      	bne.n	8005f2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b10      	cmp	r3, #16
 8005f6a:	d10a      	bne.n	8005f82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff fd7f 	bl	8005a8c <HAL_UARTEx_RxEventCallback>
 8005f8e:	e002      	b.n	8005f96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fa ff81 	bl	8000e98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	e002      	b.n	8005fa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3730      	adds	r7, #48	; 0x30
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fac:	b0c0      	sub	sp, #256	; 0x100
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	68d9      	ldr	r1, [r3, #12]
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	ea40 0301 	orr.w	r3, r0, r1
 8005fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006000:	f021 010c 	bic.w	r1, r1, #12
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800600e:	430b      	orrs	r3, r1
 8006010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006022:	6999      	ldr	r1, [r3, #24]
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	ea40 0301 	orr.w	r3, r0, r1
 800602e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4b8f      	ldr	r3, [pc, #572]	; (8006274 <UART_SetConfig+0x2cc>)
 8006038:	429a      	cmp	r2, r3
 800603a:	d005      	beq.n	8006048 <UART_SetConfig+0xa0>
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4b8d      	ldr	r3, [pc, #564]	; (8006278 <UART_SetConfig+0x2d0>)
 8006044:	429a      	cmp	r2, r3
 8006046:	d104      	bne.n	8006052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006048:	f7fe fcd6 	bl	80049f8 <HAL_RCC_GetPCLK2Freq>
 800604c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006050:	e003      	b.n	800605a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006052:	f7fe fcbd 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 8006056:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006064:	f040 810c 	bne.w	8006280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800606c:	2200      	movs	r2, #0
 800606e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006072:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800607a:	4622      	mov	r2, r4
 800607c:	462b      	mov	r3, r5
 800607e:	1891      	adds	r1, r2, r2
 8006080:	65b9      	str	r1, [r7, #88]	; 0x58
 8006082:	415b      	adcs	r3, r3
 8006084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800608a:	4621      	mov	r1, r4
 800608c:	eb12 0801 	adds.w	r8, r2, r1
 8006090:	4629      	mov	r1, r5
 8006092:	eb43 0901 	adc.w	r9, r3, r1
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060aa:	4690      	mov	r8, r2
 80060ac:	4699      	mov	r9, r3
 80060ae:	4623      	mov	r3, r4
 80060b0:	eb18 0303 	adds.w	r3, r8, r3
 80060b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060b8:	462b      	mov	r3, r5
 80060ba:	eb49 0303 	adc.w	r3, r9, r3
 80060be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060d6:	460b      	mov	r3, r1
 80060d8:	18db      	adds	r3, r3, r3
 80060da:	653b      	str	r3, [r7, #80]	; 0x50
 80060dc:	4613      	mov	r3, r2
 80060de:	eb42 0303 	adc.w	r3, r2, r3
 80060e2:	657b      	str	r3, [r7, #84]	; 0x54
 80060e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060ec:	f7fa f86c 	bl	80001c8 <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4b61      	ldr	r3, [pc, #388]	; (800627c <UART_SetConfig+0x2d4>)
 80060f6:	fba3 2302 	umull	r2, r3, r3, r2
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	011c      	lsls	r4, r3, #4
 80060fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006102:	2200      	movs	r2, #0
 8006104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006108:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800610c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	1891      	adds	r1, r2, r2
 8006116:	64b9      	str	r1, [r7, #72]	; 0x48
 8006118:	415b      	adcs	r3, r3
 800611a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800611c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006120:	4641      	mov	r1, r8
 8006122:	eb12 0a01 	adds.w	sl, r2, r1
 8006126:	4649      	mov	r1, r9
 8006128:	eb43 0b01 	adc.w	fp, r3, r1
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800613c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006140:	4692      	mov	sl, r2
 8006142:	469b      	mov	fp, r3
 8006144:	4643      	mov	r3, r8
 8006146:	eb1a 0303 	adds.w	r3, sl, r3
 800614a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800614e:	464b      	mov	r3, r9
 8006150:	eb4b 0303 	adc.w	r3, fp, r3
 8006154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006164:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800616c:	460b      	mov	r3, r1
 800616e:	18db      	adds	r3, r3, r3
 8006170:	643b      	str	r3, [r7, #64]	; 0x40
 8006172:	4613      	mov	r3, r2
 8006174:	eb42 0303 	adc.w	r3, r2, r3
 8006178:	647b      	str	r3, [r7, #68]	; 0x44
 800617a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800617e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006182:	f7fa f821 	bl	80001c8 <__aeabi_uldivmod>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4611      	mov	r1, r2
 800618c:	4b3b      	ldr	r3, [pc, #236]	; (800627c <UART_SetConfig+0x2d4>)
 800618e:	fba3 2301 	umull	r2, r3, r3, r1
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2264      	movs	r2, #100	; 0x64
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	1acb      	subs	r3, r1, r3
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061a2:	4b36      	ldr	r3, [pc, #216]	; (800627c <UART_SetConfig+0x2d4>)
 80061a4:	fba3 2302 	umull	r2, r3, r3, r2
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061b0:	441c      	add	r4, r3
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	1891      	adds	r1, r2, r2
 80061ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80061cc:	415b      	adcs	r3, r3
 80061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061d4:	4641      	mov	r1, r8
 80061d6:	1851      	adds	r1, r2, r1
 80061d8:	6339      	str	r1, [r7, #48]	; 0x30
 80061da:	4649      	mov	r1, r9
 80061dc:	414b      	adcs	r3, r1
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061ec:	4659      	mov	r1, fp
 80061ee:	00cb      	lsls	r3, r1, #3
 80061f0:	4651      	mov	r1, sl
 80061f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f6:	4651      	mov	r1, sl
 80061f8:	00ca      	lsls	r2, r1, #3
 80061fa:	4610      	mov	r0, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	4603      	mov	r3, r0
 8006200:	4642      	mov	r2, r8
 8006202:	189b      	adds	r3, r3, r2
 8006204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006208:	464b      	mov	r3, r9
 800620a:	460a      	mov	r2, r1
 800620c:	eb42 0303 	adc.w	r3, r2, r3
 8006210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006220:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006228:	460b      	mov	r3, r1
 800622a:	18db      	adds	r3, r3, r3
 800622c:	62bb      	str	r3, [r7, #40]	; 0x28
 800622e:	4613      	mov	r3, r2
 8006230:	eb42 0303 	adc.w	r3, r2, r3
 8006234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800623a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800623e:	f7f9 ffc3 	bl	80001c8 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4b0d      	ldr	r3, [pc, #52]	; (800627c <UART_SetConfig+0x2d4>)
 8006248:	fba3 1302 	umull	r1, r3, r3, r2
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	2164      	movs	r1, #100	; 0x64
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	3332      	adds	r3, #50	; 0x32
 800625a:	4a08      	ldr	r2, [pc, #32]	; (800627c <UART_SetConfig+0x2d4>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	f003 0207 	and.w	r2, r3, #7
 8006266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4422      	add	r2, r4
 800626e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006270:	e106      	b.n	8006480 <UART_SetConfig+0x4d8>
 8006272:	bf00      	nop
 8006274:	40011000 	.word	0x40011000
 8006278:	40011400 	.word	0x40011400
 800627c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006284:	2200      	movs	r2, #0
 8006286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800628a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800628e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006292:	4642      	mov	r2, r8
 8006294:	464b      	mov	r3, r9
 8006296:	1891      	adds	r1, r2, r2
 8006298:	6239      	str	r1, [r7, #32]
 800629a:	415b      	adcs	r3, r3
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
 800629e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062a2:	4641      	mov	r1, r8
 80062a4:	1854      	adds	r4, r2, r1
 80062a6:	4649      	mov	r1, r9
 80062a8:	eb43 0501 	adc.w	r5, r3, r1
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	00eb      	lsls	r3, r5, #3
 80062b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ba:	00e2      	lsls	r2, r4, #3
 80062bc:	4614      	mov	r4, r2
 80062be:	461d      	mov	r5, r3
 80062c0:	4643      	mov	r3, r8
 80062c2:	18e3      	adds	r3, r4, r3
 80062c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062c8:	464b      	mov	r3, r9
 80062ca:	eb45 0303 	adc.w	r3, r5, r3
 80062ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062ee:	4629      	mov	r1, r5
 80062f0:	008b      	lsls	r3, r1, #2
 80062f2:	4621      	mov	r1, r4
 80062f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062f8:	4621      	mov	r1, r4
 80062fa:	008a      	lsls	r2, r1, #2
 80062fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006300:	f7f9 ff62 	bl	80001c8 <__aeabi_uldivmod>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4b60      	ldr	r3, [pc, #384]	; (800648c <UART_SetConfig+0x4e4>)
 800630a:	fba3 2302 	umull	r2, r3, r3, r2
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	011c      	lsls	r4, r3, #4
 8006312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006316:	2200      	movs	r2, #0
 8006318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800631c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	1891      	adds	r1, r2, r2
 800632a:	61b9      	str	r1, [r7, #24]
 800632c:	415b      	adcs	r3, r3
 800632e:	61fb      	str	r3, [r7, #28]
 8006330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006334:	4641      	mov	r1, r8
 8006336:	1851      	adds	r1, r2, r1
 8006338:	6139      	str	r1, [r7, #16]
 800633a:	4649      	mov	r1, r9
 800633c:	414b      	adcs	r3, r1
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800634c:	4659      	mov	r1, fp
 800634e:	00cb      	lsls	r3, r1, #3
 8006350:	4651      	mov	r1, sl
 8006352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006356:	4651      	mov	r1, sl
 8006358:	00ca      	lsls	r2, r1, #3
 800635a:	4610      	mov	r0, r2
 800635c:	4619      	mov	r1, r3
 800635e:	4603      	mov	r3, r0
 8006360:	4642      	mov	r2, r8
 8006362:	189b      	adds	r3, r3, r2
 8006364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006368:	464b      	mov	r3, r9
 800636a:	460a      	mov	r2, r1
 800636c:	eb42 0303 	adc.w	r3, r2, r3
 8006370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	67bb      	str	r3, [r7, #120]	; 0x78
 800637e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800638c:	4649      	mov	r1, r9
 800638e:	008b      	lsls	r3, r1, #2
 8006390:	4641      	mov	r1, r8
 8006392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006396:	4641      	mov	r1, r8
 8006398:	008a      	lsls	r2, r1, #2
 800639a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800639e:	f7f9 ff13 	bl	80001c8 <__aeabi_uldivmod>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4611      	mov	r1, r2
 80063a8:	4b38      	ldr	r3, [pc, #224]	; (800648c <UART_SetConfig+0x4e4>)
 80063aa:	fba3 2301 	umull	r2, r3, r3, r1
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	2264      	movs	r2, #100	; 0x64
 80063b2:	fb02 f303 	mul.w	r3, r2, r3
 80063b6:	1acb      	subs	r3, r1, r3
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	3332      	adds	r3, #50	; 0x32
 80063bc:	4a33      	ldr	r2, [pc, #204]	; (800648c <UART_SetConfig+0x4e4>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c8:	441c      	add	r4, r3
 80063ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ce:	2200      	movs	r2, #0
 80063d0:	673b      	str	r3, [r7, #112]	; 0x70
 80063d2:	677a      	str	r2, [r7, #116]	; 0x74
 80063d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063d8:	4642      	mov	r2, r8
 80063da:	464b      	mov	r3, r9
 80063dc:	1891      	adds	r1, r2, r2
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	415b      	adcs	r3, r3
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063e8:	4641      	mov	r1, r8
 80063ea:	1851      	adds	r1, r2, r1
 80063ec:	6039      	str	r1, [r7, #0]
 80063ee:	4649      	mov	r1, r9
 80063f0:	414b      	adcs	r3, r1
 80063f2:	607b      	str	r3, [r7, #4]
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006400:	4659      	mov	r1, fp
 8006402:	00cb      	lsls	r3, r1, #3
 8006404:	4651      	mov	r1, sl
 8006406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800640a:	4651      	mov	r1, sl
 800640c:	00ca      	lsls	r2, r1, #3
 800640e:	4610      	mov	r0, r2
 8006410:	4619      	mov	r1, r3
 8006412:	4603      	mov	r3, r0
 8006414:	4642      	mov	r2, r8
 8006416:	189b      	adds	r3, r3, r2
 8006418:	66bb      	str	r3, [r7, #104]	; 0x68
 800641a:	464b      	mov	r3, r9
 800641c:	460a      	mov	r2, r1
 800641e:	eb42 0303 	adc.w	r3, r2, r3
 8006422:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	663b      	str	r3, [r7, #96]	; 0x60
 800642e:	667a      	str	r2, [r7, #100]	; 0x64
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800643c:	4649      	mov	r1, r9
 800643e:	008b      	lsls	r3, r1, #2
 8006440:	4641      	mov	r1, r8
 8006442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006446:	4641      	mov	r1, r8
 8006448:	008a      	lsls	r2, r1, #2
 800644a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800644e:	f7f9 febb 	bl	80001c8 <__aeabi_uldivmod>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4b0d      	ldr	r3, [pc, #52]	; (800648c <UART_SetConfig+0x4e4>)
 8006458:	fba3 1302 	umull	r1, r3, r3, r2
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	2164      	movs	r1, #100	; 0x64
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	3332      	adds	r3, #50	; 0x32
 800646a:	4a08      	ldr	r2, [pc, #32]	; (800648c <UART_SetConfig+0x4e4>)
 800646c:	fba2 2303 	umull	r2, r3, r2, r3
 8006470:	095b      	lsrs	r3, r3, #5
 8006472:	f003 020f 	and.w	r2, r3, #15
 8006476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4422      	add	r2, r4
 800647e:	609a      	str	r2, [r3, #8]
}
 8006480:	bf00      	nop
 8006482:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006486:	46bd      	mov	sp, r7
 8006488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800648c:	51eb851f 	.word	0x51eb851f

08006490 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006490:	b084      	sub	sp, #16
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	f107 001c 	add.w	r0, r7, #28
 800649e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d122      	bne.n	80064ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d105      	bne.n	80064e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f9c0 	bl	8006868 <USB_CoreReset>
 80064e8:	4603      	mov	r3, r0
 80064ea:	73fb      	strb	r3, [r7, #15]
 80064ec:	e01a      	b.n	8006524 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f9b4 	bl	8006868 <USB_CoreReset>
 8006500:	4603      	mov	r3, r0
 8006502:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	639a      	str	r2, [r3, #56]	; 0x38
 8006516:	e005      	b.n	8006524 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	2b01      	cmp	r3, #1
 8006528:	d10b      	bne.n	8006542 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f043 0206 	orr.w	r2, r3, #6
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f043 0220 	orr.w	r2, r3, #32
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006542:	7bfb      	ldrb	r3, [r7, #15]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800654e:	b004      	add	sp, #16
 8006550:	4770      	bx	lr

08006552 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f043 0201 	orr.w	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f023 0201 	bic.w	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	460b      	mov	r3, r1
 80065a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d115      	bne.n	80065e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065c4:	2001      	movs	r0, #1
 80065c6:	f7fa ffd1 	bl	800156c <HAL_Delay>
      ms++;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f93a 	bl	800684a <USB_GetMode>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d01e      	beq.n	800661a <USB_SetCurrentMode+0x84>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b31      	cmp	r3, #49	; 0x31
 80065e0:	d9f0      	bls.n	80065c4 <USB_SetCurrentMode+0x2e>
 80065e2:	e01a      	b.n	800661a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d115      	bne.n	8006616 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065f6:	2001      	movs	r0, #1
 80065f8:	f7fa ffb8 	bl	800156c <HAL_Delay>
      ms++;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f921 	bl	800684a <USB_GetMode>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <USB_SetCurrentMode+0x84>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b31      	cmp	r3, #49	; 0x31
 8006612:	d9f0      	bls.n	80065f6 <USB_SetCurrentMode+0x60>
 8006614:	e001      	b.n	800661a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e005      	b.n	8006626 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b32      	cmp	r3, #50	; 0x32
 800661e:	d101      	bne.n	8006624 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3301      	adds	r3, #1
 8006642:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4a13      	ldr	r2, [pc, #76]	; (8006694 <USB_FlushTxFifo+0x64>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d901      	bls.n	8006650 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e01b      	b.n	8006688 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	daf2      	bge.n	800663e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	019b      	lsls	r3, r3, #6
 8006660:	f043 0220 	orr.w	r2, r3, #32
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3301      	adds	r3, #1
 800666c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a08      	ldr	r2, [pc, #32]	; (8006694 <USB_FlushTxFifo+0x64>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d901      	bls.n	800667a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e006      	b.n	8006688 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b20      	cmp	r3, #32
 8006684:	d0f0      	beq.n	8006668 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	00030d40 	.word	0x00030d40

08006698 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3301      	adds	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4a11      	ldr	r2, [pc, #68]	; (80066f4 <USB_FlushRxFifo+0x5c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d901      	bls.n	80066b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e018      	b.n	80066e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	daf2      	bge.n	80066a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2210      	movs	r2, #16
 80066c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3301      	adds	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4a08      	ldr	r2, [pc, #32]	; (80066f4 <USB_FlushRxFifo+0x5c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d901      	bls.n	80066da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e006      	b.n	80066e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0310 	and.w	r3, r3, #16
 80066e2:	2b10      	cmp	r3, #16
 80066e4:	d0f0      	beq.n	80066c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	00030d40 	.word	0x00030d40

080066f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b089      	sub	sp, #36	; 0x24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	4611      	mov	r1, r2
 8006704:	461a      	mov	r2, r3
 8006706:	460b      	mov	r3, r1
 8006708:	71fb      	strb	r3, [r7, #7]
 800670a:	4613      	mov	r3, r2
 800670c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800671a:	2b00      	cmp	r3, #0
 800671c:	d123      	bne.n	8006766 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800671e:	88bb      	ldrh	r3, [r7, #4]
 8006720:	3303      	adds	r3, #3
 8006722:	089b      	lsrs	r3, r3, #2
 8006724:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006726:	2300      	movs	r3, #0
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	e018      	b.n	800675e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	031a      	lsls	r2, r3, #12
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	4413      	add	r3, r2
 8006734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006738:	461a      	mov	r2, r3
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	3301      	adds	r3, #1
 8006744:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	3301      	adds	r3, #1
 800674a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	3301      	adds	r3, #1
 8006750:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	3301      	adds	r3, #1
 8006756:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	3301      	adds	r3, #1
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	429a      	cmp	r2, r3
 8006764:	d3e2      	bcc.n	800672c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3724      	adds	r7, #36	; 0x24
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006774:	b480      	push	{r7}
 8006776:	b08b      	sub	sp, #44	; 0x2c
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4613      	mov	r3, r2
 8006780:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	089b      	lsrs	r3, r3, #2
 800678e:	b29b      	uxth	r3, r3
 8006790:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006792:	88fb      	ldrh	r3, [r7, #6]
 8006794:	f003 0303 	and.w	r3, r3, #3
 8006798:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800679a:	2300      	movs	r3, #0
 800679c:	623b      	str	r3, [r7, #32]
 800679e:	e014      	b.n	80067ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	3301      	adds	r3, #1
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	3301      	adds	r3, #1
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	3301      	adds	r3, #1
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	3301      	adds	r3, #1
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	3301      	adds	r3, #1
 80067c8:	623b      	str	r3, [r7, #32]
 80067ca:	6a3a      	ldr	r2, [r7, #32]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d3e6      	bcc.n	80067a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067d2:	8bfb      	ldrh	r3, [r7, #30]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01e      	beq.n	8006816 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e2:	461a      	mov	r2, r3
 80067e4:	f107 0310 	add.w	r3, r7, #16
 80067e8:	6812      	ldr	r2, [r2, #0]
 80067ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	fa22 f303 	lsr.w	r3, r2, r3
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	701a      	strb	r2, [r3, #0]
      i++;
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	3301      	adds	r3, #1
 8006802:	623b      	str	r3, [r7, #32]
      pDest++;
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	3301      	adds	r3, #1
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800680a:	8bfb      	ldrh	r3, [r7, #30]
 800680c:	3b01      	subs	r3, #1
 800680e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006810:	8bfb      	ldrh	r3, [r7, #30]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1ea      	bne.n	80067ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006818:	4618      	mov	r0, r3
 800681a:	372c      	adds	r7, #44	; 0x2c
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4013      	ands	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800683c:	68fb      	ldr	r3, [r7, #12]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f003 0301 	and.w	r3, r3, #1
}
 800685a:	4618      	mov	r0, r3
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3301      	adds	r3, #1
 8006878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4a13      	ldr	r2, [pc, #76]	; (80068cc <USB_CoreReset+0x64>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d901      	bls.n	8006886 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e01b      	b.n	80068be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	daf2      	bge.n	8006874 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f043 0201 	orr.w	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3301      	adds	r3, #1
 80068a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4a09      	ldr	r2, [pc, #36]	; (80068cc <USB_CoreReset+0x64>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d901      	bls.n	80068b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e006      	b.n	80068be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d0f0      	beq.n	800689e <USB_CoreReset+0x36>

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	00030d40 	.word	0x00030d40

080068d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068d0:	b084      	sub	sp, #16
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b086      	sub	sp, #24
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068f0:	461a      	mov	r2, r3
 80068f2:	2300      	movs	r3, #0
 80068f4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006922:	2b00      	cmp	r3, #0
 8006924:	d018      	beq.n	8006958 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	2b01      	cmp	r3, #1
 800692a:	d10a      	bne.n	8006942 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800693a:	f043 0304 	orr.w	r3, r3, #4
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	e014      	b.n	800696c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006950:	f023 0304 	bic.w	r3, r3, #4
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e009      	b.n	800696c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006966:	f023 0304 	bic.w	r3, r3, #4
 800696a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800696c:	2110      	movs	r1, #16
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff fe5e 	bl	8006630 <USB_FlushTxFifo>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff fe8a 	bl	8006698 <USB_FlushRxFifo>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	e015      	b.n	80069c0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a0:	461a      	mov	r2, r3
 80069a2:	f04f 33ff 	mov.w	r3, #4294967295
 80069a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b4:	461a      	mov	r2, r3
 80069b6:	2300      	movs	r3, #0
 80069b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	3301      	adds	r3, #1
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d3e5      	bcc.n	8006994 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f04f 32ff 	mov.w	r2, #4294967295
 80069d4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a13      	ldr	r2, [pc, #76]	; (8006a3c <USB_HostInit+0x16c>)
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <USB_HostInit+0x170>)
 80069f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80069f8:	e009      	b.n	8006a0e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2280      	movs	r2, #128	; 0x80
 80069fe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a10      	ldr	r2, [pc, #64]	; (8006a44 <USB_HostInit+0x174>)
 8006a04:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a0f      	ldr	r2, [pc, #60]	; (8006a48 <USB_HostInit+0x178>)
 8006a0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	f043 0210 	orr.w	r2, r3, #16
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	699a      	ldr	r2, [r3, #24]
 8006a24:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <USB_HostInit+0x17c>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a38:	b004      	add	sp, #16
 8006a3a:	4770      	bx	lr
 8006a3c:	01000200 	.word	0x01000200
 8006a40:	00e00300 	.word	0x00e00300
 8006a44:	00600080 	.word	0x00600080
 8006a48:	004000e0 	.word	0x004000e0
 8006a4c:	a3200008 	.word	0xa3200008

08006a50 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a6e:	f023 0303 	bic.w	r3, r3, #3
 8006a72:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d107      	bne.n	8006aa2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a9e:	6053      	str	r3, [r2, #4]
 8006aa0:	e009      	b.n	8006ab6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006aa2:	78fb      	ldrb	r3, [r7, #3]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d106      	bne.n	8006ab6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f241 7370 	movw	r3, #6000	; 0x1770
 8006ab4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ae4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006af4:	2064      	movs	r0, #100	; 0x64
 8006af6:	f7fa fd39 	bl	800156c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b06:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006b08:	200a      	movs	r0, #10
 8006b0a:	f7fa fd2f 	bl	800156c <HAL_Delay>

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d109      	bne.n	8006b5c <USB_DriveVbus+0x44>
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d106      	bne.n	8006b5c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b5a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b66:	d109      	bne.n	8006b7c <USB_DriveVbus+0x64>
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b7a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	0c5b      	lsrs	r3, r3, #17
 8006ba8:	f003 0303 	and.w	r3, r3, #3
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	b29b      	uxth	r3, r3
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
	...

08006bdc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	4608      	mov	r0, r1
 8006be6:	4611      	mov	r1, r2
 8006be8:	461a      	mov	r2, r3
 8006bea:	4603      	mov	r3, r0
 8006bec:	70fb      	strb	r3, [r7, #3]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	70bb      	strb	r3, [r7, #2]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006bfe:	78fb      	ldrb	r3, [r7, #3]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c10:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006c12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d87e      	bhi.n	8006d18 <USB_HC_Init+0x13c>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <USB_HC_Init+0x44>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c31 	.word	0x08006c31
 8006c24:	08006cdb 	.word	0x08006cdb
 8006c28:	08006c31 	.word	0x08006c31
 8006c2c:	08006c9d 	.word	0x08006c9d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006c42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006c44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	da10      	bge.n	8006c6e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c6a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006c6c:	e057      	b.n	8006d1e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d051      	beq.n	8006d1e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	78fa      	ldrb	r2, [r7, #3]
 8006c8a:	0151      	lsls	r1, r2, #5
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	440a      	add	r2, r1
 8006c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c98:	60d3      	str	r3, [r2, #12]
      break;
 8006c9a:	e040      	b.n	8006d1e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f240 639d 	movw	r3, #1693	; 0x69d
 8006cae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006cb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	da34      	bge.n	8006d22 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	78fa      	ldrb	r2, [r7, #3]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006cd8:	e023      	b.n	8006d22 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f240 2325 	movw	r3, #549	; 0x225
 8006cec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006cee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da17      	bge.n	8006d26 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006cf6:	78fb      	ldrb	r3, [r7, #3]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	78fa      	ldrb	r2, [r7, #3]
 8006d06:	0151      	lsls	r1, r2, #5
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	440a      	add	r2, r1
 8006d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d10:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006d14:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006d16:	e006      	b.n	8006d26 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	77fb      	strb	r3, [r7, #31]
      break;
 8006d1c:	e004      	b.n	8006d28 <USB_HC_Init+0x14c>
      break;
 8006d1e:	bf00      	nop
 8006d20:	e002      	b.n	8006d28 <USB_HC_Init+0x14c>
      break;
 8006d22:	bf00      	nop
 8006d24:	e000      	b.n	8006d28 <USB_HC_Init+0x14c>
      break;
 8006d26:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	78fa      	ldrb	r2, [r7, #3]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d42:	f043 0302 	orr.w	r3, r3, #2
 8006d46:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	2101      	movs	r1, #1
 8006d58:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5c:	6939      	ldr	r1, [r7, #16]
 8006d5e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d62:	4313      	orrs	r3, r2
 8006d64:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006d72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da03      	bge.n	8006d82 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d7e:	61bb      	str	r3, [r7, #24]
 8006d80:	e001      	b.n	8006d86 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff feff 	bl	8006b8a <USB_GetHostSpeed>
 8006d8c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006d8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d106      	bne.n	8006da4 <USB_HC_Init+0x1c8>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d003      	beq.n	8006da4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	e001      	b.n	8006da8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006da8:	787b      	ldrb	r3, [r7, #1]
 8006daa:	059b      	lsls	r3, r3, #22
 8006dac:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006db0:	78bb      	ldrb	r3, [r7, #2]
 8006db2:	02db      	lsls	r3, r3, #11
 8006db4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006db8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006dba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006dbe:	049b      	lsls	r3, r3, #18
 8006dc0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006dc4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006dc6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006dcc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006dd2:	78fb      	ldrb	r3, [r7, #3]
 8006dd4:	0159      	lsls	r1, r3, #5
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	440b      	add	r3, r1
 8006dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dde:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006de4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006de6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d003      	beq.n	8006df6 <USB_HC_Init+0x21a>
 8006dee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d10f      	bne.n	8006e16 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006df6:	78fb      	ldrb	r3, [r7, #3]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	78fa      	ldrb	r2, [r7, #3]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e14:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006e16:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3720      	adds	r7, #32
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08c      	sub	sp, #48	; 0x30
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e3c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d02d      	beq.n	8006ea6 <USB_HC_StartXfer+0x86>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	791b      	ldrb	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d129      	bne.n	8006ea6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d117      	bne.n	8006e88 <USB_HC_StartXfer+0x68>
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	79db      	ldrb	r3, [r3, #7]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <USB_HC_StartXfer+0x48>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	79db      	ldrb	r3, [r3, #7]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d10f      	bne.n	8006e88 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	6a3a      	ldr	r2, [r7, #32]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e86:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10b      	bne.n	8006ea6 <USB_HC_StartXfer+0x86>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	795b      	ldrb	r3, [r3, #5]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d107      	bne.n	8006ea6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	785b      	ldrb	r3, [r3, #1]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 fa0f 	bl	80072c0 <USB_DoPing>
      return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e0f8      	b.n	8007098 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d018      	beq.n	8006ee0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	8912      	ldrh	r2, [r2, #8]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	8912      	ldrh	r2, [r2, #8]
 8006ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006ec4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ec6:	8b7b      	ldrh	r3, [r7, #26]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d90b      	bls.n	8006ee4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006ecc:	8b7b      	ldrh	r3, [r7, #26]
 8006ece:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ed0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	8912      	ldrh	r2, [r2, #8]
 8006ed6:	fb03 f202 	mul.w	r2, r3, r2
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	611a      	str	r2, [r3, #16]
 8006ede:	e001      	b.n	8006ee4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	78db      	ldrb	r3, [r3, #3]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	8912      	ldrh	r2, [r2, #8]
 8006ef2:	fb03 f202 	mul.w	r2, r3, r2
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	611a      	str	r2, [r3, #16]
 8006efa:	e003      	b.n	8006f04 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	695a      	ldr	r2, [r3, #20]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f0e:	04d9      	lsls	r1, r3, #19
 8006f10:	4b63      	ldr	r3, [pc, #396]	; (80070a0 <USB_HC_StartXfer+0x280>)
 8006f12:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f14:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	7a9b      	ldrb	r3, [r3, #10]
 8006f1a:	075b      	lsls	r3, r3, #29
 8006f1c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f20:	69f9      	ldr	r1, [r7, #28]
 8006f22:	0148      	lsls	r0, r1, #5
 8006f24:	6a39      	ldr	r1, [r7, #32]
 8006f26:	4401      	add	r1, r0
 8006f28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f2c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f2e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006f30:	79fb      	ldrb	r3, [r7, #7]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	68d9      	ldr	r1, [r3, #12]
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f46:	460a      	mov	r2, r1
 8006f48:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	bf0c      	ite	eq
 8006f5a:	2301      	moveq	r3, #1
 8006f5c:	2300      	movne	r3, #0
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	6a3a      	ldr	r2, [r7, #32]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f80:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	7e7b      	ldrb	r3, [r7, #25]
 8006f92:	075b      	lsls	r3, r3, #29
 8006f94:	69f9      	ldr	r1, [r7, #28]
 8006f96:	0148      	lsls	r0, r1, #5
 8006f98:	6a39      	ldr	r1, [r7, #32]
 8006f9a:	4401      	add	r1, r0
 8006f9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	78db      	ldrb	r3, [r3, #3]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d004      	beq.n	8006fce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	e003      	b.n	8006fd6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fd4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fdc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	461a      	mov	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e04e      	b.n	8007098 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	78db      	ldrb	r3, [r3, #3]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d149      	bne.n	8007096 <USB_HC_StartXfer+0x276>
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d045      	beq.n	8007096 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	79db      	ldrb	r3, [r3, #7]
 800700e:	2b03      	cmp	r3, #3
 8007010:	d830      	bhi.n	8007074 <USB_HC_StartXfer+0x254>
 8007012:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <USB_HC_StartXfer+0x1f8>)
 8007014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007018:	08007029 	.word	0x08007029
 800701c:	0800704d 	.word	0x0800704d
 8007020:	08007029 	.word	0x08007029
 8007024:	0800704d 	.word	0x0800704d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	3303      	adds	r3, #3
 800702e:	089b      	lsrs	r3, r3, #2
 8007030:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007032:	8afa      	ldrh	r2, [r7, #22]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	b29b      	uxth	r3, r3
 800703a:	429a      	cmp	r2, r3
 800703c:	d91c      	bls.n	8007078 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	f043 0220 	orr.w	r2, r3, #32
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	619a      	str	r2, [r3, #24]
        }
        break;
 800704a:	e015      	b.n	8007078 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	3303      	adds	r3, #3
 8007052:	089b      	lsrs	r3, r3, #2
 8007054:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007056:	8afa      	ldrh	r2, [r7, #22]
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	b29b      	uxth	r3, r3
 8007062:	429a      	cmp	r2, r3
 8007064:	d90a      	bls.n	800707c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	619a      	str	r2, [r3, #24]
        }
        break;
 8007072:	e003      	b.n	800707c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007074:	bf00      	nop
 8007076:	e002      	b.n	800707e <USB_HC_StartXfer+0x25e>
        break;
 8007078:	bf00      	nop
 800707a:	e000      	b.n	800707e <USB_HC_StartXfer+0x25e>
        break;
 800707c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	68d9      	ldr	r1, [r3, #12]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	785a      	ldrb	r2, [r3, #1]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	b29b      	uxth	r3, r3
 800708c:	2000      	movs	r0, #0
 800708e:	9000      	str	r0, [sp, #0]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7ff fb31 	bl	80066f8 <USB_WritePacket>
  }

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3728      	adds	r7, #40	; 0x28
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	1ff80000 	.word	0x1ff80000

080070a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	b29b      	uxth	r3, r3
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b089      	sub	sp, #36	; 0x24
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	460b      	mov	r3, r1
 80070d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80070d6:	78fb      	ldrb	r3, [r7, #3]
 80070d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	0c9b      	lsrs	r3, r3, #18
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	0fdb      	lsrs	r3, r3, #31
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b20      	cmp	r3, #32
 8007114:	d104      	bne.n	8007120 <USB_HC_Halt+0x5a>
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	e0c8      	b.n	80072b2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <USB_HC_Halt+0x66>
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d163      	bne.n	80071f4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	4413      	add	r3, r2
 8007134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	440a      	add	r2, r1
 8007142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007146:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800714a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b00      	cmp	r3, #0
 8007156:	f040 80ab 	bne.w	80072b0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d133      	bne.n	80071ce <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	4413      	add	r3, r2
 800716e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	0151      	lsls	r1, r2, #5
 8007178:	69fa      	ldr	r2, [r7, #28]
 800717a:	440a      	add	r2, r1
 800717c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007184:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	4413      	add	r3, r2
 800718e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	0151      	lsls	r1, r2, #5
 8007198:	69fa      	ldr	r2, [r7, #28]
 800719a:	440a      	add	r2, r1
 800719c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071a4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071b2:	d81d      	bhi.n	80071f0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ca:	d0ec      	beq.n	80071a6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071cc:	e070      	b.n	80072b0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	0151      	lsls	r1, r2, #5
 80071e0:	69fa      	ldr	r2, [r7, #28]
 80071e2:	440a      	add	r2, r1
 80071e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071ee:	e05f      	b.n	80072b0 <USB_HC_Halt+0x1ea>
            break;
 80071f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071f2:	e05d      	b.n	80072b0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	69fa      	ldr	r2, [r7, #28]
 8007208:	440a      	add	r2, r1
 800720a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800720e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007212:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d133      	bne.n	800728c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	4413      	add	r3, r2
 800722c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	440a      	add	r2, r1
 800723a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800723e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007242:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	69fa      	ldr	r2, [r7, #28]
 8007258:	440a      	add	r2, r1
 800725a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800725e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007262:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3301      	adds	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007270:	d81d      	bhi.n	80072ae <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	4413      	add	r3, r2
 800727a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007288:	d0ec      	beq.n	8007264 <USB_HC_Halt+0x19e>
 800728a:	e011      	b.n	80072b0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	4413      	add	r3, r2
 8007294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	e000      	b.n	80072b0 <USB_HC_Halt+0x1ea>
          break;
 80072ae:	bf00      	nop
    }
  }

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3724      	adds	r7, #36	; 0x24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
	...

080072c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80072d4:	2301      	movs	r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	04da      	lsls	r2, r3, #19
 80072dc:	4b15      	ldr	r3, [pc, #84]	; (8007334 <USB_DoPing+0x74>)
 80072de:	4013      	ands	r3, r2
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007308:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007310:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	4413      	add	r3, r2
 800731a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731e:	461a      	mov	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	1ff80000 	.word	0x1ff80000

08007338 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b088      	sub	sp, #32
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff f911 	bl	8006574 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007352:	2110      	movs	r1, #16
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff f96b 	bl	8006630 <USB_FlushTxFifo>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff f997 	bl	8006698 <USB_FlushRxFifo>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007374:	2300      	movs	r3, #0
 8007376:	61bb      	str	r3, [r7, #24]
 8007378:	e01f      	b.n	80073ba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	4413      	add	r3, r2
 8007382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007390:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007398:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ae:	461a      	mov	r2, r3
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	3301      	adds	r3, #1
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b0f      	cmp	r3, #15
 80073be:	d9dc      	bls.n	800737a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80073c0:	2300      	movs	r3, #0
 80073c2:	61bb      	str	r3, [r7, #24]
 80073c4:	e034      	b.n	8007430 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073fa:	461a      	mov	r2, r3
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3301      	adds	r3, #1
 8007404:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800740c:	d80c      	bhi.n	8007428 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	4413      	add	r3, r2
 8007416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007424:	d0ec      	beq.n	8007400 <USB_StopHost+0xc8>
 8007426:	e000      	b.n	800742a <USB_StopHost+0xf2>
        break;
 8007428:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	3301      	adds	r3, #1
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	2b0f      	cmp	r3, #15
 8007434:	d9c7      	bls.n	80073c6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800743c:	461a      	mov	r2, r3
 800743e:	f04f 33ff 	mov.w	r3, #4294967295
 8007442:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f04f 32ff 	mov.w	r2, #4294967295
 800744a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff f880 	bl	8006552 <USB_EnableGlobalInt>

  return ret;
 8007452:	7ffb      	ldrb	r3, [r7, #31]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3720      	adds	r7, #32
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800745c:	b590      	push	{r4, r7, lr}
 800745e:	b089      	sub	sp, #36	; 0x24
 8007460:	af04      	add	r7, sp, #16
 8007462:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007464:	2301      	movs	r3, #1
 8007466:	2202      	movs	r2, #2
 8007468:	2102      	movs	r1, #2
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fc66 	bl	8007d3c <USBH_FindInterface>
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	2bff      	cmp	r3, #255	; 0xff
 8007478:	d002      	beq.n	8007480 <USBH_CDC_InterfaceInit+0x24>
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d901      	bls.n	8007484 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007480:	2302      	movs	r3, #2
 8007482:	e13d      	b.n	8007700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fc3b 	bl	8007d04 <USBH_SelectInterface>
 800748e:	4603      	mov	r3, r0
 8007490:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007498:	2302      	movs	r3, #2
 800749a:	e131      	b.n	8007700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80074a2:	2050      	movs	r0, #80	; 0x50
 80074a4:	f002 fad2 	bl	8009a4c <malloc>
 80074a8:	4603      	mov	r3, r0
 80074aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80074bc:	2302      	movs	r3, #2
 80074be:	e11f      	b.n	8007700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80074c0:	2250      	movs	r2, #80	; 0x50
 80074c2:	2100      	movs	r1, #0
 80074c4:	68b8      	ldr	r0, [r7, #8]
 80074c6:	f002 fb7d 	bl	8009bc4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	211a      	movs	r1, #26
 80074d0:	fb01 f303 	mul.w	r3, r1, r3
 80074d4:	4413      	add	r3, r2
 80074d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	b25b      	sxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	da15      	bge.n	800750e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	211a      	movs	r1, #26
 80074e8:	fb01 f303 	mul.w	r3, r1, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074f2:	781a      	ldrb	r2, [r3, #0]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	211a      	movs	r1, #26
 80074fe:	fb01 f303 	mul.w	r3, r1, r3
 8007502:	4413      	add	r3, r2
 8007504:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007508:	881a      	ldrh	r2, [r3, #0]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	785b      	ldrb	r3, [r3, #1]
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 ff2e 	bl	8009376 <USBH_AllocPipe>
 800751a:	4603      	mov	r3, r0
 800751c:	461a      	mov	r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	7819      	ldrb	r1, [r3, #0]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	7858      	ldrb	r0, [r3, #1]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	8952      	ldrh	r2, [r2, #10]
 800753a:	9202      	str	r2, [sp, #8]
 800753c:	2203      	movs	r2, #3
 800753e:	9201      	str	r2, [sp, #4]
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	4623      	mov	r3, r4
 8007544:	4602      	mov	r2, r0
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f001 fee6 	bl	8009318 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2200      	movs	r2, #0
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f002 f9f5 	bl	8009944 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800755a:	2300      	movs	r3, #0
 800755c:	2200      	movs	r2, #0
 800755e:	210a      	movs	r1, #10
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fbeb 	bl	8007d3c <USBH_FindInterface>
 8007566:	4603      	mov	r3, r0
 8007568:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	2bff      	cmp	r3, #255	; 0xff
 800756e:	d002      	beq.n	8007576 <USBH_CDC_InterfaceInit+0x11a>
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d901      	bls.n	800757a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007576:	2302      	movs	r3, #2
 8007578:	e0c2      	b.n	8007700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	211a      	movs	r1, #26
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	4413      	add	r3, r2
 8007586:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	b25b      	sxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	da16      	bge.n	80075c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	211a      	movs	r1, #26
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	4413      	add	r3, r2
 800759e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075a2:	781a      	ldrb	r2, [r3, #0]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	211a      	movs	r1, #26
 80075ae:	fb01 f303 	mul.w	r3, r1, r3
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075b8:	881a      	ldrh	r2, [r3, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	835a      	strh	r2, [r3, #26]
 80075be:	e015      	b.n	80075ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	211a      	movs	r1, #26
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	4413      	add	r3, r2
 80075cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80075d0:	781a      	ldrb	r2, [r3, #0]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	211a      	movs	r1, #26
 80075dc:	fb01 f303 	mul.w	r3, r1, r3
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075e6:	881a      	ldrh	r2, [r3, #0]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	211a      	movs	r1, #26
 80075f2:	fb01 f303 	mul.w	r3, r1, r3
 80075f6:	4413      	add	r3, r2
 80075f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b25b      	sxtb	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	da16      	bge.n	8007632 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	211a      	movs	r1, #26
 800760a:	fb01 f303 	mul.w	r3, r1, r3
 800760e:	4413      	add	r3, r2
 8007610:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	211a      	movs	r1, #26
 8007620:	fb01 f303 	mul.w	r3, r1, r3
 8007624:	4413      	add	r3, r2
 8007626:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800762a:	881a      	ldrh	r2, [r3, #0]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	835a      	strh	r2, [r3, #26]
 8007630:	e015      	b.n	800765e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	211a      	movs	r1, #26
 8007638:	fb01 f303 	mul.w	r3, r1, r3
 800763c:	4413      	add	r3, r2
 800763e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007642:	781a      	ldrb	r2, [r3, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	211a      	movs	r1, #26
 800764e:	fb01 f303 	mul.w	r3, r1, r3
 8007652:	4413      	add	r3, r2
 8007654:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007658:	881a      	ldrh	r2, [r3, #0]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	7b9b      	ldrb	r3, [r3, #14]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 fe86 	bl	8009376 <USBH_AllocPipe>
 800766a:	4603      	mov	r3, r0
 800766c:	461a      	mov	r2, r3
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	7bdb      	ldrb	r3, [r3, #15]
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 fe7c 	bl	8009376 <USBH_AllocPipe>
 800767e:	4603      	mov	r3, r0
 8007680:	461a      	mov	r2, r3
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	7b59      	ldrb	r1, [r3, #13]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	7b98      	ldrb	r0, [r3, #14]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	8b12      	ldrh	r2, [r2, #24]
 800769e:	9202      	str	r2, [sp, #8]
 80076a0:	2202      	movs	r2, #2
 80076a2:	9201      	str	r2, [sp, #4]
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	4623      	mov	r3, r4
 80076a8:	4602      	mov	r2, r0
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 fe34 	bl	8009318 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	7b19      	ldrb	r1, [r3, #12]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	7bd8      	ldrb	r0, [r3, #15]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	8b52      	ldrh	r2, [r2, #26]
 80076c8:	9202      	str	r2, [sp, #8]
 80076ca:	2202      	movs	r2, #2
 80076cc:	9201      	str	r2, [sp, #4]
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	4623      	mov	r3, r4
 80076d2:	4602      	mov	r2, r0
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 fe1f 	bl	8009318 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	7b5b      	ldrb	r3, [r3, #13]
 80076e6:	2200      	movs	r2, #0
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f002 f92a 	bl	8009944 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	7b1b      	ldrb	r3, [r3, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f002 f923 	bl	8009944 <USBH_LL_SetToggle>

  return USBH_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	bd90      	pop	{r4, r7, pc}

08007708 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00e      	beq.n	8007740 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 fe14 	bl	8009356 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f001 fe3f 	bl	80093b8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	7b1b      	ldrb	r3, [r3, #12]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	7b1b      	ldrb	r3, [r3, #12]
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fe01 	bl	8009356 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	7b1b      	ldrb	r3, [r3, #12]
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 fe2c 	bl	80093b8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	7b5b      	ldrb	r3, [r3, #13]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00e      	beq.n	800778c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	7b5b      	ldrb	r3, [r3, #13]
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 fdee 	bl	8009356 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	7b5b      	ldrb	r3, [r3, #13]
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fe19 	bl	80093b8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00b      	beq.n	80077b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f002 f95b 	bl	8009a5c <free>
    phost->pActiveClass->pData = 0U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077ac:	2200      	movs	r2, #0
 80077ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3340      	adds	r3, #64	; 0x40
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f8b1 	bl	800793a <GetLineCoding>
 80077d8:	4603      	mov	r3, r0
 80077da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d105      	bne.n	80077ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077e8:	2102      	movs	r1, #2
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80077ee:	7afb      	ldrb	r3, [r7, #11]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007800:	2301      	movs	r3, #1
 8007802:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007818:	2b04      	cmp	r3, #4
 800781a:	d877      	bhi.n	800790c <USBH_CDC_Process+0x114>
 800781c:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <USBH_CDC_Process+0x2c>)
 800781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007822:	bf00      	nop
 8007824:	08007839 	.word	0x08007839
 8007828:	0800783f 	.word	0x0800783f
 800782c:	0800786f 	.word	0x0800786f
 8007830:	080078e3 	.word	0x080078e3
 8007834:	080078f1 	.word	0x080078f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73fb      	strb	r3, [r7, #15]
      break;
 800783c:	e06d      	b.n	800791a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f897 	bl	8007978 <SetLineCoding>
 800784a:	4603      	mov	r3, r0
 800784c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d104      	bne.n	800785e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2202      	movs	r2, #2
 8007858:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800785c:	e058      	b.n	8007910 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d055      	beq.n	8007910 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2204      	movs	r2, #4
 8007868:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800786c:	e050      	b.n	8007910 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	3340      	adds	r3, #64	; 0x40
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f860 	bl	800793a <GetLineCoding>
 800787a:	4603      	mov	r3, r0
 800787c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d126      	bne.n	80078d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007896:	791b      	ldrb	r3, [r3, #4]
 8007898:	429a      	cmp	r2, r3
 800789a:	d13b      	bne.n	8007914 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d133      	bne.n	8007914 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d12b      	bne.n	8007914 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d124      	bne.n	8007914 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f958 	bl	8007b80 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078d0:	e020      	b.n	8007914 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d01d      	beq.n	8007914 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2204      	movs	r2, #4
 80078dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80078e0:	e018      	b.n	8007914 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f867 	bl	80079b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f8da 	bl	8007aa2 <CDC_ProcessReception>
      break;
 80078ee:	e014      	b.n	800791a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80078f0:	2100      	movs	r1, #0
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 ffef 	bl	80088d6 <USBH_ClrFeature>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800790a:	e005      	b.n	8007918 <USBH_CDC_Process+0x120>

    default:
      break;
 800790c:	bf00      	nop
 800790e:	e004      	b.n	800791a <USBH_CDC_Process+0x122>
      break;
 8007910:	bf00      	nop
 8007912:	e002      	b.n	800791a <USBH_CDC_Process+0x122>
      break;
 8007914:	bf00      	nop
 8007916:	e000      	b.n	800791a <USBH_CDC_Process+0x122>
      break;
 8007918:	bf00      	nop

  }

  return status;
 800791a:	7bfb      	ldrb	r3, [r7, #15]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	22a1      	movs	r2, #161	; 0xa1
 8007948:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2221      	movs	r2, #33	; 0x21
 800794e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2207      	movs	r2, #7
 8007960:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2207      	movs	r2, #7
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 fa83 	bl	8008e74 <USBH_CtlReq>
 800796e:	4603      	mov	r3, r0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2221      	movs	r2, #33	; 0x21
 8007986:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2207      	movs	r2, #7
 800799e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2207      	movs	r2, #7
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 fa64 	bl	8008e74 <USBH_CtlReq>
 80079ac:	4603      	mov	r3, r0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b086      	sub	sp, #24
 80079ba:	af02      	add	r7, sp, #8
 80079bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80079c8:	2300      	movs	r3, #0
 80079ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d002      	beq.n	80079dc <CDC_ProcessTransmission+0x26>
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d023      	beq.n	8007a22 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80079da:	e05e      	b.n	8007a9a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	8b12      	ldrh	r2, [r2, #24]
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d90b      	bls.n	8007a00 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	69d9      	ldr	r1, [r3, #28]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8b1a      	ldrh	r2, [r3, #24]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	7b5b      	ldrb	r3, [r3, #13]
 80079f4:	2001      	movs	r0, #1
 80079f6:	9000      	str	r0, [sp, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 fc4a 	bl	8009292 <USBH_BulkSendData>
 80079fe:	e00b      	b.n	8007a18 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	7b5b      	ldrb	r3, [r3, #13]
 8007a0e:	2001      	movs	r0, #1
 8007a10:	9000      	str	r0, [sp, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 fc3d 	bl	8009292 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a20:	e03b      	b.n	8007a9a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	7b5b      	ldrb	r3, [r3, #13]
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f001 ff61 	bl	80098f0 <USBH_LL_GetURBState>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007a32:	7afb      	ldrb	r3, [r7, #11]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d128      	bne.n	8007a8a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	8b12      	ldrh	r2, [r2, #24]
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d90e      	bls.n	8007a62 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	8b12      	ldrh	r2, [r2, #24]
 8007a4c:	1a9a      	subs	r2, r3, r2
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	8b12      	ldrh	r2, [r2, #24]
 8007a5a:	441a      	add	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	61da      	str	r2, [r3, #28]
 8007a60:	e002      	b.n	8007a68 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d004      	beq.n	8007a7a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a78:	e00e      	b.n	8007a98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f868 	bl	8007b58 <USBH_CDC_TransmitCallback>
      break;
 8007a88:	e006      	b.n	8007a98 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d103      	bne.n	8007a98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a98:	bf00      	nop
  }
}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b086      	sub	sp, #24
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d002      	beq.n	8007ac8 <CDC_ProcessReception+0x26>
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d00e      	beq.n	8007ae4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007ac6:	e043      	b.n	8007b50 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	6a19      	ldr	r1, [r3, #32]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	8b5a      	ldrh	r2, [r3, #26]
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	7b1b      	ldrb	r3, [r3, #12]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 fc01 	bl	80092dc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2204      	movs	r2, #4
 8007ade:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ae2:	e035      	b.n	8007b50 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	7b1b      	ldrb	r3, [r3, #12]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 ff00 	bl	80098f0 <USBH_LL_GetURBState>
 8007af0:	4603      	mov	r3, r0
 8007af2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007af4:	7cfb      	ldrb	r3, [r7, #19]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d129      	bne.n	8007b4e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	7b1b      	ldrb	r3, [r3, #12]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 fe63 	bl	80097cc <USBH_LL_GetLastXferSize>
 8007b06:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d016      	beq.n	8007b40 <CDC_ProcessReception+0x9e>
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	8b5b      	ldrh	r3, [r3, #26]
 8007b16:	461a      	mov	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d910      	bls.n	8007b40 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	1ad2      	subs	r2, r2, r3
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	6a1a      	ldr	r2, [r3, #32]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	441a      	add	r2, r3
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2203      	movs	r2, #3
 8007b3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b3e:	e006      	b.n	8007b4e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f80f 	bl	8007b6c <USBH_CDC_ReceiveCallback>
      break;
 8007b4e:	bf00      	nop
  }
}
 8007b50:	bf00      	nop
 8007b52:	3718      	adds	r7, #24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	e029      	b.n	8007c00 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	79fa      	ldrb	r2, [r7, #7]
 8007bb0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 f81f 	bl	8007c08 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f001 fd33 	bl	8009664 <USBH_LL_Init>

  return USBH_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c14:	2300      	movs	r3, #0
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	e009      	b.n	8007c2e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	33e0      	adds	r3, #224	; 0xe0
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	2200      	movs	r2, #0
 8007c26:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b0f      	cmp	r3, #15
 8007c32:	d9f2      	bls.n	8007c1a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	e009      	b.n	8007c4e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c54:	d3f1      	bcc.n	8007c3a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2240      	movs	r2, #64	; 0x40
 8007c7a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d016      	beq.n	8007cf2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10e      	bne.n	8007cec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cd4:	1c59      	adds	r1, r3, #1
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	33de      	adds	r3, #222	; 0xde
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73fb      	strb	r3, [r7, #15]
 8007cea:	e004      	b.n	8007cf6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007cec:	2302      	movs	r3, #2
 8007cee:	73fb      	strb	r3, [r7, #15]
 8007cf0:	e001      	b.n	8007cf6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007d1a:	78fa      	ldrb	r2, [r7, #3]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d204      	bcs.n	8007d2a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	78fa      	ldrb	r2, [r7, #3]
 8007d24:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007d28:	e001      	b.n	8007d2e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	4608      	mov	r0, r1
 8007d46:	4611      	mov	r1, r2
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	70fb      	strb	r3, [r7, #3]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	70bb      	strb	r3, [r7, #2]
 8007d52:	4613      	mov	r3, r2
 8007d54:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d64:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d66:	e025      	b.n	8007db4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	221a      	movs	r2, #26
 8007d6c:	fb02 f303 	mul.w	r3, r2, r3
 8007d70:	3308      	adds	r3, #8
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	3302      	adds	r3, #2
 8007d78:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	795b      	ldrb	r3, [r3, #5]
 8007d7e:	78fa      	ldrb	r2, [r7, #3]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d002      	beq.n	8007d8a <USBH_FindInterface+0x4e>
 8007d84:	78fb      	ldrb	r3, [r7, #3]
 8007d86:	2bff      	cmp	r3, #255	; 0xff
 8007d88:	d111      	bne.n	8007dae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d8e:	78ba      	ldrb	r2, [r7, #2]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d002      	beq.n	8007d9a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d94:	78bb      	ldrb	r3, [r7, #2]
 8007d96:	2bff      	cmp	r3, #255	; 0xff
 8007d98:	d109      	bne.n	8007dae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d9e:	787a      	ldrb	r2, [r7, #1]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d002      	beq.n	8007daa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007da4:	787b      	ldrb	r3, [r7, #1]
 8007da6:	2bff      	cmp	r3, #255	; 0xff
 8007da8:	d101      	bne.n	8007dae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	e006      	b.n	8007dbc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	3301      	adds	r3, #1
 8007db2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d9d6      	bls.n	8007d68 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007dba:	23ff      	movs	r3, #255	; 0xff
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 fc83 	bl	80096dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 fd9c 	bl	8009916 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b088      	sub	sp, #32
 8007dec:	af04      	add	r7, sp, #16
 8007dee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007df0:	2302      	movs	r3, #2
 8007df2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d102      	bne.n	8007e0a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2203      	movs	r2, #3
 8007e08:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b0b      	cmp	r3, #11
 8007e12:	f200 81be 	bhi.w	8008192 <USBH_Process+0x3aa>
 8007e16:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <USBH_Process+0x34>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e4d 	.word	0x08007e4d
 8007e20:	08007e7f 	.word	0x08007e7f
 8007e24:	08007ee7 	.word	0x08007ee7
 8007e28:	0800812d 	.word	0x0800812d
 8007e2c:	08008193 	.word	0x08008193
 8007e30:	08007f8b 	.word	0x08007f8b
 8007e34:	080080d3 	.word	0x080080d3
 8007e38:	08007fc1 	.word	0x08007fc1
 8007e3c:	08007fe1 	.word	0x08007fe1
 8007e40:	08008001 	.word	0x08008001
 8007e44:	08008045 	.word	0x08008045
 8007e48:	08008115 	.word	0x08008115
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 819e 	beq.w	8008196 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007e60:	20c8      	movs	r0, #200	; 0xc8
 8007e62:	f001 fd9f 	bl	80099a4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 fc95 	bl	8009796 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e7c:	e18b      	b.n	8008196 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d107      	bne.n	8007e98 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e96:	e18d      	b.n	80081b4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ea2:	d914      	bls.n	8007ece <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007eaa:	3301      	adds	r3, #1
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d903      	bls.n	8007ec6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	220d      	movs	r2, #13
 8007ec2:	701a      	strb	r2, [r3, #0]
      break;
 8007ec4:	e176      	b.n	80081b4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	701a      	strb	r2, [r3, #0]
      break;
 8007ecc:	e172      	b.n	80081b4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ed4:	f103 020a 	add.w	r2, r3, #10
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007ede:	200a      	movs	r0, #10
 8007ee0:	f001 fd60 	bl	80099a4 <USBH_Delay>
      break;
 8007ee4:	e166      	b.n	80081b4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ef6:	2104      	movs	r1, #4
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007efc:	2064      	movs	r0, #100	; 0x64
 8007efe:	f001 fd51 	bl	80099a4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 fc20 	bl	8009748 <USBH_LL_GetSpeed>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2205      	movs	r2, #5
 8007f16:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007f18:	2100      	movs	r1, #0
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fa2b 	bl	8009376 <USBH_AllocPipe>
 8007f20:	4603      	mov	r3, r0
 8007f22:	461a      	mov	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007f28:	2180      	movs	r1, #128	; 0x80
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 fa23 	bl	8009376 <USBH_AllocPipe>
 8007f30:	4603      	mov	r3, r0
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	7919      	ldrb	r1, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f4c:	b292      	uxth	r2, r2
 8007f4e:	9202      	str	r2, [sp, #8]
 8007f50:	2200      	movs	r2, #0
 8007f52:	9201      	str	r2, [sp, #4]
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	4603      	mov	r3, r0
 8007f58:	2280      	movs	r2, #128	; 0x80
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 f9dc 	bl	8009318 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7959      	ldrb	r1, [r3, #5]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f74:	b292      	uxth	r2, r2
 8007f76:	9202      	str	r2, [sp, #8]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	9201      	str	r2, [sp, #4]
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2200      	movs	r2, #0
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f001 f9c8 	bl	8009318 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f88:	e114      	b.n	80081b4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f918 	bl	80081c0 <USBH_HandleEnum>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f040 80fe 	bne.w	800819a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d103      	bne.n	8007fb8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2208      	movs	r2, #8
 8007fb4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007fb6:	e0f0      	b.n	800819a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2207      	movs	r2, #7
 8007fbc:	701a      	strb	r2, [r3, #0]
      break;
 8007fbe:	e0ec      	b.n	800819a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 80e9 	beq.w	800819e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2208      	movs	r2, #8
 8007fdc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007fde:	e0de      	b.n	800819e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fc2c 	bl	8008848 <USBH_SetCfg>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f040 80d5 	bne.w	80081a2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2209      	movs	r2, #9
 8007ffc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ffe:	e0d0      	b.n	80081a2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008006:	f003 0320 	and.w	r3, r3, #32
 800800a:	2b00      	cmp	r3, #0
 800800c:	d016      	beq.n	800803c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800800e:	2101      	movs	r1, #1
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fc3c 	bl	800888e <USBH_SetFeature>
 8008016:	4603      	mov	r3, r0
 8008018:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d103      	bne.n	800802a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	220a      	movs	r2, #10
 8008026:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008028:	e0bd      	b.n	80081a6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b03      	cmp	r3, #3
 8008030:	f040 80b9 	bne.w	80081a6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	220a      	movs	r2, #10
 8008038:	701a      	strb	r2, [r3, #0]
      break;
 800803a:	e0b4      	b.n	80081a6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	220a      	movs	r2, #10
 8008040:	701a      	strb	r2, [r3, #0]
      break;
 8008042:	e0b0      	b.n	80081a6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 80ad 	beq.w	80081aa <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008058:	2300      	movs	r3, #0
 800805a:	73fb      	strb	r3, [r7, #15]
 800805c:	e016      	b.n	800808c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800805e:	7bfa      	ldrb	r2, [r7, #15]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	32de      	adds	r2, #222	; 0xde
 8008064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008068:	791a      	ldrb	r2, [r3, #4]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008070:	429a      	cmp	r2, r3
 8008072:	d108      	bne.n	8008086 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008074:	7bfa      	ldrb	r2, [r7, #15]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	32de      	adds	r2, #222	; 0xde
 800807a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008084:	e005      	b.n	8008092 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	3301      	adds	r3, #1
 800808a:	73fb      	strb	r3, [r7, #15]
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0e5      	beq.n	800805e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d016      	beq.n	80080ca <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4798      	blx	r3
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d109      	bne.n	80080c2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2206      	movs	r2, #6
 80080b2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080ba:	2103      	movs	r1, #3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080c0:	e073      	b.n	80081aa <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	220d      	movs	r2, #13
 80080c6:	701a      	strb	r2, [r3, #0]
      break;
 80080c8:	e06f      	b.n	80081aa <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	220d      	movs	r2, #13
 80080ce:	701a      	strb	r2, [r3, #0]
      break;
 80080d0:	e06b      	b.n	80081aa <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d017      	beq.n	800810c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
 80080e8:	4603      	mov	r3, r0
 80080ea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d103      	bne.n	80080fc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	220b      	movs	r2, #11
 80080f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080fa:	e058      	b.n	80081ae <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b02      	cmp	r3, #2
 8008102:	d154      	bne.n	80081ae <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	220d      	movs	r2, #13
 8008108:	701a      	strb	r2, [r3, #0]
      break;
 800810a:	e050      	b.n	80081ae <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	220d      	movs	r2, #13
 8008110:	701a      	strb	r2, [r3, #0]
      break;
 8008112:	e04c      	b.n	80081ae <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800811a:	2b00      	cmp	r3, #0
 800811c:	d049      	beq.n	80081b2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
      }
      break;
 800812a:	e042      	b.n	80081b2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7ff fd67 	bl	8007c08 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008140:	2b00      	cmp	r3, #0
 8008142:	d009      	beq.n	8008158 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008168:	2105      	movs	r1, #5
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b01      	cmp	r3, #1
 8008178:	d107      	bne.n	800818a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7ff fe20 	bl	8007dc8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008188:	e014      	b.n	80081b4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 faa6 	bl	80096dc <USBH_LL_Start>
      break;
 8008190:	e010      	b.n	80081b4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008192:	bf00      	nop
 8008194:	e00e      	b.n	80081b4 <USBH_Process+0x3cc>
      break;
 8008196:	bf00      	nop
 8008198:	e00c      	b.n	80081b4 <USBH_Process+0x3cc>
      break;
 800819a:	bf00      	nop
 800819c:	e00a      	b.n	80081b4 <USBH_Process+0x3cc>
    break;
 800819e:	bf00      	nop
 80081a0:	e008      	b.n	80081b4 <USBH_Process+0x3cc>
      break;
 80081a2:	bf00      	nop
 80081a4:	e006      	b.n	80081b4 <USBH_Process+0x3cc>
      break;
 80081a6:	bf00      	nop
 80081a8:	e004      	b.n	80081b4 <USBH_Process+0x3cc>
      break;
 80081aa:	bf00      	nop
 80081ac:	e002      	b.n	80081b4 <USBH_Process+0x3cc>
      break;
 80081ae:	bf00      	nop
 80081b0:	e000      	b.n	80081b4 <USBH_Process+0x3cc>
      break;
 80081b2:	bf00      	nop
  }
  return USBH_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop

080081c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af04      	add	r7, sp, #16
 80081c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80081c8:	2301      	movs	r3, #1
 80081ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80081cc:	2301      	movs	r3, #1
 80081ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	785b      	ldrb	r3, [r3, #1]
 80081d4:	2b07      	cmp	r3, #7
 80081d6:	f200 81c1 	bhi.w	800855c <USBH_HandleEnum+0x39c>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <USBH_HandleEnum+0x20>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	08008201 	.word	0x08008201
 80081e4:	080082bf 	.word	0x080082bf
 80081e8:	08008329 	.word	0x08008329
 80081ec:	080083b7 	.word	0x080083b7
 80081f0:	08008421 	.word	0x08008421
 80081f4:	08008491 	.word	0x08008491
 80081f8:	080084d7 	.word	0x080084d7
 80081fc:	0800851d 	.word	0x0800851d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008200:	2108      	movs	r1, #8
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fa50 	bl	80086a8 <USBH_Get_DevDesc>
 8008208:	4603      	mov	r3, r0
 800820a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d130      	bne.n	8008274 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	7919      	ldrb	r1, [r3, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008236:	b292      	uxth	r2, r2
 8008238:	9202      	str	r2, [sp, #8]
 800823a:	2200      	movs	r2, #0
 800823c:	9201      	str	r2, [sp, #4]
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	4603      	mov	r3, r0
 8008242:	2280      	movs	r2, #128	; 0x80
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 f867 	bl	8009318 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	7959      	ldrb	r1, [r3, #5]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800825e:	b292      	uxth	r2, r2
 8008260:	9202      	str	r2, [sp, #8]
 8008262:	2200      	movs	r2, #0
 8008264:	9201      	str	r2, [sp, #4]
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	4603      	mov	r3, r0
 800826a:	2200      	movs	r2, #0
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 f853 	bl	8009318 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008272:	e175      	b.n	8008560 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008274:	7bbb      	ldrb	r3, [r7, #14]
 8008276:	2b03      	cmp	r3, #3
 8008278:	f040 8172 	bne.w	8008560 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008282:	3301      	adds	r3, #1
 8008284:	b2da      	uxtb	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008292:	2b03      	cmp	r3, #3
 8008294:	d903      	bls.n	800829e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	220d      	movs	r2, #13
 800829a:	701a      	strb	r2, [r3, #0]
      break;
 800829c:	e160      	b.n	8008560 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	795b      	ldrb	r3, [r3, #5]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 f887 	bl	80093b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	791b      	ldrb	r3, [r3, #4]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 f881 	bl	80093b8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	701a      	strb	r2, [r3, #0]
      break;
 80082bc:	e150      	b.n	8008560 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80082be:	2112      	movs	r1, #18
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f9f1 	bl	80086a8 <USBH_Get_DevDesc>
 80082c6:	4603      	mov	r3, r0
 80082c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d103      	bne.n	80082d8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082d6:	e145      	b.n	8008564 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	2b03      	cmp	r3, #3
 80082dc:	f040 8142 	bne.w	8008564 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082e6:	3301      	adds	r3, #1
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	d903      	bls.n	8008302 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	220d      	movs	r2, #13
 80082fe:	701a      	strb	r2, [r3, #0]
      break;
 8008300:	e130      	b.n	8008564 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	795b      	ldrb	r3, [r3, #5]
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 f855 	bl	80093b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	791b      	ldrb	r3, [r3, #4]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 f84f 	bl	80093b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	701a      	strb	r2, [r3, #0]
      break;
 8008326:	e11d      	b.n	8008564 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008328:	2101      	movs	r1, #1
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa68 	bl	8008800 <USBH_SetAddress>
 8008330:	4603      	mov	r3, r0
 8008332:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d132      	bne.n	80083a0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800833a:	2002      	movs	r0, #2
 800833c:	f001 fb32 	bl	80099a4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2203      	movs	r2, #3
 800834c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	7919      	ldrb	r1, [r3, #4]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008362:	b292      	uxth	r2, r2
 8008364:	9202      	str	r2, [sp, #8]
 8008366:	2200      	movs	r2, #0
 8008368:	9201      	str	r2, [sp, #4]
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	4603      	mov	r3, r0
 800836e:	2280      	movs	r2, #128	; 0x80
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 ffd1 	bl	8009318 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	7959      	ldrb	r1, [r3, #5]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800838a:	b292      	uxth	r2, r2
 800838c:	9202      	str	r2, [sp, #8]
 800838e:	2200      	movs	r2, #0
 8008390:	9201      	str	r2, [sp, #4]
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	4603      	mov	r3, r0
 8008396:	2200      	movs	r2, #0
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 ffbd 	bl	8009318 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800839e:	e0e3      	b.n	8008568 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	f040 80e0 	bne.w	8008568 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	220d      	movs	r2, #13
 80083ac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	705a      	strb	r2, [r3, #1]
      break;
 80083b4:	e0d8      	b.n	8008568 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80083b6:	2109      	movs	r1, #9
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f99d 	bl	80086f8 <USBH_Get_CfgDesc>
 80083be:	4603      	mov	r3, r0
 80083c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d103      	bne.n	80083d0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2204      	movs	r2, #4
 80083cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083ce:	e0cd      	b.n	800856c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	f040 80ca 	bne.w	800856c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083de:	3301      	adds	r3, #1
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d903      	bls.n	80083fa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	220d      	movs	r2, #13
 80083f6:	701a      	strb	r2, [r3, #0]
      break;
 80083f8:	e0b8      	b.n	800856c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	795b      	ldrb	r3, [r3, #5]
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 ffd9 	bl	80093b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	791b      	ldrb	r3, [r3, #4]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 ffd3 	bl	80093b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	701a      	strb	r2, [r3, #0]
      break;
 800841e:	e0a5      	b.n	800856c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f965 	bl	80086f8 <USBH_Get_CfgDesc>
 800842e:	4603      	mov	r3, r0
 8008430:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008432:	7bbb      	ldrb	r3, [r7, #14]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d103      	bne.n	8008440 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2205      	movs	r2, #5
 800843c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800843e:	e097      	b.n	8008570 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008440:	7bbb      	ldrb	r3, [r7, #14]
 8008442:	2b03      	cmp	r3, #3
 8008444:	f040 8094 	bne.w	8008570 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800844e:	3301      	adds	r3, #1
 8008450:	b2da      	uxtb	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800845e:	2b03      	cmp	r3, #3
 8008460:	d903      	bls.n	800846a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	220d      	movs	r2, #13
 8008466:	701a      	strb	r2, [r3, #0]
      break;
 8008468:	e082      	b.n	8008570 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	795b      	ldrb	r3, [r3, #5]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 ffa1 	bl	80093b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	791b      	ldrb	r3, [r3, #4]
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 ff9b 	bl	80093b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	701a      	strb	r2, [r3, #0]
      break;
 800848e:	e06f      	b.n	8008570 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008496:	2b00      	cmp	r3, #0
 8008498:	d019      	beq.n	80084ce <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80084a6:	23ff      	movs	r3, #255	; 0xff
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f949 	bl	8008740 <USBH_Get_StringDesc>
 80084ae:	4603      	mov	r3, r0
 80084b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2206      	movs	r2, #6
 80084bc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80084be:	e059      	b.n	8008574 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d156      	bne.n	8008574 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2206      	movs	r2, #6
 80084ca:	705a      	strb	r2, [r3, #1]
      break;
 80084cc:	e052      	b.n	8008574 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2206      	movs	r2, #6
 80084d2:	705a      	strb	r2, [r3, #1]
      break;
 80084d4:	e04e      	b.n	8008574 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d019      	beq.n	8008514 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80084ec:	23ff      	movs	r3, #255	; 0xff
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f926 	bl	8008740 <USBH_Get_StringDesc>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d103      	bne.n	8008506 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2207      	movs	r2, #7
 8008502:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008504:	e038      	b.n	8008578 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008506:	7bbb      	ldrb	r3, [r7, #14]
 8008508:	2b03      	cmp	r3, #3
 800850a:	d135      	bne.n	8008578 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2207      	movs	r2, #7
 8008510:	705a      	strb	r2, [r3, #1]
      break;
 8008512:	e031      	b.n	8008578 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2207      	movs	r2, #7
 8008518:	705a      	strb	r2, [r3, #1]
      break;
 800851a:	e02d      	b.n	8008578 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008522:	2b00      	cmp	r3, #0
 8008524:	d017      	beq.n	8008556 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008532:	23ff      	movs	r3, #255	; 0xff
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f903 	bl	8008740 <USBH_Get_StringDesc>
 800853a:	4603      	mov	r3, r0
 800853c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d102      	bne.n	800854a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008548:	e018      	b.n	800857c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	2b03      	cmp	r3, #3
 800854e:	d115      	bne.n	800857c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	73fb      	strb	r3, [r7, #15]
      break;
 8008554:	e012      	b.n	800857c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]
      break;
 800855a:	e00f      	b.n	800857c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800855c:	bf00      	nop
 800855e:	e00e      	b.n	800857e <USBH_HandleEnum+0x3be>
      break;
 8008560:	bf00      	nop
 8008562:	e00c      	b.n	800857e <USBH_HandleEnum+0x3be>
      break;
 8008564:	bf00      	nop
 8008566:	e00a      	b.n	800857e <USBH_HandleEnum+0x3be>
      break;
 8008568:	bf00      	nop
 800856a:	e008      	b.n	800857e <USBH_HandleEnum+0x3be>
      break;
 800856c:	bf00      	nop
 800856e:	e006      	b.n	800857e <USBH_HandleEnum+0x3be>
      break;
 8008570:	bf00      	nop
 8008572:	e004      	b.n	800857e <USBH_HandleEnum+0x3be>
      break;
 8008574:	bf00      	nop
 8008576:	e002      	b.n	800857e <USBH_HandleEnum+0x3be>
      break;
 8008578:	bf00      	nop
 800857a:	e000      	b.n	800857e <USBH_HandleEnum+0x3be>
      break;
 800857c:	bf00      	nop
  }
  return Status;
 800857e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f804 	bl	80085ca <USBH_HandleSof>
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b0b      	cmp	r3, #11
 80085da:	d10a      	bne.n	80085f2 <USBH_HandleSof+0x28>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d005      	beq.n	80085f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
  }
}
 80085f2:	bf00      	nop
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800860a:	bf00      	nop
}
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008626:	bf00      	nop
}
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 f846 	bl	8009712 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	791b      	ldrb	r3, [r3, #4]
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fe93 	bl	80093b8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	795b      	ldrb	r3, [r3, #5]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fe8d 	bl	80093b8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80086ba:	78fb      	ldrb	r3, [r7, #3]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	4613      	mov	r3, r2
 80086c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086c6:	2100      	movs	r1, #0
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f864 	bl	8008796 <USBH_GetDescriptor>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f203 3026 	addw	r0, r3, #806	; 0x326
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086e4:	78fa      	ldrb	r2, [r7, #3]
 80086e6:	b292      	uxth	r2, r2
 80086e8:	4619      	mov	r1, r3
 80086ea:	f000 f919 	bl	8008920 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	331c      	adds	r3, #28
 8008708:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800870a:	887b      	ldrh	r3, [r7, #2]
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008714:	2100      	movs	r1, #0
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f83d 	bl	8008796 <USBH_GetDescriptor>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d107      	bne.n	8008736 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008726:	887b      	ldrh	r3, [r7, #2]
 8008728:	461a      	mov	r2, r3
 800872a:	68b9      	ldr	r1, [r7, #8]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f989 	bl	8008a44 <USBH_ParseCfgDesc>
 8008732:	4603      	mov	r3, r0
 8008734:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008736:	7bfb      	ldrb	r3, [r7, #15]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af02      	add	r7, sp, #8
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	607a      	str	r2, [r7, #4]
 800874a:	461a      	mov	r2, r3
 800874c:	460b      	mov	r3, r1
 800874e:	72fb      	strb	r3, [r7, #11]
 8008750:	4613      	mov	r3, r2
 8008752:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008754:	7afb      	ldrb	r3, [r7, #11]
 8008756:	b29b      	uxth	r3, r3
 8008758:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800875c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008764:	893b      	ldrh	r3, [r7, #8]
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	460b      	mov	r3, r1
 800876a:	2100      	movs	r1, #0
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 f812 	bl	8008796 <USBH_GetDescriptor>
 8008772:	4603      	mov	r3, r0
 8008774:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d107      	bne.n	800878c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008782:	893a      	ldrh	r2, [r7, #8]
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fb26 	bl	8008dd8 <USBH_ParseStringDesc>
  }

  return status;
 800878c:	7dfb      	ldrb	r3, [r7, #23]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	607b      	str	r3, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	72fb      	strb	r3, [r7, #11]
 80087a4:	4613      	mov	r3, r2
 80087a6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	789b      	ldrb	r3, [r3, #2]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d11c      	bne.n	80087ea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80087b0:	7afb      	ldrb	r3, [r7, #11]
 80087b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2206      	movs	r2, #6
 80087c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	893a      	ldrh	r2, [r7, #8]
 80087c6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80087c8:	893b      	ldrh	r3, [r7, #8]
 80087ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80087ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087d2:	d104      	bne.n	80087de <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f240 4209 	movw	r2, #1033	; 0x409
 80087da:	829a      	strh	r2, [r3, #20]
 80087dc:	e002      	b.n	80087e4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8b3a      	ldrh	r2, [r7, #24]
 80087e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80087ea:	8b3b      	ldrh	r3, [r7, #24]
 80087ec:	461a      	mov	r2, r3
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 fb3f 	bl	8008e74 <USBH_CtlReq>
 80087f6:	4603      	mov	r3, r0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	789b      	ldrb	r3, [r3, #2]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d10f      	bne.n	8008834 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2205      	movs	r2, #5
 800881e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	b29a      	uxth	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008834:	2200      	movs	r2, #0
 8008836:	2100      	movs	r1, #0
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fb1b 	bl	8008e74 <USBH_CtlReq>
 800883e:	4603      	mov	r3, r0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	789b      	ldrb	r3, [r3, #2]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d10e      	bne.n	800887a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2209      	movs	r2, #9
 8008866:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	887a      	ldrh	r2, [r7, #2]
 800886c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800887a:	2200      	movs	r2, #0
 800887c:	2100      	movs	r1, #0
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 faf8 	bl	8008e74 <USBH_CtlReq>
 8008884:	4603      	mov	r3, r0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	460b      	mov	r3, r1
 8008898:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	789b      	ldrb	r3, [r3, #2]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d10f      	bne.n	80088c2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2203      	movs	r2, #3
 80088ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80088c2:	2200      	movs	r2, #0
 80088c4:	2100      	movs	r1, #0
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fad4 	bl	8008e74 <USBH_CtlReq>
 80088cc:	4603      	mov	r3, r0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	789b      	ldrb	r3, [r3, #2]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d10f      	bne.n	800890a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2202      	movs	r2, #2
 80088ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	b29a      	uxth	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800890a:	2200      	movs	r2, #0
 800890c:	2100      	movs	r1, #0
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fab0 	bl	8008e74 <USBH_CtlReq>
 8008914:	4603      	mov	r3, r0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	4613      	mov	r3, r2
 800892c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	781a      	ldrb	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	785a      	ldrb	r2, [r3, #1]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	3302      	adds	r3, #2
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	b29a      	uxth	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	3303      	adds	r3, #3
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	b29b      	uxth	r3, r3
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	b29b      	uxth	r3, r3
 8008952:	4313      	orrs	r3, r2
 8008954:	b29a      	uxth	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	791a      	ldrb	r2, [r3, #4]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	795a      	ldrb	r2, [r3, #5]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	799a      	ldrb	r2, [r3, #6]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	79da      	ldrb	r2, [r3, #7]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	79db      	ldrb	r3, [r3, #7]
 800897e:	2b20      	cmp	r3, #32
 8008980:	dc0f      	bgt.n	80089a2 <USBH_ParseDevDesc+0x82>
 8008982:	2b08      	cmp	r3, #8
 8008984:	db14      	blt.n	80089b0 <USBH_ParseDevDesc+0x90>
 8008986:	3b08      	subs	r3, #8
 8008988:	4a2d      	ldr	r2, [pc, #180]	; (8008a40 <USBH_ParseDevDesc+0x120>)
 800898a:	fa22 f303 	lsr.w	r3, r2, r3
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	bf14      	ite	ne
 8008996:	2301      	movne	r3, #1
 8008998:	2300      	moveq	r3, #0
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	d102      	bne.n	80089a6 <USBH_ParseDevDesc+0x86>
 80089a0:	e006      	b.n	80089b0 <USBH_ParseDevDesc+0x90>
 80089a2:	2b40      	cmp	r3, #64	; 0x40
 80089a4:	d104      	bne.n	80089b0 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	79da      	ldrb	r2, [r3, #7]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	71da      	strb	r2, [r3, #7]
      break;
 80089ae:	e003      	b.n	80089b8 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2240      	movs	r2, #64	; 0x40
 80089b4:	71da      	strb	r2, [r3, #7]
      break;
 80089b6:	bf00      	nop
  }

  if (length > 8U)
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	2b08      	cmp	r3, #8
 80089bc:	d939      	bls.n	8008a32 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	3308      	adds	r3, #8
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	3309      	adds	r3, #9
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	021b      	lsls	r3, r3, #8
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	4313      	orrs	r3, r2
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	330a      	adds	r3, #10
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	330b      	adds	r3, #11
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	4313      	orrs	r3, r2
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	330c      	adds	r3, #12
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	330d      	adds	r3, #13
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	021b      	lsls	r3, r3, #8
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	7b9a      	ldrb	r2, [r3, #14]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	7bda      	ldrb	r2, [r3, #15]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	7c1a      	ldrb	r2, [r3, #16]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	7c5a      	ldrb	r2, [r3, #17]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	745a      	strb	r2, [r3, #17]
  }
}
 8008a32:	bf00      	nop
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	01000101 	.word	0x01000101

08008a44 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08c      	sub	sp, #48	; 0x30
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008a58:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	785a      	ldrb	r2, [r3, #1]
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	3302      	adds	r3, #2
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	3303      	adds	r3, #3
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	021b      	lsls	r3, r3, #8
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aa0:	bf28      	it	cs
 8008aa2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	791a      	ldrb	r2, [r3, #4]
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	795a      	ldrb	r2, [r3, #5]
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	799a      	ldrb	r2, [r3, #6]
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	79da      	ldrb	r2, [r3, #7]
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	7a1a      	ldrb	r2, [r3, #8]
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b09      	cmp	r3, #9
 8008ada:	d002      	beq.n	8008ae2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	2209      	movs	r2, #9
 8008ae0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008ae2:	88fb      	ldrh	r3, [r7, #6]
 8008ae4:	2b09      	cmp	r3, #9
 8008ae6:	f240 809d 	bls.w	8008c24 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008aea:	2309      	movs	r3, #9
 8008aec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008af2:	e081      	b.n	8008bf8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008af4:	f107 0316 	add.w	r3, r7, #22
 8008af8:	4619      	mov	r1, r3
 8008afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008afc:	f000 f99f 	bl	8008e3e <USBH_GetNextDesc>
 8008b00:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d176      	bne.n	8008bf8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	2b09      	cmp	r3, #9
 8008b10:	d002      	beq.n	8008b18 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b14:	2209      	movs	r2, #9
 8008b16:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b1c:	221a      	movs	r2, #26
 8008b1e:	fb02 f303 	mul.w	r3, r2, r3
 8008b22:	3308      	adds	r3, #8
 8008b24:	6a3a      	ldr	r2, [r7, #32]
 8008b26:	4413      	add	r3, r2
 8008b28:	3302      	adds	r3, #2
 8008b2a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b2e:	69f8      	ldr	r0, [r7, #28]
 8008b30:	f000 f87e 	bl	8008c30 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b3e:	e043      	b.n	8008bc8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b40:	f107 0316 	add.w	r3, r7, #22
 8008b44:	4619      	mov	r1, r3
 8008b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b48:	f000 f979 	bl	8008e3e <USBH_GetNextDesc>
 8008b4c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	785b      	ldrb	r3, [r3, #1]
 8008b52:	2b05      	cmp	r3, #5
 8008b54:	d138      	bne.n	8008bc8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	795b      	ldrb	r3, [r3, #5]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d10f      	bne.n	8008b7e <USBH_ParseCfgDesc+0x13a>
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	799b      	ldrb	r3, [r3, #6]
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d10b      	bne.n	8008b7e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	79db      	ldrb	r3, [r3, #7]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10f      	bne.n	8008b8e <USBH_ParseCfgDesc+0x14a>
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b09      	cmp	r3, #9
 8008b74:	d00b      	beq.n	8008b8e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	2209      	movs	r2, #9
 8008b7a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b7c:	e007      	b.n	8008b8e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	2b07      	cmp	r3, #7
 8008b84:	d004      	beq.n	8008b90 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	2207      	movs	r2, #7
 8008b8a:	701a      	strb	r2, [r3, #0]
 8008b8c:	e000      	b.n	8008b90 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b8e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b94:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b98:	3201      	adds	r2, #1
 8008b9a:	00d2      	lsls	r2, r2, #3
 8008b9c:	211a      	movs	r1, #26
 8008b9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ba2:	4413      	add	r3, r2
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	6a3a      	ldr	r2, [r7, #32]
 8008ba8:	4413      	add	r3, r2
 8008baa:	3304      	adds	r3, #4
 8008bac:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb0:	69b9      	ldr	r1, [r7, #24]
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 f86b 	bl	8008c8e <USBH_ParseEPDesc>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008bbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	791b      	ldrb	r3, [r3, #4]
 8008bcc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d204      	bcs.n	8008bde <USBH_ParseCfgDesc+0x19a>
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	885a      	ldrh	r2, [r3, #2]
 8008bd8:	8afb      	ldrh	r3, [r7, #22]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d8b0      	bhi.n	8008b40 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	791b      	ldrb	r3, [r3, #4]
 8008be2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d201      	bcs.n	8008bee <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e01c      	b.n	8008c28 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d805      	bhi.n	8008c0c <USBH_ParseCfgDesc+0x1c8>
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	885a      	ldrh	r2, [r3, #2]
 8008c04:	8afb      	ldrh	r3, [r7, #22]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	f63f af74 	bhi.w	8008af4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	791b      	ldrb	r3, [r3, #4]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	bf28      	it	cs
 8008c14:	2302      	movcs	r3, #2
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d201      	bcs.n	8008c24 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e001      	b.n	8008c28 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008c24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3730      	adds	r7, #48	; 0x30
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781a      	ldrb	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	785a      	ldrb	r2, [r3, #1]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	789a      	ldrb	r2, [r3, #2]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	78da      	ldrb	r2, [r3, #3]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	791a      	ldrb	r2, [r3, #4]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	795a      	ldrb	r2, [r3, #5]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	799a      	ldrb	r2, [r3, #6]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	79da      	ldrb	r2, [r3, #7]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	7a1a      	ldrb	r2, [r3, #8]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	721a      	strb	r2, [r3, #8]
}
 8008c82:	bf00      	nop
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b087      	sub	sp, #28
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	781a      	ldrb	r2, [r3, #0]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	785a      	ldrb	r2, [r3, #1]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	789a      	ldrb	r2, [r3, #2]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	78da      	ldrb	r2, [r3, #3]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3305      	adds	r3, #5
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	021b      	lsls	r3, r3, #8
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	799a      	ldrb	r2, [r3, #6]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	889b      	ldrh	r3, [r3, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008cea:	2303      	movs	r3, #3
 8008cec:	75fb      	strb	r3, [r7, #23]
 8008cee:	e033      	b.n	8008d58 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	889b      	ldrh	r3, [r3, #4]
 8008cf4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008cf8:	f023 0307 	bic.w	r3, r3, #7
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	889b      	ldrh	r3, [r3, #4]
 8008d06:	b21a      	sxth	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	b299      	uxth	r1, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3305      	adds	r3, #5
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d110      	bne.n	8008d4a <USBH_ParseEPDesc+0xbc>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3304      	adds	r3, #4
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	b299      	uxth	r1, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3305      	adds	r3, #5
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	021b      	lsls	r3, r3, #8
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	430b      	orrs	r3, r1
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	b21b      	sxth	r3, r3
 8008d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d46:	b21b      	sxth	r3, r3
 8008d48:	e001      	b.n	8008d4e <USBH_ParseEPDesc+0xc0>
 8008d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	b21b      	sxth	r3, r3
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d116      	bne.n	8008d90 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	78db      	ldrb	r3, [r3, #3]
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d005      	beq.n	8008d7a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	78db      	ldrb	r3, [r3, #3]
 8008d72:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d127      	bne.n	8008dca <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	799b      	ldrb	r3, [r3, #6]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <USBH_ParseEPDesc+0xfc>
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	799b      	ldrb	r3, [r3, #6]
 8008d86:	2b10      	cmp	r3, #16
 8008d88:	d91f      	bls.n	8008dca <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	75fb      	strb	r3, [r7, #23]
 8008d8e:	e01c      	b.n	8008dca <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	78db      	ldrb	r3, [r3, #3]
 8008d94:	f003 0303 	and.w	r3, r3, #3
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d10a      	bne.n	8008db2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	799b      	ldrb	r3, [r3, #6]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <USBH_ParseEPDesc+0x11e>
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	799b      	ldrb	r3, [r3, #6]
 8008da8:	2b10      	cmp	r3, #16
 8008daa:	d90e      	bls.n	8008dca <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008dac:	2303      	movs	r3, #3
 8008dae:	75fb      	strb	r3, [r7, #23]
 8008db0:	e00b      	b.n	8008dca <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	78db      	ldrb	r3, [r3, #3]
 8008db6:	f003 0303 	and.w	r3, r3, #3
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d105      	bne.n	8008dca <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	799b      	ldrb	r3, [r3, #6]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	371c      	adds	r7, #28
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	4613      	mov	r3, r2
 8008de4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	3301      	adds	r3, #1
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d120      	bne.n	8008e32 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	1e9a      	subs	r2, r3, #2
 8008df6:	88fb      	ldrh	r3, [r7, #6]
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	bf28      	it	cs
 8008dfc:	4613      	movcs	r3, r2
 8008dfe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3302      	adds	r3, #2
 8008e04:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008e06:	2300      	movs	r3, #0
 8008e08:	82fb      	strh	r3, [r7, #22]
 8008e0a:	e00b      	b.n	8008e24 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008e0c:	8afb      	ldrh	r3, [r7, #22]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	4413      	add	r3, r2
 8008e12:	781a      	ldrb	r2, [r3, #0]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008e1e:	8afb      	ldrh	r3, [r7, #22]
 8008e20:	3302      	adds	r3, #2
 8008e22:	82fb      	strh	r3, [r7, #22]
 8008e24:	8afa      	ldrh	r2, [r7, #22]
 8008e26:	8abb      	ldrh	r3, [r7, #20]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d3ef      	bcc.n	8008e0c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	701a      	strb	r2, [r3, #0]
  }
}
 8008e32:	bf00      	nop
 8008e34:	371c      	adds	r7, #28
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b085      	sub	sp, #20
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	881a      	ldrh	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	4413      	add	r3, r2
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4413      	add	r3, r2
 8008e64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e66:	68fb      	ldr	r3, [r7, #12]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008e82:	2301      	movs	r3, #1
 8008e84:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	789b      	ldrb	r3, [r3, #2]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d002      	beq.n	8008e94 <USBH_CtlReq+0x20>
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d00f      	beq.n	8008eb2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008e92:	e027      	b.n	8008ee4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	88fa      	ldrh	r2, [r7, #6]
 8008e9e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008eac:	2301      	movs	r3, #1
 8008eae:	75fb      	strb	r3, [r7, #23]
      break;
 8008eb0:	e018      	b.n	8008ee4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 f81c 	bl	8008ef0 <USBH_HandleControl>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <USBH_CtlReq+0x54>
 8008ec2:	7dfb      	ldrb	r3, [r7, #23]
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d106      	bne.n	8008ed6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	761a      	strb	r2, [r3, #24]
      break;
 8008ed4:	e005      	b.n	8008ee2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d102      	bne.n	8008ee2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	709a      	strb	r2, [r3, #2]
      break;
 8008ee2:	bf00      	nop
  }
  return status;
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af02      	add	r7, sp, #8
 8008ef6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	7e1b      	ldrb	r3, [r3, #24]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	2b0a      	cmp	r3, #10
 8008f08:	f200 8156 	bhi.w	80091b8 <USBH_HandleControl+0x2c8>
 8008f0c:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <USBH_HandleControl+0x24>)
 8008f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f12:	bf00      	nop
 8008f14:	08008f41 	.word	0x08008f41
 8008f18:	08008f5b 	.word	0x08008f5b
 8008f1c:	08008fc5 	.word	0x08008fc5
 8008f20:	08008feb 	.word	0x08008feb
 8008f24:	08009023 	.word	0x08009023
 8008f28:	0800904d 	.word	0x0800904d
 8008f2c:	0800909f 	.word	0x0800909f
 8008f30:	080090c1 	.word	0x080090c1
 8008f34:	080090fd 	.word	0x080090fd
 8008f38:	08009123 	.word	0x08009123
 8008f3c:	08009161 	.word	0x08009161
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f103 0110 	add.w	r1, r3, #16
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	795b      	ldrb	r3, [r3, #5]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f943 	bl	80091d8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2202      	movs	r2, #2
 8008f56:	761a      	strb	r2, [r3, #24]
      break;
 8008f58:	e139      	b.n	80091ce <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	795b      	ldrb	r3, [r3, #5]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fcc5 	bl	80098f0 <USBH_LL_GetURBState>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d11e      	bne.n	8008fae <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	7c1b      	ldrb	r3, [r3, #16]
 8008f74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f78:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	8adb      	ldrh	r3, [r3, #22]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f82:	7b7b      	ldrb	r3, [r7, #13]
 8008f84:	2b80      	cmp	r3, #128	; 0x80
 8008f86:	d103      	bne.n	8008f90 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2203      	movs	r2, #3
 8008f8c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f8e:	e115      	b.n	80091bc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2205      	movs	r2, #5
 8008f94:	761a      	strb	r2, [r3, #24]
      break;
 8008f96:	e111      	b.n	80091bc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008f98:	7b7b      	ldrb	r3, [r7, #13]
 8008f9a:	2b80      	cmp	r3, #128	; 0x80
 8008f9c:	d103      	bne.n	8008fa6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2209      	movs	r2, #9
 8008fa2:	761a      	strb	r2, [r3, #24]
      break;
 8008fa4:	e10a      	b.n	80091bc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2207      	movs	r2, #7
 8008faa:	761a      	strb	r2, [r3, #24]
      break;
 8008fac:	e106      	b.n	80091bc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	2b04      	cmp	r3, #4
 8008fb2:	d003      	beq.n	8008fbc <USBH_HandleControl+0xcc>
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	f040 8100 	bne.w	80091bc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	220b      	movs	r2, #11
 8008fc0:	761a      	strb	r2, [r3, #24]
      break;
 8008fc2:	e0fb      	b.n	80091bc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6899      	ldr	r1, [r3, #8]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	899a      	ldrh	r2, [r3, #12]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	791b      	ldrb	r3, [r3, #4]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f93a 	bl	8009256 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2204      	movs	r2, #4
 8008fe6:	761a      	strb	r2, [r3, #24]
      break;
 8008fe8:	e0f1      	b.n	80091ce <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	791b      	ldrb	r3, [r3, #4]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fc7d 	bl	80098f0 <USBH_LL_GetURBState>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d102      	bne.n	8009006 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2209      	movs	r2, #9
 8009004:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009006:	7bbb      	ldrb	r3, [r7, #14]
 8009008:	2b05      	cmp	r3, #5
 800900a:	d102      	bne.n	8009012 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800900c:	2303      	movs	r3, #3
 800900e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009010:	e0d6      	b.n	80091c0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	2b04      	cmp	r3, #4
 8009016:	f040 80d3 	bne.w	80091c0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	220b      	movs	r2, #11
 800901e:	761a      	strb	r2, [r3, #24]
      break;
 8009020:	e0ce      	b.n	80091c0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6899      	ldr	r1, [r3, #8]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	899a      	ldrh	r2, [r3, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	795b      	ldrb	r3, [r3, #5]
 800902e:	2001      	movs	r0, #1
 8009030:	9000      	str	r0, [sp, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f8ea 	bl	800920c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800903e:	b29a      	uxth	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2206      	movs	r2, #6
 8009048:	761a      	strb	r2, [r3, #24]
      break;
 800904a:	e0c0      	b.n	80091ce <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	795b      	ldrb	r3, [r3, #5]
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fc4c 	bl	80098f0 <USBH_LL_GetURBState>
 8009058:	4603      	mov	r3, r0
 800905a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d103      	bne.n	800906a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2207      	movs	r2, #7
 8009066:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009068:	e0ac      	b.n	80091c4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	2b05      	cmp	r3, #5
 800906e:	d105      	bne.n	800907c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	220c      	movs	r2, #12
 8009074:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009076:	2303      	movs	r3, #3
 8009078:	73fb      	strb	r3, [r7, #15]
      break;
 800907a:	e0a3      	b.n	80091c4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	2b02      	cmp	r3, #2
 8009080:	d103      	bne.n	800908a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2205      	movs	r2, #5
 8009086:	761a      	strb	r2, [r3, #24]
      break;
 8009088:	e09c      	b.n	80091c4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	2b04      	cmp	r3, #4
 800908e:	f040 8099 	bne.w	80091c4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	220b      	movs	r2, #11
 8009096:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009098:	2302      	movs	r3, #2
 800909a:	73fb      	strb	r3, [r7, #15]
      break;
 800909c:	e092      	b.n	80091c4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	791b      	ldrb	r3, [r3, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	2100      	movs	r1, #0
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f8d5 	bl	8009256 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2208      	movs	r2, #8
 80090bc:	761a      	strb	r2, [r3, #24]

      break;
 80090be:	e086      	b.n	80091ce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	791b      	ldrb	r3, [r3, #4]
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fc12 	bl	80098f0 <USBH_LL_GetURBState>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d105      	bne.n	80090e2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	220d      	movs	r2, #13
 80090da:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80090dc:	2300      	movs	r3, #0
 80090de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090e0:	e072      	b.n	80091c8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	2b04      	cmp	r3, #4
 80090e6:	d103      	bne.n	80090f0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	220b      	movs	r2, #11
 80090ec:	761a      	strb	r2, [r3, #24]
      break;
 80090ee:	e06b      	b.n	80091c8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	2b05      	cmp	r3, #5
 80090f4:	d168      	bne.n	80091c8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80090f6:	2303      	movs	r3, #3
 80090f8:	73fb      	strb	r3, [r7, #15]
      break;
 80090fa:	e065      	b.n	80091c8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	795b      	ldrb	r3, [r3, #5]
 8009100:	2201      	movs	r2, #1
 8009102:	9200      	str	r2, [sp, #0]
 8009104:	2200      	movs	r2, #0
 8009106:	2100      	movs	r1, #0
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f87f 	bl	800920c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009114:	b29a      	uxth	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	220a      	movs	r2, #10
 800911e:	761a      	strb	r2, [r3, #24]
      break;
 8009120:	e055      	b.n	80091ce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	795b      	ldrb	r3, [r3, #5]
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fbe1 	bl	80098f0 <USBH_LL_GetURBState>
 800912e:	4603      	mov	r3, r0
 8009130:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d105      	bne.n	8009144 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	220d      	movs	r2, #13
 8009140:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009142:	e043      	b.n	80091cc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009144:	7bbb      	ldrb	r3, [r7, #14]
 8009146:	2b02      	cmp	r3, #2
 8009148:	d103      	bne.n	8009152 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2209      	movs	r2, #9
 800914e:	761a      	strb	r2, [r3, #24]
      break;
 8009150:	e03c      	b.n	80091cc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	2b04      	cmp	r3, #4
 8009156:	d139      	bne.n	80091cc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	220b      	movs	r2, #11
 800915c:	761a      	strb	r2, [r3, #24]
      break;
 800915e:	e035      	b.n	80091cc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	7e5b      	ldrb	r3, [r3, #25]
 8009164:	3301      	adds	r3, #1
 8009166:	b2da      	uxtb	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	765a      	strb	r2, [r3, #25]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7e5b      	ldrb	r3, [r3, #25]
 8009170:	2b02      	cmp	r3, #2
 8009172:	d806      	bhi.n	8009182 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009180:	e025      	b.n	80091ce <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009188:	2106      	movs	r1, #6
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	795b      	ldrb	r3, [r3, #5]
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f90c 	bl	80093b8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	791b      	ldrb	r3, [r3, #4]
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f906 	bl	80093b8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80091b2:	2302      	movs	r3, #2
 80091b4:	73fb      	strb	r3, [r7, #15]
      break;
 80091b6:	e00a      	b.n	80091ce <USBH_HandleControl+0x2de>

    default:
      break;
 80091b8:	bf00      	nop
 80091ba:	e008      	b.n	80091ce <USBH_HandleControl+0x2de>
      break;
 80091bc:	bf00      	nop
 80091be:	e006      	b.n	80091ce <USBH_HandleControl+0x2de>
      break;
 80091c0:	bf00      	nop
 80091c2:	e004      	b.n	80091ce <USBH_HandleControl+0x2de>
      break;
 80091c4:	bf00      	nop
 80091c6:	e002      	b.n	80091ce <USBH_HandleControl+0x2de>
      break;
 80091c8:	bf00      	nop
 80091ca:	e000      	b.n	80091ce <USBH_HandleControl+0x2de>
      break;
 80091cc:	bf00      	nop
  }

  return status;
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af04      	add	r7, sp, #16
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	4613      	mov	r3, r2
 80091e4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091e6:	79f9      	ldrb	r1, [r7, #7]
 80091e8:	2300      	movs	r3, #0
 80091ea:	9303      	str	r3, [sp, #12]
 80091ec:	2308      	movs	r3, #8
 80091ee:	9302      	str	r3, [sp, #8]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	9301      	str	r3, [sp, #4]
 80091f4:	2300      	movs	r3, #0
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	2300      	movs	r3, #0
 80091fa:	2200      	movs	r2, #0
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 fb46 	bl	800988e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af04      	add	r7, sp, #16
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	4611      	mov	r1, r2
 8009218:	461a      	mov	r2, r3
 800921a:	460b      	mov	r3, r1
 800921c:	80fb      	strh	r3, [r7, #6]
 800921e:	4613      	mov	r3, r2
 8009220:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800922c:	2300      	movs	r3, #0
 800922e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009230:	7979      	ldrb	r1, [r7, #5]
 8009232:	7e3b      	ldrb	r3, [r7, #24]
 8009234:	9303      	str	r3, [sp, #12]
 8009236:	88fb      	ldrh	r3, [r7, #6]
 8009238:	9302      	str	r3, [sp, #8]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	2301      	movs	r3, #1
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	2300      	movs	r3, #0
 8009244:	2200      	movs	r2, #0
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 fb21 	bl	800988e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b088      	sub	sp, #32
 800925a:	af04      	add	r7, sp, #16
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	4611      	mov	r1, r2
 8009262:	461a      	mov	r2, r3
 8009264:	460b      	mov	r3, r1
 8009266:	80fb      	strh	r3, [r7, #6]
 8009268:	4613      	mov	r3, r2
 800926a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800926c:	7979      	ldrb	r1, [r7, #5]
 800926e:	2300      	movs	r3, #0
 8009270:	9303      	str	r3, [sp, #12]
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	9302      	str	r3, [sp, #8]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	2301      	movs	r3, #1
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	2300      	movs	r3, #0
 8009280:	2201      	movs	r2, #1
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 fb03 	bl	800988e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009288:	2300      	movs	r3, #0

}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b088      	sub	sp, #32
 8009296:	af04      	add	r7, sp, #16
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	4611      	mov	r1, r2
 800929e:	461a      	mov	r2, r3
 80092a0:	460b      	mov	r3, r1
 80092a2:	80fb      	strh	r3, [r7, #6]
 80092a4:	4613      	mov	r3, r2
 80092a6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80092b2:	2300      	movs	r3, #0
 80092b4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092b6:	7979      	ldrb	r1, [r7, #5]
 80092b8:	7e3b      	ldrb	r3, [r7, #24]
 80092ba:	9303      	str	r3, [sp, #12]
 80092bc:	88fb      	ldrh	r3, [r7, #6]
 80092be:	9302      	str	r3, [sp, #8]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	2301      	movs	r3, #1
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	2302      	movs	r3, #2
 80092ca:	2200      	movs	r2, #0
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 fade 	bl	800988e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af04      	add	r7, sp, #16
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	4611      	mov	r1, r2
 80092e8:	461a      	mov	r2, r3
 80092ea:	460b      	mov	r3, r1
 80092ec:	80fb      	strh	r3, [r7, #6]
 80092ee:	4613      	mov	r3, r2
 80092f0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092f2:	7979      	ldrb	r1, [r7, #5]
 80092f4:	2300      	movs	r3, #0
 80092f6:	9303      	str	r3, [sp, #12]
 80092f8:	88fb      	ldrh	r3, [r7, #6]
 80092fa:	9302      	str	r3, [sp, #8]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	2301      	movs	r3, #1
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	2302      	movs	r3, #2
 8009306:	2201      	movs	r2, #1
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 fac0 	bl	800988e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af04      	add	r7, sp, #16
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	4608      	mov	r0, r1
 8009322:	4611      	mov	r1, r2
 8009324:	461a      	mov	r2, r3
 8009326:	4603      	mov	r3, r0
 8009328:	70fb      	strb	r3, [r7, #3]
 800932a:	460b      	mov	r3, r1
 800932c:	70bb      	strb	r3, [r7, #2]
 800932e:	4613      	mov	r3, r2
 8009330:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009332:	7878      	ldrb	r0, [r7, #1]
 8009334:	78ba      	ldrb	r2, [r7, #2]
 8009336:	78f9      	ldrb	r1, [r7, #3]
 8009338:	8b3b      	ldrh	r3, [r7, #24]
 800933a:	9302      	str	r3, [sp, #8]
 800933c:	7d3b      	ldrb	r3, [r7, #20]
 800933e:	9301      	str	r3, [sp, #4]
 8009340:	7c3b      	ldrb	r3, [r7, #16]
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	4603      	mov	r3, r0
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fa53 	bl	80097f2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	460b      	mov	r3, r1
 8009360:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009362:	78fb      	ldrb	r3, [r7, #3]
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa72 	bl	8009850 <USBH_LL_ClosePipe>

  return USBH_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	460b      	mov	r3, r1
 8009380:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f836 	bl	80093f4 <USBH_GetFreePipe>
 8009388:	4603      	mov	r3, r0
 800938a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800938c:	89fb      	ldrh	r3, [r7, #14]
 800938e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009392:	4293      	cmp	r3, r2
 8009394:	d00a      	beq.n	80093ac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009396:	78fa      	ldrb	r2, [r7, #3]
 8009398:	89fb      	ldrh	r3, [r7, #14]
 800939a:	f003 030f 	and.w	r3, r3, #15
 800939e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093a2:	6879      	ldr	r1, [r7, #4]
 80093a4:	33e0      	adds	r3, #224	; 0xe0
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	440b      	add	r3, r1
 80093aa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80093ac:	89fb      	ldrh	r3, [r7, #14]
 80093ae:	b2db      	uxtb	r3, r3
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	2b0f      	cmp	r3, #15
 80093c8:	d80d      	bhi.n	80093e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80093ca:	78fb      	ldrb	r3, [r7, #3]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	33e0      	adds	r3, #224	; 0xe0
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	78fb      	ldrb	r3, [r7, #3]
 80093d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80093dc:	6879      	ldr	r1, [r7, #4]
 80093de:	33e0      	adds	r3, #224	; 0xe0
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	440b      	add	r3, r1
 80093e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]
 8009404:	e00f      	b.n	8009426 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	33e0      	adds	r3, #224	; 0xe0
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009416:	2b00      	cmp	r3, #0
 8009418:	d102      	bne.n	8009420 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	b29b      	uxth	r3, r3
 800941e:	e007      	b.n	8009430 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	3301      	adds	r3, #1
 8009424:	73fb      	strb	r3, [r7, #15]
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	2b0f      	cmp	r3, #15
 800942a:	d9ec      	bls.n	8009406 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800942c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009440:	2201      	movs	r2, #1
 8009442:	490e      	ldr	r1, [pc, #56]	; (800947c <MX_USB_HOST_Init+0x40>)
 8009444:	480e      	ldr	r0, [pc, #56]	; (8009480 <MX_USB_HOST_Init+0x44>)
 8009446:	f7fe fba5 	bl	8007b94 <USBH_Init>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009450:	f7f7 fd34 	bl	8000ebc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009454:	490b      	ldr	r1, [pc, #44]	; (8009484 <MX_USB_HOST_Init+0x48>)
 8009456:	480a      	ldr	r0, [pc, #40]	; (8009480 <MX_USB_HOST_Init+0x44>)
 8009458:	f7fe fc2a 	bl	8007cb0 <USBH_RegisterClass>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009462:	f7f7 fd2b 	bl	8000ebc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009466:	4806      	ldr	r0, [pc, #24]	; (8009480 <MX_USB_HOST_Init+0x44>)
 8009468:	f7fe fcae 	bl	8007dc8 <USBH_Start>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009472:	f7f7 fd23 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009476:	bf00      	nop
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	0800949d 	.word	0x0800949d
 8009480:	200002cc 	.word	0x200002cc
 8009484:	2000001c 	.word	0x2000001c

08009488 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800948c:	4802      	ldr	r0, [pc, #8]	; (8009498 <MX_USB_HOST_Process+0x10>)
 800948e:	f7fe fcab 	bl	8007de8 <USBH_Process>
}
 8009492:	bf00      	nop
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	200002cc 	.word	0x200002cc

0800949c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	460b      	mov	r3, r1
 80094a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d819      	bhi.n	80094e4 <USBH_UserProcess+0x48>
 80094b0:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <USBH_UserProcess+0x1c>)
 80094b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b6:	bf00      	nop
 80094b8:	080094e5 	.word	0x080094e5
 80094bc:	080094d5 	.word	0x080094d5
 80094c0:	080094e5 	.word	0x080094e5
 80094c4:	080094dd 	.word	0x080094dd
 80094c8:	080094cd 	.word	0x080094cd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80094cc:	4b09      	ldr	r3, [pc, #36]	; (80094f4 <USBH_UserProcess+0x58>)
 80094ce:	2203      	movs	r2, #3
 80094d0:	701a      	strb	r2, [r3, #0]
  break;
 80094d2:	e008      	b.n	80094e6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80094d4:	4b07      	ldr	r3, [pc, #28]	; (80094f4 <USBH_UserProcess+0x58>)
 80094d6:	2202      	movs	r2, #2
 80094d8:	701a      	strb	r2, [r3, #0]
  break;
 80094da:	e004      	b.n	80094e6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80094dc:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <USBH_UserProcess+0x58>)
 80094de:	2201      	movs	r2, #1
 80094e0:	701a      	strb	r2, [r3, #0]
  break;
 80094e2:	e000      	b.n	80094e6 <USBH_UserProcess+0x4a>

  default:
  break;
 80094e4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	200006a4 	.word	0x200006a4

080094f8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b08a      	sub	sp, #40	; 0x28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009500:	f107 0314 	add.w	r3, r7, #20
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	605a      	str	r2, [r3, #4]
 800950a:	609a      	str	r2, [r3, #8]
 800950c:	60da      	str	r2, [r3, #12]
 800950e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009518:	d147      	bne.n	80095aa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800951a:	2300      	movs	r3, #0
 800951c:	613b      	str	r3, [r7, #16]
 800951e:	4b25      	ldr	r3, [pc, #148]	; (80095b4 <HAL_HCD_MspInit+0xbc>)
 8009520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009522:	4a24      	ldr	r2, [pc, #144]	; (80095b4 <HAL_HCD_MspInit+0xbc>)
 8009524:	f043 0301 	orr.w	r3, r3, #1
 8009528:	6313      	str	r3, [r2, #48]	; 0x30
 800952a:	4b22      	ldr	r3, [pc, #136]	; (80095b4 <HAL_HCD_MspInit+0xbc>)
 800952c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	613b      	str	r3, [r7, #16]
 8009534:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800953a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800953c:	2300      	movs	r3, #0
 800953e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009540:	2300      	movs	r3, #0
 8009542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009544:	f107 0314 	add.w	r3, r7, #20
 8009548:	4619      	mov	r1, r3
 800954a:	481b      	ldr	r0, [pc, #108]	; (80095b8 <HAL_HCD_MspInit+0xc0>)
 800954c:	f7f8 f9d6 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009550:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009556:	2302      	movs	r3, #2
 8009558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800955a:	2300      	movs	r3, #0
 800955c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800955e:	2300      	movs	r3, #0
 8009560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009562:	230a      	movs	r3, #10
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009566:	f107 0314 	add.w	r3, r7, #20
 800956a:	4619      	mov	r1, r3
 800956c:	4812      	ldr	r0, [pc, #72]	; (80095b8 <HAL_HCD_MspInit+0xc0>)
 800956e:	f7f8 f9c5 	bl	80018fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009572:	4b10      	ldr	r3, [pc, #64]	; (80095b4 <HAL_HCD_MspInit+0xbc>)
 8009574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009576:	4a0f      	ldr	r2, [pc, #60]	; (80095b4 <HAL_HCD_MspInit+0xbc>)
 8009578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800957c:	6353      	str	r3, [r2, #52]	; 0x34
 800957e:	2300      	movs	r3, #0
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	4b0c      	ldr	r3, [pc, #48]	; (80095b4 <HAL_HCD_MspInit+0xbc>)
 8009584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009586:	4a0b      	ldr	r2, [pc, #44]	; (80095b4 <HAL_HCD_MspInit+0xbc>)
 8009588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800958c:	6453      	str	r3, [r2, #68]	; 0x44
 800958e:	4b09      	ldr	r3, [pc, #36]	; (80095b4 <HAL_HCD_MspInit+0xbc>)
 8009590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009596:	60fb      	str	r3, [r7, #12]
 8009598:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800959a:	2200      	movs	r2, #0
 800959c:	2100      	movs	r1, #0
 800959e:	2043      	movs	r0, #67	; 0x43
 80095a0:	f7f8 f8e3 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80095a4:	2043      	movs	r0, #67	; 0x43
 80095a6:	f7f8 f8fc 	bl	80017a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80095aa:	bf00      	nop
 80095ac:	3728      	adds	r7, #40	; 0x28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	40023800 	.word	0x40023800
 80095b8:	40020000 	.word	0x40020000

080095bc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fe ffeb 	bl	80085a6 <USBH_LL_IncTimer>
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7ff f823 	bl	8008632 <USBH_LL_Connect>
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff f82c 	bl	8008660 <USBH_LL_Disconnect>
}
 8009608:	bf00      	nop
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
 800961c:	4613      	mov	r3, r2
 800961e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800963a:	4618      	mov	r0, r3
 800963c:	f7fe ffdd 	bl	80085fa <USBH_LL_PortEnabled>
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe ffdd 	bl	8008616 <USBH_LL_PortDisabled>
}
 800965c:	bf00      	nop
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009672:	2b01      	cmp	r3, #1
 8009674:	d12a      	bne.n	80096cc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009676:	4a18      	ldr	r2, [pc, #96]	; (80096d8 <USBH_LL_Init+0x74>)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a15      	ldr	r2, [pc, #84]	; (80096d8 <USBH_LL_Init+0x74>)
 8009682:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009686:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <USBH_LL_Init+0x74>)
 8009688:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800968c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800968e:	4b12      	ldr	r3, [pc, #72]	; (80096d8 <USBH_LL_Init+0x74>)
 8009690:	2208      	movs	r2, #8
 8009692:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009694:	4b10      	ldr	r3, [pc, #64]	; (80096d8 <USBH_LL_Init+0x74>)
 8009696:	2201      	movs	r2, #1
 8009698:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800969a:	4b0f      	ldr	r3, [pc, #60]	; (80096d8 <USBH_LL_Init+0x74>)
 800969c:	2200      	movs	r2, #0
 800969e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80096a0:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <USBH_LL_Init+0x74>)
 80096a2:	2202      	movs	r2, #2
 80096a4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096a6:	4b0c      	ldr	r3, [pc, #48]	; (80096d8 <USBH_LL_Init+0x74>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80096ac:	480a      	ldr	r0, [pc, #40]	; (80096d8 <USBH_LL_Init+0x74>)
 80096ae:	f7f8 fb30 	bl	8001d12 <HAL_HCD_Init>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80096b8:	f7f7 fc00 	bl	8000ebc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80096bc:	4806      	ldr	r0, [pc, #24]	; (80096d8 <USBH_LL_Init+0x74>)
 80096be:	f7f8 ff14 	bl	80024ea <HAL_HCD_GetCurrentFrame>
 80096c2:	4603      	mov	r3, r0
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7fe ff5e 	bl	8008588 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	200006a8 	.word	0x200006a8

080096dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7f8 fe83 	bl	80023fe <HAL_HCD_Start>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 f95c 	bl	80099bc <USBH_Get_USB_Status>
 8009704:	4603      	mov	r3, r0
 8009706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009708:	7bbb      	ldrb	r3, [r7, #14]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009728:	4618      	mov	r0, r3
 800972a:	f7f8 fe8b 	bl	8002444 <HAL_HCD_Stop>
 800972e:	4603      	mov	r3, r0
 8009730:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009732:	7bfb      	ldrb	r3, [r7, #15]
 8009734:	4618      	mov	r0, r3
 8009736:	f000 f941 	bl	80099bc <USBH_Get_USB_Status>
 800973a:	4603      	mov	r3, r0
 800973c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800973e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009750:	2301      	movs	r3, #1
 8009752:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800975a:	4618      	mov	r0, r3
 800975c:	f7f8 fed3 	bl	8002506 <HAL_HCD_GetCurrentSpeed>
 8009760:	4603      	mov	r3, r0
 8009762:	2b02      	cmp	r3, #2
 8009764:	d00c      	beq.n	8009780 <USBH_LL_GetSpeed+0x38>
 8009766:	2b02      	cmp	r3, #2
 8009768:	d80d      	bhi.n	8009786 <USBH_LL_GetSpeed+0x3e>
 800976a:	2b00      	cmp	r3, #0
 800976c:	d002      	beq.n	8009774 <USBH_LL_GetSpeed+0x2c>
 800976e:	2b01      	cmp	r3, #1
 8009770:	d003      	beq.n	800977a <USBH_LL_GetSpeed+0x32>
 8009772:	e008      	b.n	8009786 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009774:	2300      	movs	r3, #0
 8009776:	73fb      	strb	r3, [r7, #15]
    break;
 8009778:	e008      	b.n	800978c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800977a:	2301      	movs	r3, #1
 800977c:	73fb      	strb	r3, [r7, #15]
    break;
 800977e:	e005      	b.n	800978c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009780:	2302      	movs	r3, #2
 8009782:	73fb      	strb	r3, [r7, #15]
    break;
 8009784:	e002      	b.n	800978c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009786:	2301      	movs	r3, #1
 8009788:	73fb      	strb	r3, [r7, #15]
    break;
 800978a:	bf00      	nop
  }
  return  speed;
 800978c:	7bfb      	ldrb	r3, [r7, #15]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7f8 fe66 	bl	800247e <HAL_HCD_ResetPort>
 80097b2:	4603      	mov	r3, r0
 80097b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 f8ff 	bl	80099bc <USBH_Get_USB_Status>
 80097be:	4603      	mov	r3, r0
 80097c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097de:	78fa      	ldrb	r2, [r7, #3]
 80097e0:	4611      	mov	r1, r2
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7f8 fe6d 	bl	80024c2 <HAL_HCD_HC_GetXferCount>
 80097e8:	4603      	mov	r3, r0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80097f2:	b590      	push	{r4, r7, lr}
 80097f4:	b089      	sub	sp, #36	; 0x24
 80097f6:	af04      	add	r7, sp, #16
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	4608      	mov	r0, r1
 80097fc:	4611      	mov	r1, r2
 80097fe:	461a      	mov	r2, r3
 8009800:	4603      	mov	r3, r0
 8009802:	70fb      	strb	r3, [r7, #3]
 8009804:	460b      	mov	r3, r1
 8009806:	70bb      	strb	r3, [r7, #2]
 8009808:	4613      	mov	r3, r2
 800980a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800981a:	787c      	ldrb	r4, [r7, #1]
 800981c:	78ba      	ldrb	r2, [r7, #2]
 800981e:	78f9      	ldrb	r1, [r7, #3]
 8009820:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009822:	9302      	str	r3, [sp, #8]
 8009824:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009828:	9301      	str	r3, [sp, #4]
 800982a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	4623      	mov	r3, r4
 8009832:	f7f8 fad0 	bl	8001dd6 <HAL_HCD_HC_Init>
 8009836:	4603      	mov	r3, r0
 8009838:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800983a:	7bfb      	ldrb	r3, [r7, #15]
 800983c:	4618      	mov	r0, r3
 800983e:	f000 f8bd 	bl	80099bc <USBH_Get_USB_Status>
 8009842:	4603      	mov	r3, r0
 8009844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009846:	7bbb      	ldrb	r3, [r7, #14]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	bd90      	pop	{r4, r7, pc}

08009850 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800986a:	78fa      	ldrb	r2, [r7, #3]
 800986c:	4611      	mov	r1, r2
 800986e:	4618      	mov	r0, r3
 8009870:	f7f8 fb40 	bl	8001ef4 <HAL_HCD_HC_Halt>
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	4618      	mov	r0, r3
 800987c:	f000 f89e 	bl	80099bc <USBH_Get_USB_Status>
 8009880:	4603      	mov	r3, r0
 8009882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009884:	7bbb      	ldrb	r3, [r7, #14]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800988e:	b590      	push	{r4, r7, lr}
 8009890:	b089      	sub	sp, #36	; 0x24
 8009892:	af04      	add	r7, sp, #16
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	4608      	mov	r0, r1
 8009898:	4611      	mov	r1, r2
 800989a:	461a      	mov	r2, r3
 800989c:	4603      	mov	r3, r0
 800989e:	70fb      	strb	r3, [r7, #3]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70bb      	strb	r3, [r7, #2]
 80098a4:	4613      	mov	r3, r2
 80098a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80098b6:	787c      	ldrb	r4, [r7, #1]
 80098b8:	78ba      	ldrb	r2, [r7, #2]
 80098ba:	78f9      	ldrb	r1, [r7, #3]
 80098bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80098c0:	9303      	str	r3, [sp, #12]
 80098c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80098c4:	9302      	str	r3, [sp, #8]
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	9301      	str	r3, [sp, #4]
 80098ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	4623      	mov	r3, r4
 80098d2:	f7f8 fb33 	bl	8001f3c <HAL_HCD_HC_SubmitRequest>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f86d 	bl	80099bc <USBH_Get_USB_Status>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd90      	pop	{r4, r7, pc}

080098f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009902:	78fa      	ldrb	r2, [r7, #3]
 8009904:	4611      	mov	r1, r2
 8009906:	4618      	mov	r0, r3
 8009908:	f7f8 fdc7 	bl	800249a <HAL_HCD_HC_GetURBState>
 800990c:	4603      	mov	r3, r0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	460b      	mov	r3, r1
 8009920:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009928:	2b01      	cmp	r3, #1
 800992a:	d103      	bne.n	8009934 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	4618      	mov	r0, r3
 8009930:	f000 f870 	bl	8009a14 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009934:	20c8      	movs	r0, #200	; 0xc8
 8009936:	f7f7 fe19 	bl	800156c <HAL_Delay>
  return USBH_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
 8009950:	4613      	mov	r3, r2
 8009952:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800995a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800995c:	78fb      	ldrb	r3, [r7, #3]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	212c      	movs	r1, #44	; 0x2c
 8009962:	fb01 f303 	mul.w	r3, r1, r3
 8009966:	4413      	add	r3, r2
 8009968:	333b      	adds	r3, #59	; 0x3b
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d009      	beq.n	8009984 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	212c      	movs	r1, #44	; 0x2c
 8009976:	fb01 f303 	mul.w	r3, r1, r3
 800997a:	4413      	add	r3, r2
 800997c:	3354      	adds	r3, #84	; 0x54
 800997e:	78ba      	ldrb	r2, [r7, #2]
 8009980:	701a      	strb	r2, [r3, #0]
 8009982:	e008      	b.n	8009996 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	212c      	movs	r1, #44	; 0x2c
 800998a:	fb01 f303 	mul.w	r3, r1, r3
 800998e:	4413      	add	r3, r2
 8009990:	3355      	adds	r3, #85	; 0x55
 8009992:	78ba      	ldrb	r2, [r7, #2]
 8009994:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7f7 fddd 	bl	800156c <HAL_Delay>
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099ca:	79fb      	ldrb	r3, [r7, #7]
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d817      	bhi.n	8009a00 <USBH_Get_USB_Status+0x44>
 80099d0:	a201      	add	r2, pc, #4	; (adr r2, 80099d8 <USBH_Get_USB_Status+0x1c>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	080099e9 	.word	0x080099e9
 80099dc:	080099ef 	.word	0x080099ef
 80099e0:	080099f5 	.word	0x080099f5
 80099e4:	080099fb 	.word	0x080099fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	73fb      	strb	r3, [r7, #15]
    break;
 80099ec:	e00b      	b.n	8009a06 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80099ee:	2302      	movs	r3, #2
 80099f0:	73fb      	strb	r3, [r7, #15]
    break;
 80099f2:	e008      	b.n	8009a06 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80099f4:	2301      	movs	r3, #1
 80099f6:	73fb      	strb	r3, [r7, #15]
    break;
 80099f8:	e005      	b.n	8009a06 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80099fa:	2302      	movs	r3, #2
 80099fc:	73fb      	strb	r3, [r7, #15]
    break;
 80099fe:	e002      	b.n	8009a06 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009a00:	2302      	movs	r3, #2
 8009a02:	73fb      	strb	r3, [r7, #15]
    break;
 8009a04:	bf00      	nop
  }
  return usb_status;
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d102      	bne.n	8009a2e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	73fb      	strb	r3, [r7, #15]
 8009a2c:	e001      	b.n	8009a32 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	461a      	mov	r2, r3
 8009a36:	2101      	movs	r1, #1
 8009a38:	4803      	ldr	r0, [pc, #12]	; (8009a48 <MX_DriverVbusFS+0x34>)
 8009a3a:	f7f8 f913 	bl	8001c64 <HAL_GPIO_WritePin>
}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	40020800 	.word	0x40020800

08009a4c <malloc>:
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <malloc+0xc>)
 8009a4e:	4601      	mov	r1, r0
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	f000 b82b 	b.w	8009aac <_malloc_r>
 8009a56:	bf00      	nop
 8009a58:	20000088 	.word	0x20000088

08009a5c <free>:
 8009a5c:	4b02      	ldr	r3, [pc, #8]	; (8009a68 <free+0xc>)
 8009a5e:	4601      	mov	r1, r0
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	f000 b8f3 	b.w	8009c4c <_free_r>
 8009a66:	bf00      	nop
 8009a68:	20000088 	.word	0x20000088

08009a6c <sbrk_aligned>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	4e0e      	ldr	r6, [pc, #56]	; (8009aa8 <sbrk_aligned+0x3c>)
 8009a70:	460c      	mov	r4, r1
 8009a72:	6831      	ldr	r1, [r6, #0]
 8009a74:	4605      	mov	r5, r0
 8009a76:	b911      	cbnz	r1, 8009a7e <sbrk_aligned+0x12>
 8009a78:	f000 f8ac 	bl	8009bd4 <_sbrk_r>
 8009a7c:	6030      	str	r0, [r6, #0]
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4628      	mov	r0, r5
 8009a82:	f000 f8a7 	bl	8009bd4 <_sbrk_r>
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	d00a      	beq.n	8009aa0 <sbrk_aligned+0x34>
 8009a8a:	1cc4      	adds	r4, r0, #3
 8009a8c:	f024 0403 	bic.w	r4, r4, #3
 8009a90:	42a0      	cmp	r0, r4
 8009a92:	d007      	beq.n	8009aa4 <sbrk_aligned+0x38>
 8009a94:	1a21      	subs	r1, r4, r0
 8009a96:	4628      	mov	r0, r5
 8009a98:	f000 f89c 	bl	8009bd4 <_sbrk_r>
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	d101      	bne.n	8009aa4 <sbrk_aligned+0x38>
 8009aa0:	f04f 34ff 	mov.w	r4, #4294967295
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	bd70      	pop	{r4, r5, r6, pc}
 8009aa8:	200009b0 	.word	0x200009b0

08009aac <_malloc_r>:
 8009aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab0:	1ccd      	adds	r5, r1, #3
 8009ab2:	f025 0503 	bic.w	r5, r5, #3
 8009ab6:	3508      	adds	r5, #8
 8009ab8:	2d0c      	cmp	r5, #12
 8009aba:	bf38      	it	cc
 8009abc:	250c      	movcc	r5, #12
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	4607      	mov	r7, r0
 8009ac2:	db01      	blt.n	8009ac8 <_malloc_r+0x1c>
 8009ac4:	42a9      	cmp	r1, r5
 8009ac6:	d905      	bls.n	8009ad4 <_malloc_r+0x28>
 8009ac8:	230c      	movs	r3, #12
 8009aca:	603b      	str	r3, [r7, #0]
 8009acc:	2600      	movs	r6, #0
 8009ace:	4630      	mov	r0, r6
 8009ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ba8 <_malloc_r+0xfc>
 8009ad8:	f000 f868 	bl	8009bac <__malloc_lock>
 8009adc:	f8d8 3000 	ldr.w	r3, [r8]
 8009ae0:	461c      	mov	r4, r3
 8009ae2:	bb5c      	cbnz	r4, 8009b3c <_malloc_r+0x90>
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	f7ff ffc0 	bl	8009a6c <sbrk_aligned>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	4604      	mov	r4, r0
 8009af0:	d155      	bne.n	8009b9e <_malloc_r+0xf2>
 8009af2:	f8d8 4000 	ldr.w	r4, [r8]
 8009af6:	4626      	mov	r6, r4
 8009af8:	2e00      	cmp	r6, #0
 8009afa:	d145      	bne.n	8009b88 <_malloc_r+0xdc>
 8009afc:	2c00      	cmp	r4, #0
 8009afe:	d048      	beq.n	8009b92 <_malloc_r+0xe6>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	4631      	mov	r1, r6
 8009b04:	4638      	mov	r0, r7
 8009b06:	eb04 0903 	add.w	r9, r4, r3
 8009b0a:	f000 f863 	bl	8009bd4 <_sbrk_r>
 8009b0e:	4581      	cmp	r9, r0
 8009b10:	d13f      	bne.n	8009b92 <_malloc_r+0xe6>
 8009b12:	6821      	ldr	r1, [r4, #0]
 8009b14:	1a6d      	subs	r5, r5, r1
 8009b16:	4629      	mov	r1, r5
 8009b18:	4638      	mov	r0, r7
 8009b1a:	f7ff ffa7 	bl	8009a6c <sbrk_aligned>
 8009b1e:	3001      	adds	r0, #1
 8009b20:	d037      	beq.n	8009b92 <_malloc_r+0xe6>
 8009b22:	6823      	ldr	r3, [r4, #0]
 8009b24:	442b      	add	r3, r5
 8009b26:	6023      	str	r3, [r4, #0]
 8009b28:	f8d8 3000 	ldr.w	r3, [r8]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d038      	beq.n	8009ba2 <_malloc_r+0xf6>
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	42a2      	cmp	r2, r4
 8009b34:	d12b      	bne.n	8009b8e <_malloc_r+0xe2>
 8009b36:	2200      	movs	r2, #0
 8009b38:	605a      	str	r2, [r3, #4]
 8009b3a:	e00f      	b.n	8009b5c <_malloc_r+0xb0>
 8009b3c:	6822      	ldr	r2, [r4, #0]
 8009b3e:	1b52      	subs	r2, r2, r5
 8009b40:	d41f      	bmi.n	8009b82 <_malloc_r+0xd6>
 8009b42:	2a0b      	cmp	r2, #11
 8009b44:	d917      	bls.n	8009b76 <_malloc_r+0xca>
 8009b46:	1961      	adds	r1, r4, r5
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	6025      	str	r5, [r4, #0]
 8009b4c:	bf18      	it	ne
 8009b4e:	6059      	strne	r1, [r3, #4]
 8009b50:	6863      	ldr	r3, [r4, #4]
 8009b52:	bf08      	it	eq
 8009b54:	f8c8 1000 	streq.w	r1, [r8]
 8009b58:	5162      	str	r2, [r4, r5]
 8009b5a:	604b      	str	r3, [r1, #4]
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	f104 060b 	add.w	r6, r4, #11
 8009b62:	f000 f829 	bl	8009bb8 <__malloc_unlock>
 8009b66:	f026 0607 	bic.w	r6, r6, #7
 8009b6a:	1d23      	adds	r3, r4, #4
 8009b6c:	1af2      	subs	r2, r6, r3
 8009b6e:	d0ae      	beq.n	8009ace <_malloc_r+0x22>
 8009b70:	1b9b      	subs	r3, r3, r6
 8009b72:	50a3      	str	r3, [r4, r2]
 8009b74:	e7ab      	b.n	8009ace <_malloc_r+0x22>
 8009b76:	42a3      	cmp	r3, r4
 8009b78:	6862      	ldr	r2, [r4, #4]
 8009b7a:	d1dd      	bne.n	8009b38 <_malloc_r+0x8c>
 8009b7c:	f8c8 2000 	str.w	r2, [r8]
 8009b80:	e7ec      	b.n	8009b5c <_malloc_r+0xb0>
 8009b82:	4623      	mov	r3, r4
 8009b84:	6864      	ldr	r4, [r4, #4]
 8009b86:	e7ac      	b.n	8009ae2 <_malloc_r+0x36>
 8009b88:	4634      	mov	r4, r6
 8009b8a:	6876      	ldr	r6, [r6, #4]
 8009b8c:	e7b4      	b.n	8009af8 <_malloc_r+0x4c>
 8009b8e:	4613      	mov	r3, r2
 8009b90:	e7cc      	b.n	8009b2c <_malloc_r+0x80>
 8009b92:	230c      	movs	r3, #12
 8009b94:	603b      	str	r3, [r7, #0]
 8009b96:	4638      	mov	r0, r7
 8009b98:	f000 f80e 	bl	8009bb8 <__malloc_unlock>
 8009b9c:	e797      	b.n	8009ace <_malloc_r+0x22>
 8009b9e:	6025      	str	r5, [r4, #0]
 8009ba0:	e7dc      	b.n	8009b5c <_malloc_r+0xb0>
 8009ba2:	605b      	str	r3, [r3, #4]
 8009ba4:	deff      	udf	#255	; 0xff
 8009ba6:	bf00      	nop
 8009ba8:	200009ac 	.word	0x200009ac

08009bac <__malloc_lock>:
 8009bac:	4801      	ldr	r0, [pc, #4]	; (8009bb4 <__malloc_lock+0x8>)
 8009bae:	f000 b84b 	b.w	8009c48 <__retarget_lock_acquire_recursive>
 8009bb2:	bf00      	nop
 8009bb4:	20000af0 	.word	0x20000af0

08009bb8 <__malloc_unlock>:
 8009bb8:	4801      	ldr	r0, [pc, #4]	; (8009bc0 <__malloc_unlock+0x8>)
 8009bba:	f000 b846 	b.w	8009c4a <__retarget_lock_release_recursive>
 8009bbe:	bf00      	nop
 8009bc0:	20000af0 	.word	0x20000af0

08009bc4 <memset>:
 8009bc4:	4402      	add	r2, r0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d100      	bne.n	8009bce <memset+0xa>
 8009bcc:	4770      	bx	lr
 8009bce:	f803 1b01 	strb.w	r1, [r3], #1
 8009bd2:	e7f9      	b.n	8009bc8 <memset+0x4>

08009bd4 <_sbrk_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4d06      	ldr	r5, [pc, #24]	; (8009bf0 <_sbrk_r+0x1c>)
 8009bd8:	2300      	movs	r3, #0
 8009bda:	4604      	mov	r4, r0
 8009bdc:	4608      	mov	r0, r1
 8009bde:	602b      	str	r3, [r5, #0]
 8009be0:	f7f7 fbe0 	bl	80013a4 <_sbrk>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	d102      	bne.n	8009bee <_sbrk_r+0x1a>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	b103      	cbz	r3, 8009bee <_sbrk_r+0x1a>
 8009bec:	6023      	str	r3, [r4, #0]
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	20000aec 	.word	0x20000aec

08009bf4 <__errno>:
 8009bf4:	4b01      	ldr	r3, [pc, #4]	; (8009bfc <__errno+0x8>)
 8009bf6:	6818      	ldr	r0, [r3, #0]
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	20000088 	.word	0x20000088

08009c00 <__libc_init_array>:
 8009c00:	b570      	push	{r4, r5, r6, lr}
 8009c02:	4d0d      	ldr	r5, [pc, #52]	; (8009c38 <__libc_init_array+0x38>)
 8009c04:	4c0d      	ldr	r4, [pc, #52]	; (8009c3c <__libc_init_array+0x3c>)
 8009c06:	1b64      	subs	r4, r4, r5
 8009c08:	10a4      	asrs	r4, r4, #2
 8009c0a:	2600      	movs	r6, #0
 8009c0c:	42a6      	cmp	r6, r4
 8009c0e:	d109      	bne.n	8009c24 <__libc_init_array+0x24>
 8009c10:	4d0b      	ldr	r5, [pc, #44]	; (8009c40 <__libc_init_array+0x40>)
 8009c12:	4c0c      	ldr	r4, [pc, #48]	; (8009c44 <__libc_init_array+0x44>)
 8009c14:	f000 f866 	bl	8009ce4 <_init>
 8009c18:	1b64      	subs	r4, r4, r5
 8009c1a:	10a4      	asrs	r4, r4, #2
 8009c1c:	2600      	movs	r6, #0
 8009c1e:	42a6      	cmp	r6, r4
 8009c20:	d105      	bne.n	8009c2e <__libc_init_array+0x2e>
 8009c22:	bd70      	pop	{r4, r5, r6, pc}
 8009c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c28:	4798      	blx	r3
 8009c2a:	3601      	adds	r6, #1
 8009c2c:	e7ee      	b.n	8009c0c <__libc_init_array+0xc>
 8009c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c32:	4798      	blx	r3
 8009c34:	3601      	adds	r6, #1
 8009c36:	e7f2      	b.n	8009c1e <__libc_init_array+0x1e>
 8009c38:	08009d20 	.word	0x08009d20
 8009c3c:	08009d20 	.word	0x08009d20
 8009c40:	08009d20 	.word	0x08009d20
 8009c44:	08009d24 	.word	0x08009d24

08009c48 <__retarget_lock_acquire_recursive>:
 8009c48:	4770      	bx	lr

08009c4a <__retarget_lock_release_recursive>:
 8009c4a:	4770      	bx	lr

08009c4c <_free_r>:
 8009c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c4e:	2900      	cmp	r1, #0
 8009c50:	d044      	beq.n	8009cdc <_free_r+0x90>
 8009c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c56:	9001      	str	r0, [sp, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8009c5e:	bfb8      	it	lt
 8009c60:	18e4      	addlt	r4, r4, r3
 8009c62:	f7ff ffa3 	bl	8009bac <__malloc_lock>
 8009c66:	4a1e      	ldr	r2, [pc, #120]	; (8009ce0 <_free_r+0x94>)
 8009c68:	9801      	ldr	r0, [sp, #4]
 8009c6a:	6813      	ldr	r3, [r2, #0]
 8009c6c:	b933      	cbnz	r3, 8009c7c <_free_r+0x30>
 8009c6e:	6063      	str	r3, [r4, #4]
 8009c70:	6014      	str	r4, [r2, #0]
 8009c72:	b003      	add	sp, #12
 8009c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c78:	f7ff bf9e 	b.w	8009bb8 <__malloc_unlock>
 8009c7c:	42a3      	cmp	r3, r4
 8009c7e:	d908      	bls.n	8009c92 <_free_r+0x46>
 8009c80:	6825      	ldr	r5, [r4, #0]
 8009c82:	1961      	adds	r1, r4, r5
 8009c84:	428b      	cmp	r3, r1
 8009c86:	bf01      	itttt	eq
 8009c88:	6819      	ldreq	r1, [r3, #0]
 8009c8a:	685b      	ldreq	r3, [r3, #4]
 8009c8c:	1949      	addeq	r1, r1, r5
 8009c8e:	6021      	streq	r1, [r4, #0]
 8009c90:	e7ed      	b.n	8009c6e <_free_r+0x22>
 8009c92:	461a      	mov	r2, r3
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	b10b      	cbz	r3, 8009c9c <_free_r+0x50>
 8009c98:	42a3      	cmp	r3, r4
 8009c9a:	d9fa      	bls.n	8009c92 <_free_r+0x46>
 8009c9c:	6811      	ldr	r1, [r2, #0]
 8009c9e:	1855      	adds	r5, r2, r1
 8009ca0:	42a5      	cmp	r5, r4
 8009ca2:	d10b      	bne.n	8009cbc <_free_r+0x70>
 8009ca4:	6824      	ldr	r4, [r4, #0]
 8009ca6:	4421      	add	r1, r4
 8009ca8:	1854      	adds	r4, r2, r1
 8009caa:	42a3      	cmp	r3, r4
 8009cac:	6011      	str	r1, [r2, #0]
 8009cae:	d1e0      	bne.n	8009c72 <_free_r+0x26>
 8009cb0:	681c      	ldr	r4, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	6053      	str	r3, [r2, #4]
 8009cb6:	440c      	add	r4, r1
 8009cb8:	6014      	str	r4, [r2, #0]
 8009cba:	e7da      	b.n	8009c72 <_free_r+0x26>
 8009cbc:	d902      	bls.n	8009cc4 <_free_r+0x78>
 8009cbe:	230c      	movs	r3, #12
 8009cc0:	6003      	str	r3, [r0, #0]
 8009cc2:	e7d6      	b.n	8009c72 <_free_r+0x26>
 8009cc4:	6825      	ldr	r5, [r4, #0]
 8009cc6:	1961      	adds	r1, r4, r5
 8009cc8:	428b      	cmp	r3, r1
 8009cca:	bf04      	itt	eq
 8009ccc:	6819      	ldreq	r1, [r3, #0]
 8009cce:	685b      	ldreq	r3, [r3, #4]
 8009cd0:	6063      	str	r3, [r4, #4]
 8009cd2:	bf04      	itt	eq
 8009cd4:	1949      	addeq	r1, r1, r5
 8009cd6:	6021      	streq	r1, [r4, #0]
 8009cd8:	6054      	str	r4, [r2, #4]
 8009cda:	e7ca      	b.n	8009c72 <_free_r+0x26>
 8009cdc:	b003      	add	sp, #12
 8009cde:	bd30      	pop	{r4, r5, pc}
 8009ce0:	200009ac 	.word	0x200009ac

08009ce4 <_init>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	bf00      	nop
 8009ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cea:	bc08      	pop	{r3}
 8009cec:	469e      	mov	lr, r3
 8009cee:	4770      	bx	lr

08009cf0 <_fini>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	bf00      	nop
 8009cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf6:	bc08      	pop	{r3}
 8009cf8:	469e      	mov	lr, r3
 8009cfa:	4770      	bx	lr
